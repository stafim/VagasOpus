{"file_contents":{"client/src/pages/Kanban.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport TopBar from \"@/components/TopBar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Users, Mail, Phone, Briefcase, Clock, Plus, Filter, FileText } from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst KANBAN_STAGES = [\n  { id: \"entrevista_inicial\", label: \"Entrevista Inicial\", color: \"bg-blue-500\" },\n  { id: \"teste_tecnico\", label: \"Teste Técnico/Comportamental\", color: \"bg-purple-500\" },\n  { id: \"entrevista_gestor\", label: \"Entrevista com Gestor\", color: \"bg-orange-500\" },\n  { id: \"proposta\", label: \"Proposta\", color: \"bg-green-500\" },\n  { id: \"contratado\", label: \"Contratado\", color: \"bg-emerald-600\" },\n];\n\ninterface Candidate {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n}\n\ninterface Application {\n  id: string;\n  jobId: string;\n  candidateId: string;\n  kanbanStage: string;\n  appliedAt: string;\n  notes?: string;\n  candidate?: Candidate;\n  job?: {\n    profession?: {\n      name: string;\n    };\n    company?: {\n      name: string;\n    };\n  };\n}\n\nconst candidateFormSchema = z.object({\n  candidateName: z.string().min(3, \"Nome completo é obrigatório\"),\n  candidateEmail: z.string().email(\"E-mail inválido\"),\n  candidatePhone: z.string().optional(),\n  jobId: z.string().min(1, \"Vaga é obrigatória\"),\n});\n\ntype CandidateFormData = z.infer<typeof candidateFormSchema>;\n\nexport default function Kanban() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [draggedItem, setDraggedItem] = useState<Application | null>(null);\n  const [showCandidateModal, setShowCandidateModal] = useState(false);\n  const [location] = useLocation();\n  const [selectedJobFilter, setSelectedJobFilter] = useState<string>(\"\");\n  const [showNotesModal, setShowNotesModal] = useState(false);\n  const [selectedApplication, setSelectedApplication] = useState<Application | null>(null);\n  const [notes, setNotes] = useState(\"\");\n  const [showNotesReport, setShowNotesReport] = useState(false);\n\n  // Parse jobId from URL query string\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const jobIdFromUrl = urlParams.get('jobId');\n\n  const { data: applications = [], isLoading } = useQuery<Application[]>({\n    queryKey: [\"/api/applications\", selectedJobFilter],\n    enabled: !!selectedJobFilter,\n    queryFn: async () => {\n      const queryParams = new URLSearchParams();\n      if (selectedJobFilter) {\n        queryParams.set('jobId', selectedJobFilter);\n      }\n      const queryString = queryParams.toString();\n      const applicationsUrl = `/api/applications${queryString ? `?${queryString}` : ''}`;\n      \n      const response = await fetch(applicationsUrl, { credentials: \"include\" });\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    },\n  });\n\n  const { data: jobs = [] } = useQuery<any[]>({\n    queryKey: [\"/api/jobs\"],\n  });\n\n  useEffect(() => {\n    if (jobIdFromUrl) {\n      setSelectedJobFilter(jobIdFromUrl);\n    } else if (jobs.length > 0 && !selectedJobFilter) {\n      setSelectedJobFilter(jobs[0].id);\n    }\n  }, [jobIdFromUrl, jobs]);\n\n  const form = useForm<CandidateFormData>({\n    resolver: zodResolver(candidateFormSchema),\n    defaultValues: {\n      candidateName: \"\",\n      candidateEmail: \"\",\n      candidatePhone: \"\",\n      jobId: jobIdFromUrl || \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (jobIdFromUrl) {\n      form.setValue(\"jobId\", jobIdFromUrl);\n    }\n  }, [jobIdFromUrl, form]);\n\n  const createCandidateMutation = useMutation({\n    mutationFn: async (data: CandidateFormData) => {\n      // First, create the candidate\n      const candidateResponse = await apiRequest(\"POST\", \"/api/candidates\", {\n        name: data.candidateName,\n        email: data.candidateEmail,\n        phone: data.candidatePhone || \"\",\n      });\n      const candidate = await candidateResponse.json();\n      \n      // Then, create the application linking candidate to job\n      const applicationResponse = await apiRequest(\"POST\", \"/api/applications\", {\n        jobId: data.jobId,\n        candidateId: candidate.id,\n        kanbanStage: \"entrevista_inicial\", // Start at first stage\n      });\n      return applicationResponse.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/applications\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Candidato adicionado ao Kanban com sucesso!\",\n      });\n      setShowCandidateModal(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao adicionar candidato. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStageMutation = useMutation({\n    mutationFn: async ({ id, stage }: { id: string; stage: string }) => {\n      await apiRequest(\"PATCH\", `/api/applications/${id}`, { kanbanStage: stage });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/applications\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Candidato movido para nova etapa!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao mover candidato. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateNotesMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes: string }) => {\n      await apiRequest(\"PATCH\", `/api/applications/${id}`, { notes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/applications\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Notas salvas com sucesso!\",\n      });\n      setShowNotesModal(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao salvar notas. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDragStart = (application: Application) => {\n    setDraggedItem(application);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (stageId: string) => {\n    if (draggedItem && draggedItem.kanbanStage !== stageId) {\n      updateStageMutation.mutate({ id: draggedItem.id, stage: stageId });\n    }\n    setDraggedItem(null);\n  };\n\n  const getApplicationsByStage = (stageId: string) => {\n    return applications.filter((app) => app.kanbanStage === stageId);\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .substring(0, 2);\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"pt-BR\", {\n      day: \"2-digit\",\n      month: \"short\",\n    });\n  };\n\n  const onSubmit = (data: CandidateFormData) => {\n    createCandidateMutation.mutate(data);\n  };\n\n  const handleOpenModal = () => {\n    if (selectedJobFilter) {\n      form.setValue(\"jobId\", selectedJobFilter);\n    }\n    setShowCandidateModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowCandidateModal(false);\n    form.reset();\n  };\n\n  const handleOpenNotes = (application: Application) => {\n    setSelectedApplication(application);\n    setNotes(application.notes || \"\");\n    setShowNotesModal(true);\n  };\n\n  const handleSaveNotes = () => {\n    if (selectedApplication) {\n      updateNotesMutation.mutate({ id: selectedApplication.id, notes });\n    }\n  };\n\n  return (\n    <>\n      <TopBar \n        title=\"Kanban de Candidatos\"\n        showCreateButton\n        onCreateClick={handleOpenModal}\n        createButtonText=\"Novo Candidato\"\n      />\n\n      <div className=\"space-y-6\">\n        {/* Filter by Job */}\n        <div className=\"bg-card p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Filter className=\"h-4 w-4 text-muted-foreground\" />\n              {jobs.length === 0 ? (\n                <div className=\"text-sm text-muted-foreground\">\n                  Nenhuma vaga cadastrada. Crie uma vaga primeiro para usar o Kanban.\n                </div>\n              ) : (\n                <Select value={selectedJobFilter} onValueChange={setSelectedJobFilter}>\n                  <SelectTrigger className=\"w-[300px]\" data-testid=\"select-job-filter\">\n                    <SelectValue placeholder=\"Selecione uma vaga\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {jobs.map((job: any) => (\n                      <SelectItem key={job.id} value={job.id}>\n                        [{job.jobCode || job.id.slice(0, 6)}] {job.profession?.name || job.title} - {job.company?.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowNotesReport(true)}\n              data-testid=\"button-notes-report\"\n            >\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Relatório de Notas\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          {KANBAN_STAGES.map((stage) => {\n            const count = getApplicationsByStage(stage.id).length;\n            return (\n              <Card key={stage.id} className=\"border-t-4\" style={{ borderTopColor: stage.color.replace(\"bg-\", \"\") }}>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                    {stage.label}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{count}</div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Kanban Board */}\n        <div className=\"flex gap-3 overflow-x-auto pb-4\">\n          {KANBAN_STAGES.map((stage) => {\n            const stageApplications = getApplicationsByStage(stage.id);\n            return (\n              <div\n                key={stage.id}\n                className=\"flex-shrink-0 w-56\"\n                onDragOver={handleDragOver}\n                onDrop={() => handleDrop(stage.id)}\n              >\n                <div className=\"bg-muted/30 rounded-lg p-3 h-full min-h-[500px]\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded-full ${stage.color}`}></div>\n                      <h3 className=\"font-semibold text-sm\">{stage.label}</h3>\n                    </div>\n                    <Badge variant=\"secondary\">{stageApplications.length}</Badge>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    {isLoading ? (\n                      <div className=\"text-center text-muted-foreground py-8\">Carregando...</div>\n                    ) : stageApplications.length === 0 ? (\n                      <div className=\"text-center text-muted-foreground py-8 text-sm\">\n                        Nenhum candidato\n                      </div>\n                    ) : (\n                      stageApplications.map((application) => (\n                        <Card\n                          key={application.id}\n                          draggable\n                          onDragStart={() => handleDragStart(application)}\n                          className=\"cursor-move hover:shadow-md transition-shadow bg-card\"\n                          data-testid={`card-application-${application.id}`}\n                        >\n                          <CardContent className=\"p-4\">\n                            <div className=\"space-y-3\">\n                              {/* Candidate Info */}\n                              <div className=\"flex items-start gap-3\">\n                                <Avatar className=\"h-10 w-10\">\n                                  <AvatarFallback className=\"bg-primary text-primary-foreground text-xs\">\n                                    {getInitials(application.candidate?.name || \"?\")}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div className=\"flex-1 min-w-0\">\n                                  <h4 className=\"font-semibold text-sm truncate\">\n                                    {application.candidate?.name || \"Candidato\"}\n                                  </h4>\n                                  <div className=\"flex items-center gap-1 text-xs text-muted-foreground mt-1\">\n                                    <Mail className=\"h-3 w-3\" />\n                                    <span className=\"truncate\">{application.candidate?.email || \"N/A\"}</span>\n                                  </div>\n                                  {application.candidate?.phone && (\n                                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground mt-1\">\n                                      <Phone className=\"h-3 w-3\" />\n                                      <span>{application.candidate.phone}</span>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n\n                              {/* Job Info */}\n                              {application.job && (\n                                <div className=\"space-y-1\">\n                                  {application.job.profession && (\n                                    <div className=\"flex items-center gap-1 text-xs\">\n                                      <Briefcase className=\"h-3 w-3 text-muted-foreground\" />\n                                      <span className=\"font-medium\">\n                                        {application.job.profession.name}\n                                      </span>\n                                    </div>\n                                  )}\n                                  {application.job.company && (\n                                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                                      <Users className=\"h-3 w-3\" />\n                                      <span>{application.job.company.name}</span>\n                                    </div>\n                                  )}\n                                </div>\n                              )}\n\n                              {/* Date and Notes */}\n                              <div className=\"flex items-center justify-between pt-2 border-t\">\n                                <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  <span>Aplicado em {formatDate(application.appliedAt)}</span>\n                                </div>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleOpenNotes(application)}\n                                  className=\"h-7 px-2\"\n                                  title={application.notes ? \"Ver/Editar notas\" : \"Adicionar notas\"}\n                                >\n                                  <FileText className={`h-4 w-4 ${application.notes ? 'text-primary' : 'text-muted-foreground'}`} />\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Candidate Modal */}\n      <Dialog open={showCandidateModal} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Novo Candidato</DialogTitle>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"candidateName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome Completo *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"João da Silva\" {...field} data-testid=\"input-candidate-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"candidateEmail\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>E-mail *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\" \n                        placeholder=\"joao@example.com\" \n                        {...field} \n                        data-testid=\"input-candidate-email\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"candidatePhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Telefone</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"(11) 99999-9999\" \n                        {...field} \n                        data-testid=\"input-candidate-phone\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"jobId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vaga *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-job\">\n                          <SelectValue placeholder=\"Selecione a vaga\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {jobs.map((job: any) => (\n                          <SelectItem key={job.id} value={job.id}>\n                            [{job.jobCode || job.id.slice(0, 6)}] {job.profession?.name || job.title} - {job.company?.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex items-center justify-end space-x-4 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleCloseModal} data-testid=\"button-cancel\">\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createCandidateMutation.isPending}\n                  data-testid=\"button-save\"\n                >\n                  {createCandidateMutation.isPending && (\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  )}\n                  Criar Candidato\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Notes Modal */}\n      <Dialog open={showNotesModal} onOpenChange={setShowNotesModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              Notas do Candidato - {selectedApplication?.candidate?.name}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Notas Internas</label>\n              <Textarea\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Adicione notas sobre o candidato, observações da entrevista, feedback, etc...\"\n                className=\"min-h-[200px]\"\n                data-testid=\"textarea-notes\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-end space-x-4 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setShowNotesModal(false)}\n                data-testid=\"button-cancel-notes\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                onClick={handleSaveNotes}\n                disabled={updateNotesMutation.isPending}\n                data-testid=\"button-save-notes\"\n              >\n                {updateNotesMutation.isPending && (\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                )}\n                Salvar Notas\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Notes Report Modal */}\n      <Dialog open={showNotesReport} onOpenChange={setShowNotesReport}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Relatório de Notas dos Candidatos</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            {applications.filter(app => app.notes && app.notes.trim() !== \"\").length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <FileText className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">Nenhuma nota registrada</p>\n                <p className=\"text-sm\">Adicione notas aos candidatos para vê-las aqui.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {applications\n                  .filter(app => app.notes && app.notes.trim() !== \"\")\n                  .map((application) => (\n                    <Card key={application.id} className=\"border-l-4 border-l-primary\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"space-y-3\">\n                          {/* Candidate Header */}\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-start gap-3\">\n                              <Avatar className=\"h-10 w-10\">\n                                <AvatarFallback className=\"bg-primary text-primary-foreground text-xs\">\n                                  {getInitials(application.candidate?.name || \"?\")}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <h4 className=\"font-semibold text-base\">\n                                  {application.candidate?.name || \"Candidato\"}\n                                </h4>\n                                <div className=\"flex items-center gap-2 mt-1\">\n                                  <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                                    <Mail className=\"h-3 w-3\" />\n                                    <span>{application.candidate?.email || \"N/A\"}</span>\n                                  </div>\n                                  {application.candidate?.phone && (\n                                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                                      <Phone className=\"h-3 w-3\" />\n                                      <span>{application.candidate.phone}</span>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                            <Badge variant=\"outline\">\n                              {KANBAN_STAGES.find(s => s.id === application.kanbanStage)?.label || application.kanbanStage}\n                            </Badge>\n                          </div>\n\n                          {/* Job Info */}\n                          {application.job && (\n                            <div className=\"flex items-center gap-4 text-sm bg-muted/50 p-2 rounded\">\n                              {application.job.profession && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Briefcase className=\"h-3 w-3 text-muted-foreground\" />\n                                  <span className=\"font-medium\">{application.job.profession.name}</span>\n                                </div>\n                              )}\n                              {application.job.company && (\n                                <div className=\"flex items-center gap-1 text-muted-foreground\">\n                                  <Users className=\"h-3 w-3\" />\n                                  <span>{application.job.company.name}</span>\n                                </div>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Notes */}\n                          <div className=\"bg-amber-50 dark:bg-amber-950/20 p-3 rounded-lg border border-amber-200 dark:border-amber-800\">\n                            <div className=\"flex items-start gap-2\">\n                              <FileText className=\"h-4 w-4 text-amber-600 dark:text-amber-500 mt-0.5 flex-shrink-0\" />\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm font-medium text-amber-900 dark:text-amber-100 mb-1\">Notas:</p>\n                                <p className=\"text-sm text-amber-800 dark:text-amber-200 whitespace-pre-wrap\">\n                                  {application.notes}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Footer */}\n                          <div className=\"flex items-center justify-between pt-2 border-t text-xs text-muted-foreground\">\n                            <div className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              <span>Aplicado em {formatDate(application.appliedAt)}</span>\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                handleOpenNotes(application);\n                                setShowNotesReport(false);\n                              }}\n                              className=\"h-7\"\n                            >\n                              Editar Notas\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":28520},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/pages/Users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, User, Mail, Shield, Pencil, Trash2 } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst roleLabels: Record<string, string> = {\n  user: \"Usuário\",\n  admin: \"Administrador\",\n  recruiter: \"Recrutador\",\n  approver: \"Aprovador\",\n  manager: \"Gestor\"\n};\n\nconst roleColors: Record<string, string> = {\n  user: \"bg-gray-100 text-gray-800\",\n  admin: \"bg-red-100 text-red-800\",\n  recruiter: \"bg-green-100 text-green-800\",\n  approver: \"bg-purple-100 text-purple-800\",\n  manager: \"bg-orange-100 text-orange-800\"\n};\n\nconst userFormSchema = z.object({\n  name: z.string().min(3, \"Nome deve ter pelo menos 3 caracteres\"),\n  email: z.string().email(\"E-mail inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  role: z.string().min(1, \"Selecione um tipo de permissão\")\n});\n\ntype UserFormData = z.infer<typeof userFormSchema>;\n\nexport default function Users() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<any | null>(null);\n  const [deleteUserId, setDeleteUserId] = useState<string | null>(null);\n  const [roleFilter, setRoleFilter] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"user\"\n    }\n  });\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: UserFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Usuário criado com sucesso!\",\n      });\n      setIsModalOpen(false);\n      setEditingUser(null);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao criar usuário. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: UserFormData }) => {\n      const response = await apiRequest(\"PUT\", `/api/users/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Usuário atualizado com sucesso!\",\n      });\n      setIsModalOpen(false);\n      setEditingUser(null);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao atualizar usuário.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Usuário excluído com sucesso!\",\n      });\n      setDeleteUserId(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao excluir usuário.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (user: any) => {\n    setEditingUser(user);\n    form.reset({\n      name: user.firstName || user.lastName || \"\",\n      email: user.email,\n      password: \"\",\n      role: user.role\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    setDeleteUserId(id);\n  };\n\n  const confirmDelete = () => {\n    if (deleteUserId) {\n      deleteUserMutation.mutate(deleteUserId);\n    }\n  };\n\n  const onSubmit = (data: UserFormData) => {\n    if (editingUser) {\n      updateUserMutation.mutate({ id: editingUser.id, data });\n    } else {\n      createUserMutation.mutate(data);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingUser(null);\n    form.reset();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"h-24 bg-gray-100 dark:bg-gray-800 rounded-lg animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Gestão de Usuários\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mt-1\">\n            Gerencie os usuários do sistema\n          </p>\n        </div>\n        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-user\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              NOVO\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>{editingUser ? \"Editar Usuário\" : \"Criar Novo Usuário\"}</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Nome completo\"\n                          data-testid=\"input-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"usuario@exemplo.com\"\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Senha</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Mínimo 6 caracteres\"\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tipo de permissão</FormLabel>\n                      <Select\n                        value={field.value}\n                        onValueChange={field.onChange}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-role\">\n                            <SelectValue placeholder=\"Selecione o tipo\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Object.entries(roleLabels).map(([value, label]) => (\n                            <SelectItem key={value} value={value}>\n                              {label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2 justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleCloseModal}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createUserMutation.isPending || updateUserMutation.isPending}\n                    data-testid=\"button-save-user\"\n                  >\n                    {createUserMutation.isPending || updateUserMutation.isPending \n                      ? (editingUser ? \"Atualizando...\" : \"Criando...\") \n                      : (editingUser ? \"Atualizar\" : \"Criar\")}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Usuários do Sistema\n            </CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Select value={roleFilter} onValueChange={setRoleFilter}>\n                <SelectTrigger className=\"w-[200px]\" data-testid=\"select-role-filter\">\n                  <SelectValue placeholder=\"Filtrar por tipo\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os tipos</SelectItem>\n                  {Object.entries(roleLabels).map(([value, label]) => (\n                    <SelectItem key={value} value={value}>\n                      {label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {users.length === 0 ? (\n            <p className=\"text-gray-500 text-center py-8\">\n              Nenhum usuário cadastrado\n            </p>\n          ) : (\n            <div className=\"space-y-4\">\n              {users\n                .filter((user: any) => roleFilter === \"all\" || user.role === roleFilter)\n                .map((user: any) => (\n                <div\n                  key={user.id}\n                  className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                  data-testid={`user-item-${user.id}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div>\n                      <p className=\"font-medium text-foreground\" data-testid={`text-username-${user.id}`}>\n                        {user.firstName} {user.lastName}\n                      </p>\n                      <div className=\"flex items-center gap-1 text-sm text-muted-foreground mt-1\">\n                        <Mail className=\"h-3 w-3\" />\n                        <span>{user.email}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Badge\n                      className={roleColors[user.role as keyof typeof roleColors] || roleColors.user}\n                      data-testid={`badge-role-${user.id}`}\n                    >\n                      <Shield className=\"h-3 w-3 mr-1\" />\n                      {roleLabels[user.role as keyof typeof roleLabels] || user.role}\n                    </Badge>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Desde: {new Date(user.createdAt).toLocaleDateString('pt-BR')}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(user)}\n                        data-testid={`button-edit-${user.id}`}\n                      >\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(user.id)}\n                        data-testid={`button-delete-${user.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteUserId} onOpenChange={() => setDeleteUserId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir este usuário? Esta ação não pode ser desfeita.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancelar</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Excluir\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":15032},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  passwordHash: varchar(\"password_hash\"), // For local authentication\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"user\"), // user, admin, recruiter\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Companies table\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  cnpj: varchar(\"cnpj\", { length: 18 }),\n  contactPerson: varchar(\"contact_person\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  email: varchar(\"email\", { length: 255 }),\n  industryType: varchar(\"industry_type\", { length: 100 }),\n  description: text(\"description\"),\n  website: varchar(\"website\"),\n  logo: varchar(\"logo\"),\n  jobCounter: integer(\"job_counter\").default(0), // Contador para IDs de vagas\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Cost centers table\nexport const costCenters = pgTable(\"cost_centers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  code: varchar(\"code\", { length: 50 }).notNull(),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  budget: decimal(\"budget\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  contactPerson: varchar(\"contact_person\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  email: varchar(\"email\", { length: 255 }),\n  address: text(\"address\"),\n  city: varchar(\"city\", { length: 100 }),\n  state: varchar(\"state\", { length: 2 }),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Job status enum\nexport const jobStatusEnum = pgEnum(\"job_status\", [\n  \"active\", \n  \"closed\",\n  \"expired\",\n  \"aberto\",\n  \"aprovada\",\n  \"em_recrutamento\",\n  \"em_documentacao\",\n  \"dp\",\n  \"em_mobilizacao\",\n  \"cancelada\"\n]);\n\n// Contract type enum\nexport const contractTypeEnum = pgEnum(\"contract_type\", [\n  \"clt\",\n  \"pj\", \n  \"freelancer\",\n  \"estagio\",\n  \"temporario\"\n]);\n\n// Job opening reason enum\nexport const jobReasonEnum = pgEnum(\"job_reason\", [\n  \"substituicao\",\n  \"aumento_quadro\"\n]);\n\n// Gender enum\nexport const genderEnum = pgEnum(\"gender\", [\n  \"masculino\",\n  \"feminino\",\n  \"indiferente\"\n]);\n\n// Work scale enum\nexport const workScaleEnum = pgEnum(\"work_scale\", [\n  \"5x1\",\n  \"5x2\",\n  \"6x1\",\n  \"12x36\",\n  \"outro\"\n]);\n\n// Unhealthiness level enum\nexport const unhealthinessEnum = pgEnum(\"unhealthiness_level\", [\n  \"nao\",\n  \"10\",\n  \"20\",\n  \"40\"\n]);\n\n// Job type enum\nexport const jobTypeEnum = pgEnum(\"job_type\", [\n  \"produtiva\",\n  \"improdutiva\"\n]);\n\n// Permission system enums\nexport const roleTypeEnum = pgEnum(\"role_type\", [\n  \"admin\",\n  \"hr_manager\", \n  \"recruiter\",\n  \"interviewer\",\n  \"viewer\",\n  \"approver\",\n  \"manager\"\n]);\n\nexport const permissionTypeEnum = pgEnum(\"permission_type\", [\n  \"create_jobs\",\n  \"edit_jobs\", \n  \"delete_jobs\",\n  \"view_jobs\",\n  \"create_companies\",\n  \"edit_companies\",\n  \"delete_companies\",\n  \"view_companies\",\n  \"manage_cost_centers\",\n  \"view_applications\",\n  \"manage_applications\",\n  \"interview_candidates\",\n  \"hire_candidates\",\n  \"view_reports\",\n  \"export_data\",\n  \"manage_users\",\n  \"manage_permissions\"\n]);\n\n// Professions table\nexport const professions = pgTable(\"professions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull().unique(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 100 }), // e.g., \"Tecnologia\", \"Marketing\", \"Vendas\"\n  union: varchar(\"union\", { length: 255 }), // Sindicato\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Work Scales table - Parametrized work scales\nexport const workScales = pgTable(\"work_scales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(), // e.g., \"5x1\", \"5x2\", \"6x1\", \"12x36\"\n  description: text(\"description\"), // Optional description\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Benefits table - Parametrized benefits\nexport const benefits = pgTable(\"benefits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(), // e.g., \"Vale Alimentação\", \"Plano de Saúde\"\n  description: text(\"description\"), // Optional description\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Jobs table - temporarily keeping both title and professionId for migration\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobCode: varchar(\"job_code\", { length: 50 }).unique(), // ID legível da vaga (ex: OPUS001, TELOS001)\n  title: varchar(\"title\", { length: 255 }), // Keep existing field temporarily\n  professionId: varchar(\"profession_id\").references(() => professions.id), // Add new field as optional\n  description: text(\"description\"),\n  requirements: text(\"requirements\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  costCenterId: varchar(\"cost_center_id\").references(() => costCenters.id),\n  recruiterId: varchar(\"recruiter_id\").references(() => users.id),\n  department: varchar(\"department\"),\n  location: varchar(\"location\"),\n  contractType: contractTypeEnum(\"contract_type\").default(\"clt\"),\n  jobType: jobTypeEnum(\"job_type\"), // Tipo de vaga: produtiva (faturar) ou improdutiva (sem faturar)\n  \n  // Novos campos detalhados da vaga\n  openingDate: timestamp(\"opening_date\"), // Data de abertura da vaga\n  startDate: timestamp(\"start_date\"), // Data de início\n  openingReason: jobReasonEnum(\"opening_reason\"), // Motivo: substituição ou aumento de quadro\n  replacementEmployeeName: varchar(\"replacement_employee_name\", { length: 255 }), // Nome do colaborador a ser substituído (quando motivo = substituição)\n  ageRangeMin: integer(\"age_range_min\"), // Idade mínima\n  ageRangeMax: integer(\"age_range_max\"), // Idade máxima\n  specifications: text(\"specifications\"), // Especificações detalhadas\n  clientId: varchar(\"client_id\").references(() => clients.id), // Cliente\n  vacancyQuantity: integer(\"vacancy_quantity\").default(1), // Quantidade de vagas\n  gender: genderEnum(\"gender\").default(\"indiferente\"), // Sexo\n  workScaleId: varchar(\"work_scale_id\").references(() => workScales.id), // Escala de trabalho (parametrizada)\n  workHours: varchar(\"work_hours\", { length: 100 }), // Horário de trabalho\n  \n  // Remuneração e benefícios\n  salaryMin: decimal(\"salary_min\", { precision: 10, scale: 2 }),\n  bonus: decimal(\"bonus\", { precision: 10, scale: 2 }), // Gratificação\n  hasHazardPay: boolean(\"has_hazard_pay\").default(false), // Periculosidade\n  unhealthinessLevel: unhealthinessEnum(\"unhealthiness_level\").default(\"nao\"), // Insalubridade\n  \n  status: jobStatusEnum(\"status\").default(\"draft\"),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  expiresAt: timestamp(\"expires_at\"),\n  slaDeadline: timestamp(\"sla_deadline\"), // SLA de 14 dias para fechamento da vaga\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Job-Benefits relationship table (many-to-many)\nexport const jobBenefits = pgTable(\"job_benefits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").references(() => jobs.id, { onDelete: \"cascade\" }).notNull(),\n  benefitId: varchar(\"benefit_id\").references(() => benefits.id, { onDelete: \"cascade\" }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User-Company-Role assignments table\nexport const userCompanyRoles = pgTable(\"user_company_roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  role: roleTypeEnum(\"role\").notNull(),\n  costCenterId: varchar(\"cost_center_id\").references(() => costCenters.id), // Optional: restrict to specific cost center\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Role permissions mapping table\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  role: roleTypeEnum(\"role\").notNull(),\n  permission: permissionTypeEnum(\"permission\").notNull(),\n  isGranted: boolean(\"is_granted\").default(true),\n});\n\n// Selection process status enum\nexport const selectionStatusEnum = pgEnum(\"selection_status\", [\n  \"applied\",\n  \"under_review\", \n  \"phone_screening\",\n  \"technical_test\",\n  \"interview_scheduled\",\n  \"interview_completed\", \n  \"final_review\",\n  \"approved\",\n  \"rejected\",\n  \"hired\"\n]);\n\n// Interview types enum\nexport const interviewTypeEnum = pgEnum(\"interview_type\", [\n  \"phone_screening\",\n  \"technical\",\n  \"behavioral\", \n  \"final\",\n  \"panel\"\n]);\n\n// Kanban stages enum\nexport const kanbanStageEnum = pgEnum(\"kanban_stage\", [\n  \"entrevista_inicial\",\n  \"teste_tecnico\",\n  \"entrevista_gestor\",\n  \"proposta\",\n  \"contratado\"\n]);\n\n// Candidates table (global pool of candidates)\nexport const candidates = pgTable(\"candidates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  phone: varchar(\"phone\", { length: 20 }),\n  resume: varchar(\"resume\"), // URL to resume file\n  skills: text(\"skills\"),\n  experience: text(\"experience\"),\n  education: text(\"education\"),\n  linkedinUrl: varchar(\"linkedin_url\"),\n  portfolioUrl: varchar(\"portfolio_url\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Applications table (links candidates to specific jobs)\nexport const applications = pgTable(\"applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").references(() => jobs.id).notNull(),\n  candidateId: varchar(\"candidate_id\").references(() => candidates.id).notNull(),\n  coverLetter: text(\"cover_letter\"),\n  status: selectionStatusEnum(\"status\").default(\"applied\"),\n  currentStage: varchar(\"current_stage\").default(\"application_received\"),\n  kanbanStage: kanbanStageEnum(\"kanban_stage\").default(\"entrevista_inicial\"),\n  overallScore: integer(\"overall_score\").default(0), // Score out of 100\n  rejectionReason: text(\"rejection_reason\"),\n  notes: text(\"notes\"), // Internal notes about candidate\n  appliedAt: timestamp(\"applied_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Selection process stages table\nexport const selectionStages = pgTable(\"selection_stages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").references(() => jobs.id),\n  name: varchar(\"name\", { length: 255 }).notNull(), // \"Application Review\", \"Phone Screen\", etc.\n  description: text(\"description\"),\n  order: integer(\"order\").notNull(), // Stage order (1, 2, 3...)\n  isRequired: boolean(\"is_required\").default(true),\n  passingScore: integer(\"passing_score\").default(70), // Minimum score to advance\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Interviews table\nexport const interviews = pgTable(\"interviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicationId: varchar(\"application_id\").references(() => applications.id),\n  interviewerId: varchar(\"interviewer_id\").references(() => users.id),\n  stageId: varchar(\"stage_id\").references(() => selectionStages.id),\n  type: interviewTypeEnum(\"type\").notNull(),\n  scheduledAt: timestamp(\"scheduled_at\"),\n  duration: integer(\"duration\").default(60), // Duration in minutes\n  location: varchar(\"location\"), // Room/link\n  status: varchar(\"status\").default(\"scheduled\"), // scheduled, completed, cancelled, rescheduled\n  score: integer(\"score\"), // Interview score out of 100\n  feedback: text(\"feedback\"),\n  recommendations: text(\"recommendations\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Interview evaluation criteria table\nexport const interviewCriteria = pgTable(\"interview_criteria\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  interviewId: varchar(\"interview_id\").references(() => interviews.id),\n  criterion: varchar(\"criterion\", { length: 255 }).notNull(), // \"Technical Skills\", \"Communication\", etc.\n  score: integer(\"score\").notNull(), // Score out of 10\n  notes: text(\"notes\"),\n});\n\n// Application stage progress tracking\nexport const applicationStageProgress = pgTable(\"application_stage_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicationId: varchar(\"application_id\").references(() => applications.id),\n  stageId: varchar(\"stage_id\").references(() => selectionStages.id),\n  status: varchar(\"status\").default(\"pending\"), // pending, in_progress, completed, failed\n  score: integer(\"score\"), // Score for this stage\n  feedback: text(\"feedback\"),\n  completedAt: timestamp(\"completed_at\"),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const professionsRelations = relations(professions, ({ many }) => ({\n  jobs: many(jobs),\n}));\n\nexport const companiesRelations = relations(companies, ({ many }) => ({\n  costCenters: many(costCenters),\n  jobs: many(jobs),\n}));\n\nexport const costCentersRelations = relations(costCenters, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [costCenters.companyId],\n    references: [companies.id],\n  }),\n  jobs: many(jobs),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  profession: one(professions, {\n    fields: [jobs.professionId],\n    references: [professions.id],\n  }),\n  company: one(companies, {\n    fields: [jobs.companyId],\n    references: [companies.id],\n  }),\n  costCenter: one(costCenters, {\n    fields: [jobs.costCenterId],\n    references: [costCenters.id],\n  }),\n  createdBy: one(users, {\n    fields: [jobs.createdBy],\n    references: [users.id],\n  }),\n  applications: many(applications),\n}));\n\nexport const candidatesRelations = relations(candidates, ({ many }) => ({\n  applications: many(applications),\n}));\n\nexport const applicationsRelations = relations(applications, ({ one, many }) => ({\n  job: one(jobs, {\n    fields: [applications.jobId],\n    references: [jobs.id],\n  }),\n  candidate: one(candidates, {\n    fields: [applications.candidateId],\n    references: [candidates.id],\n  }),\n  interviews: many(interviews),\n  stageProgress: many(applicationStageProgress),\n}));\n\nexport const userCompanyRolesRelations = relations(userCompanyRoles, ({ one }) => ({\n  user: one(users, {\n    fields: [userCompanyRoles.userId],\n    references: [users.id],\n  }),\n  company: one(companies, {\n    fields: [userCompanyRoles.companyId],\n    references: [companies.id],\n  }),\n  costCenter: one(costCenters, {\n    fields: [userCompanyRoles.costCenterId],\n    references: [costCenters.id],\n  }),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  companyRoles: many(userCompanyRoles),\n  createdJobs: many(jobs),\n  interviews: many(interviews),\n}));\n\nexport const selectionStagesRelations = relations(selectionStages, ({ one, many }) => ({\n  job: one(jobs, {\n    fields: [selectionStages.jobId],\n    references: [jobs.id],\n  }),\n  interviews: many(interviews),\n  stageProgress: many(applicationStageProgress),\n}));\n\nexport const interviewsRelations = relations(interviews, ({ one, many }) => ({\n  application: one(applications, {\n    fields: [interviews.applicationId],\n    references: [applications.id],\n  }),\n  interviewer: one(users, {\n    fields: [interviews.interviewerId],\n    references: [users.id],\n  }),\n  stage: one(selectionStages, {\n    fields: [interviews.stageId],\n    references: [selectionStages.id],\n  }),\n  criteria: many(interviewCriteria),\n}));\n\nexport const interviewCriteriaRelations = relations(interviewCriteria, ({ one }) => ({\n  interview: one(interviews, {\n    fields: [interviewCriteria.interviewId],\n    references: [interviews.id],\n  }),\n}));\n\nexport const applicationStageProgressRelations = relations(applicationStageProgress, ({ one }) => ({\n  application: one(applications, {\n    fields: [applicationStageProgress.applicationId],\n    references: [applications.id],\n  }),\n  stage: one(selectionStages, {\n    fields: [applicationStageProgress.stageId],\n    references: [selectionStages.id],\n  }),\n  reviewer: one(users, {\n    fields: [applicationStageProgress.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCostCenterSchema = createInsertSchema(costCenters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWorkScaleSchema = createInsertSchema(workScales).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBenefitSchema = createInsertSchema(benefits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobBenefitSchema = createInsertSchema(jobBenefits).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJobSchema = z.object({\n  professionId: z.string().min(1, \"Profissão é obrigatória\"),\n  companyId: z.string().min(1, \"Empresa é obrigatória\"),\n  description: z.string().optional(),\n  costCenterId: z.string().optional(),\n  recruiterId: z.string().optional(),\n  department: z.string().optional(),\n  location: z.string().optional(),\n  contractType: z.enum([\"clt\", \"pj\", \"freelancer\", \"estagio\", \"temporario\"]).default(\"clt\"),\n  jobType: z.enum([\"produtiva\", \"improdutiva\"]).optional(),\n  salaryMin: z.string().optional(),\n  status: z.enum([\"draft\", \"active\", \"paused\", \"closed\", \"expired\", \"aberto\", \"aprovada\", \"em_recrutamento\", \"em_documentacao\"]).default(\"draft\"),\n  createdBy: z.string().optional(),\n  expiresAt: z.string().optional(),\n  slaDeadline: z.string().optional(),\n  \n  // Novos campos detalhados\n  openingDate: z.string().optional(),\n  startDate: z.string().optional(),\n  openingReason: z.enum([\"substituicao\", \"aumento_quadro\"]).optional(),\n  replacementEmployeeName: z.string().optional(),\n  ageRangeMin: z.number().optional(),\n  ageRangeMax: z.number().optional(),\n  specifications: z.string().optional(),\n  clientId: z.string().optional(),\n  vacancyQuantity: z.number().optional(),\n  gender: z.enum([\"masculino\", \"feminino\", \"indiferente\"]).optional(),\n  workScaleId: z.string().optional(),\n  workHours: z.string().optional(),\n  \n  // Remuneração e benefícios\n  bonus: z.string().optional(),\n  hasHazardPay: z.boolean().optional(),\n  unhealthinessLevel: z.enum([\"nao\", \"10\", \"20\", \"40\"]).optional(),\n  \n  // Benefícios (array of benefit IDs)\n  benefitIds: z.array(z.string()).optional(),\n});\n\nexport const insertCandidateSchema = createInsertSchema(candidates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertApplicationSchema = createInsertSchema(applications).omit({\n  id: true,\n  appliedAt: true,\n  updatedAt: true,\n});\n\nexport const insertSelectionStageSchema = createInsertSchema(selectionStages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInterviewSchema = createInsertSchema(interviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInterviewCriteriaSchema = createInsertSchema(interviewCriteria).omit({\n  id: true,\n});\n\nexport const insertApplicationStageProgressSchema = createInsertSchema(applicationStageProgress).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserCompanyRoleSchema = createInsertSchema(userCompanyRoles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n});\n\nexport const insertProfessionSchema = createInsertSchema(professions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\n\nexport type CostCenter = typeof costCenters.$inferSelect;\nexport type InsertCostCenter = z.infer<typeof insertCostCenterSchema>;\n\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\n\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\n\nexport type Candidate = typeof candidates.$inferSelect;\nexport type InsertCandidate = z.infer<typeof insertCandidateSchema>;\n\nexport type Application = typeof applications.$inferSelect;\nexport type InsertApplication = z.infer<typeof insertApplicationSchema>;\n\nexport type SelectionStage = typeof selectionStages.$inferSelect;\nexport type InsertSelectionStage = z.infer<typeof insertSelectionStageSchema>;\n\nexport type Interview = typeof interviews.$inferSelect;\nexport type InsertInterview = z.infer<typeof insertInterviewSchema>;\n\nexport type InterviewCriteria = typeof interviewCriteria.$inferSelect;\nexport type InsertInterviewCriteria = z.infer<typeof insertInterviewCriteriaSchema>;\n\nexport type ApplicationStageProgress = typeof applicationStageProgress.$inferSelect;\nexport type InsertApplicationStageProgress = z.infer<typeof insertApplicationStageProgressSchema>;\n\nexport type UserCompanyRole = typeof userCompanyRoles.$inferSelect;\nexport type InsertUserCompanyRole = z.infer<typeof insertUserCompanyRoleSchema>;\n\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\n\nexport type Profession = typeof professions.$inferSelect;\nexport type InsertProfession = z.infer<typeof insertProfessionSchema>;\n\nexport type WorkScale = typeof workScales.$inferSelect;\nexport type InsertWorkScale = z.infer<typeof insertWorkScaleSchema>;\n\nexport type Benefit = typeof benefits.$inferSelect;\nexport type InsertBenefit = z.infer<typeof insertBenefitSchema>;\n\nexport type JobBenefit = typeof jobBenefits.$inferSelect;\nexport type InsertJobBenefit = z.infer<typeof insertJobBenefitSchema>;\n\n// Extended types for joined queries\nexport type JobWithDetails = Job & {\n  profession?: Profession;\n  company?: Company;\n  costCenter?: CostCenter;\n  createdByUser?: User;\n  applications?: Application[];\n  applicationsCount?: number;\n  selectionStages?: SelectionStage[];\n};\n\nexport type ApplicationWithDetails = Application & {\n  job?: Job;\n  candidate?: Candidate;\n  interviews?: Interview[];\n  stageProgress?: ApplicationStageProgress[];\n  currentStageInfo?: SelectionStage;\n};\n\nexport type InterviewWithDetails = Interview & {\n  application?: Application;\n  interviewer?: User;\n  stage?: SelectionStage;\n  criteria?: InterviewCriteria[];\n  candidate?: {\n    name: string;\n    email: string;\n    jobTitle: string;\n  };\n};\n\nexport type CompanyWithCostCenters = Company & {\n  costCenters?: CostCenter[];\n  jobsCount?: number;\n};\n\n// API Response types\nexport type DashboardMetrics = {\n  totalJobs: number;\n  activeJobs: number;\n  totalApplications: number;\n  totalCompanies: number;\n};\n\nexport type JobsByStatusResponse = Array<{ status: string; count: number }>;\n\nexport type ApplicationsByMonthResponse = Array<{ month: string; count: number }>;\n\nexport type JobsListResponse = JobWithDetails[];\n\nexport type CompaniesListResponse = CompanyWithCostCenters[];\n\n// Selection process response types\nexport type SelectionProcessMetrics = {\n  totalApplications: number;\n  byStatus: Array<{ status: string; count: number }>;\n  averageTimeToHire: number; // in days\n  conversionRates: {\n    applicationToInterview: number;\n    interviewToOffer: number;\n    offerToHire: number;\n  };\n};\n\nexport type InterviewCalendarResponse = {\n  upcomingInterviews: InterviewWithDetails[];\n  todayInterviews: InterviewWithDetails[];\n  overdueInterviews: InterviewWithDetails[];\n};\n\nexport type JobClosureReportItem = {\n  recruiterId: string;\n  recruiterName: string;\n  recruiterEmail: string;\n  closedJobsCount: number;\n  averageDaysToClose: number;\n  averageSalary: number;\n};\n","size_bytes":26146},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  BarChart3, \n  Briefcase, \n  Building2,\n  UserCheck,\n  Users, \n  Shield, \n  FileText,\n  Settings,\n  HelpCircle,\n  LogOut,\n  ClipboardCheck\n} from \"lucide-react\";\nimport logoImage from \"@assets/Screenshot_20250930_142224_Chrome~2_1759253037075.jpg\";\n\nconst navigationItems = [\n  {\n    name: \"Dashboard\",\n    href: \"/dashboard\",\n    icon: BarChart3,\n    description: \"Visão geral do sistema\"\n  },\n  {\n    name: \"Vagas\",\n    href: \"/jobs\",\n    icon: Briefcase,\n    description: \"Gerenciar vagas de emprego\",\n    badge: \"Novo\"\n  },\n  {\n    name: \"Kanban\",\n    href: \"/kanban\",\n    icon: BarChart3,\n    description: \"Pipeline de candidatos\"\n  },\n  {\n    name: \"Empresas\",\n    href: \"/companies\",\n    icon: Building2,\n    description: \"Cadastro de empresas\"\n  },\n  {\n    name: \"Clientes\",\n    href: \"/clients\",\n    icon: UserCheck,\n    description: \"Cadastro de clientes\"\n  },\n  {\n    name: \"Usuários\",\n    href: \"/users\",\n    icon: Users,\n    description: \"Gerenciar usuários\"\n  },\n  {\n    name: \"Permissões\",\n    href: \"/permissions\",\n    icon: Shield,\n    description: \"Controle de acesso\"\n  },\n  {\n    name: \"Fechamento de Vagas\",\n    href: \"/reports/job-closure\",\n    icon: ClipboardCheck,\n    description: \"Ranking de recrutadores\"\n  },\n];\n\nconst bottomNavItems = [\n  {\n    name: \"Configurações\",\n    href: \"/settings\",\n    icon: Settings,\n    description: \"Configurações do sistema\"\n  },\n  {\n    name: \"Ajuda\",\n    href: \"/help\",\n    icon: HelpCircle,\n    description: \"Central de ajuda\"\n  },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"hidden md:flex md:w-72 md:flex-col\">\n      <div className=\"flex flex-col flex-grow bg-card border-r border-border shadow-sm\">\n        {/* Header */}\n        <div className=\"flex items-center flex-shrink-0 px-6 py-6\">\n          <div className=\"flex items-center\">\n            <img \n              src={logoImage} \n              alt=\"VagasPro Logo\" \n              className=\"w-12 h-12 object-contain\"\n            />\n            <div className=\"ml-3\">\n              <p className=\"text-xs text-muted-foreground\">Gestão de Vagas</p>\n            </div>\n          </div>\n        </div>\n\n        <Separator className=\"mx-6\" />\n\n        {/* Navigation */}\n        <div className=\"flex-1 px-4 py-6 space-y-2 overflow-y-auto\">\n          {navigationItems.map((item) => {\n            const isActive = location === item.href || location.startsWith(item.href + \"/\");\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  className={cn(\n                    \"group flex items-center justify-between px-3 py-3 text-sm font-medium rounded-lg transition-all duration-200 hover:scale-[1.02] cursor-pointer\",\n                    isActive\n                      ? \"bg-primary text-primary-foreground shadow-md\"\n                      : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                  )}\n                  data-testid={`link-${item.name.toLowerCase().replace(\" \", \"-\")}`}\n                  title={item.description}\n                >\n                  <div className=\"flex items-center\">\n                    <Icon className={cn(\n                      \"h-5 w-5 mr-3 transition-colors\",\n                      isActive ? \"text-primary-foreground\" : \"text-muted-foreground group-hover:text-accent-foreground\"\n                    )} />\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm font-medium\">{item.name}</span>\n                      <span className={cn(\n                        \"text-xs\",\n                        isActive ? \"text-primary-foreground/70\" : \"text-muted-foreground\"\n                      )}>\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                  {item.badge && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {item.badge}\n                    </Badge>\n                  )}\n                </div>\n              </Link>\n            );\n          })}\n\n          <Separator className=\"my-4\" />\n\n          {/* Bottom Navigation */}\n          <div className=\"space-y-1\">\n            {bottomNavItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={cn(\n                      \"group flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200 cursor-pointer\",\n                      isActive\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                    data-testid={`link-${item.name.toLowerCase()}`}\n                    title={item.description}\n                  >\n                    <Icon className=\"h-4 w-4 mr-3\" />\n                    {item.name}\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* User Profile */}\n        <div className=\"flex-shrink-0 p-4 border-t border-border bg-muted/30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center min-w-0 flex-1\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-chart-2 rounded-full flex items-center justify-center shadow-sm\">\n                <span className=\"text-sm font-semibold text-primary-foreground\">U</span>\n              </div>\n              <div className=\"ml-3 min-w-0 flex-1\">\n                <p className=\"text-sm font-semibold text-foreground truncate\">Demo User</p>\n                <p className=\"text-xs text-muted-foreground\">Administrador</p>\n              </div>\n            </div>\n            <a\n              href=\"/api/logout\"\n              className=\"text-muted-foreground hover:text-foreground p-2 rounded-lg hover:bg-accent transition-colors\"\n              data-testid=\"button-logout\"\n              title=\"Sair do sistema\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n            </a>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":6582},"client/src/pages/Clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { Client } from \"@shared/schema\";\nimport TopBar from \"@/components/TopBar\";\nimport ClientModal from \"@/components/ClientModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Clients() {\n  const [showClientModal, setShowClientModal] = useState(false);\n  const [editingClientId, setEditingClientId] = useState<string | undefined>();\n  const [deletingClientId, setDeletingClientId] = useState<string | undefined>();\n  const [search, setSearch] = useState(\"\");\n\n  const { toast } = useToast();\n\n  const { data: clients, isLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const deleteClientMutation = useMutation({\n    mutationFn: async (clientId: string) => {\n      await apiRequest(\"DELETE\", `/api/clients/${clientId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Cliente excluído com sucesso!\",\n      });\n      setDeletingClientId(undefined);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir cliente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditClient = (clientId: string) => {\n    setEditingClientId(clientId);\n    setShowClientModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowClientModal(false);\n    setEditingClientId(undefined);\n  };\n\n  const handleDeleteClient = (clientId: string) => {\n    deleteClientMutation.mutate(clientId);\n  };\n\n  const filteredClients = clients?.filter((client) =>\n    client.name.toLowerCase().includes(search.toLowerCase()) ||\n    client.contactPerson?.toLowerCase().includes(search.toLowerCase())\n  ) || [];\n\n  return (\n    <>\n      <TopBar\n        title=\"Clientes\"\n        showCreateButton\n        onCreateClick={() => setShowClientModal(true)}\n        createButtonText=\"Novo Cliente\"\n      />\n\n      <div className=\"space-y-6\">\n        {/* Search and Filters */}\n        <div className=\"bg-card p-6 rounded-lg border border-border\">\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Input\n                placeholder=\"Buscar clientes...\"\n                className=\"pl-10\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                data-testid=\"input-search-clients\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Exportar\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Clients Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-64 w-full\" />\n            ))}\n          </div>\n        ) : (\n          <>\n            {filteredClients.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredClients.map((client) => (\n                  <Card key={client.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-client-${client.id}`}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                            <i className=\"fas fa-user-tie text-primary\"></i>\n                          </div>\n                          <div>\n                            <CardTitle className=\"text-lg\" data-testid={`text-client-name-${client.id}`}>\n                              {client.name}\n                            </CardTitle>\n                            {client.city && (\n                              <p className=\"text-xs text-muted-foreground\">\n                                {client.city} - {client.state}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditClient(client.id)}\n                            data-testid={`button-edit-client-${client.id}`}\n                          >\n                            <i className=\"fas fa-edit text-primary\"></i>\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setDeletingClientId(client.id)}\n                            data-testid={`button-delete-client-${client.id}`}\n                          >\n                            <i className=\"fas fa-trash text-destructive\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {client.contactPerson && (\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-user w-4 text-muted-foreground mr-2\"></i>\n                            <span data-testid={`text-contact-${client.id}`}>{client.contactPerson}</span>\n                          </div>\n                        )}\n                        {client.phone && (\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-phone w-4 text-muted-foreground mr-2\"></i>\n                            <span data-testid={`text-phone-${client.id}`}>{client.phone}</span>\n                          </div>\n                        )}\n                        {client.email && (\n                          <div className=\"flex items-center text-sm\">\n                            <i className=\"fas fa-envelope w-4 text-muted-foreground mr-2\"></i>\n                            <span data-testid={`text-email-${client.id}`}>{client.email}</span>\n                          </div>\n                        )}\n                        {client.address && (\n                          <div className=\"flex items-start text-sm\">\n                            <i className=\"fas fa-map-marker-alt w-4 text-muted-foreground mr-2 mt-0.5\"></i>\n                            <span className=\"line-clamp-2\" data-testid={`text-address-${client.id}`}>{client.address}</span>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <i className=\"fas fa-user-tie text-6xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-xl font-semibold mb-2\">Nenhum cliente encontrado</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {search ? \"Tente ajustar sua busca\" : \"Comece cadastrando seu primeiro cliente\"}\n                  </p>\n                  {!search && (\n                    <Button onClick={() => setShowClientModal(true)} data-testid=\"button-create-first-client\">\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Novo Cliente\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Client Modal */}\n      {showClientModal && (\n        <ClientModal\n          clientId={editingClientId}\n          onClose={handleCloseModal}\n        />\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingClientId} onOpenChange={() => setDeletingClientId(undefined)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir este cliente? Esta ação não pode ser desfeita.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancelar</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingClientId && handleDeleteClient(deletingClientId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Excluir\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":9785},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Jobs from \"@/pages/Jobs\";\nimport Companies from \"@/pages/Companies\";\nimport Clients from \"@/pages/Clients\";\nimport Users from \"@/pages/Users\";\nimport Performance from \"@/pages/Performance\";\nimport Reports from \"@/pages/Reports\";\nimport Permissions from \"@/pages/Permissions\";\nimport Kanban from \"@/pages/Kanban\";\nimport JobClosureReport from \"@/pages/JobClosureReport\";\nimport Settings from \"@/pages/Settings\";\nimport LoginDemo from \"@/pages/LoginDemo\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login-demo\" component={LoginDemo} />\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={() => <Layout><Dashboard /></Layout>} />\n          <Route path=\"/dashboard\" component={() => <Layout><Dashboard /></Layout>} />\n          <Route path=\"/jobs\" component={() => <Layout><Jobs /></Layout>} />\n          <Route path=\"/kanban\" component={() => <Layout><Kanban /></Layout>} />\n          <Route path=\"/companies\" component={() => <Layout><Companies /></Layout>} />\n          <Route path=\"/clients\" component={() => <Layout><Clients /></Layout>} />\n          <Route path=\"/users\" component={() => <Layout><Users /></Layout>} />\n          <Route path=\"/permissions\" component={() => <Layout><Permissions /></Layout>} />\n          <Route path=\"/performance\" component={() => <Layout><Performance /></Layout>} />\n          <Route path=\"/reports\" component={() => <Layout><Reports /></Layout>} />\n          <Route path=\"/reports/job-closure\" component={() => <Layout><JobClosureReport /></Layout>} />\n          <Route path=\"/settings\" component={() => <Layout><Settings /></Layout>} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2520},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { DashboardMetrics, JobsByStatusResponse, ApplicationsByMonthResponse, JobsListResponse } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport Layout from \"@/components/Layout\";\nimport MetricsCard from \"@/components/MetricsCard\";\nimport JobModal from \"@/components/JobModal\";\nimport TopBar from \"@/components/TopBar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { \n  Briefcase, \n  CheckCircle, \n  UserPlus,\n  Users, \n  Building2, \n  Search,\n  Eye,\n  Calendar\n} from \"lucide-react\";\n\nconst COLORS = ['hsl(var(--primary))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))'];\n\nconst statusLabels: Record<string, string> = {\n  active: \"Ativa\",\n  draft: \"Rascunho\", \n  paused: \"Pausada\",\n  closed: \"Fechada\",\n  expired: \"Expirada\",\n  aberto: \"Aberto\",\n  em_recrutamento: \"Em Recrutamento\",\n  em_documentacao: \"Em Documentação\"\n};\n\nexport default function Dashboard() {\n  const [showJobModal, setShowJobModal] = useState(false);\n  const [search, setSearch] = useState(\"\");\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: jobsByStatus, isLoading: jobsByStatusLoading } = useQuery<JobsByStatusResponse>({\n    queryKey: [\"/api/dashboard/jobs-by-status\"],\n  });\n\n  const { data: applicationsByMonth, isLoading: applicationsByMonthLoading } = useQuery<ApplicationsByMonthResponse>({\n    queryKey: [\"/api/dashboard/applications-by-month\"],\n  });\n\n  const { data: jobs, isLoading: jobsLoading } = useQuery<JobsListResponse>({\n    queryKey: [\"/api/jobs\", { limit: 10, offset: 0, search }],\n  });\n\n  const statusVariants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n    active: \"default\",\n    draft: \"secondary\",\n    paused: \"outline\",\n    closed: \"destructive\",\n    expired: \"destructive\",\n    aberto: \"default\",\n    em_recrutamento: \"outline\",\n    em_documentacao: \"secondary\"\n  };\n\n  const formatSalary = (min?: string, max?: string) => {\n    if (!min && !max) return \"Não informado\";\n    if (!min) return `Até R$ ${parseFloat(max!).toLocaleString()}`;\n    if (!max) return `A partir de R$ ${parseFloat(min).toLocaleString()}`;\n    return `R$ ${parseFloat(min).toLocaleString()} - ${parseFloat(max).toLocaleString()}`;\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"pt-BR\");\n  };\n\n  return (\n    <>\n      <TopBar\n        title=\"Dashboard\"\n        showCreateButton\n        onCreateClick={() => setShowJobModal(true)}\n        createButtonText=\"Nova Vaga\"\n      />\n\n      <div className=\"space-y-8\">\n        {/* Metrics Cards */}\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n          {metricsLoading ? (\n            Array.from({ length: 4 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-32 w-full\" />\n            ))\n          ) : (\n            <>\n              <MetricsCard\n                title=\"Vagas Totais\"\n                value={metrics?.totalJobs || 0}\n                icon={Briefcase}\n                iconBgColor=\"bg-primary/10\"\n                iconColor=\"text-primary\"\n                description=\"Todas as vagas cadastradas\"\n                trend={{ value: \"+12%\", isPositive: true }}\n              />\n              <MetricsCard\n                title=\"Vagas Ativas\"\n                value={metrics?.activeJobs || 0}\n                icon={CheckCircle}\n                iconBgColor=\"bg-success/10\"\n                iconColor=\"text-success\"\n                description=\"Vagas abertas para candidatura\"\n                trend={{ value: \"+8%\", isPositive: true }}\n              />\n              <MetricsCard\n                title=\"Candidaturas\"\n                value={metrics?.totalApplications || 0}\n                icon={UserPlus}\n                iconBgColor=\"bg-warning/10\"\n                iconColor=\"text-warning\"\n                description=\"Total de candidaturas recebidas\"\n                trend={{ value: \"+23%\", isPositive: true }}\n              />\n              <MetricsCard\n                title=\"Empresas\"\n                value={metrics?.totalCompanies || 0}\n                icon={Building2}\n                iconBgColor=\"bg-info/10\"\n                iconColor=\"text-info\"\n                description=\"Empresas parceiras cadastradas\"\n                trend={{ value: \"+3%\", isPositive: true }}\n              />\n            </>\n          )}\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"shadow-sm hover:shadow-lg transition-shadow duration-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                Vagas por Status\n              </CardTitle>\n              <CardDescription>Distribuição das vagas por situação atual</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {jobsByStatusLoading ? (\n                <Skeleton className=\"h-64 w-full\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={280}>\n                  <PieChart>\n                    <Pie\n                      data={jobsByStatus?.map((item) => ({\n                        name: statusLabels[item.status] || item.status,\n                        value: item.count\n                      })) || []}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={90}\n                      fill=\"hsl(var(--primary))\"\n                      dataKey=\"value\"\n                      strokeWidth={2}\n                      stroke=\"hsl(var(--background))\"\n                    >\n                      {jobsByStatus?.map((entry, index: number) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      )) || []}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--popover))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '8px',\n                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm hover:shadow-lg transition-shadow duration-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-chart-2 rounded-full\"></div>\n                Candidaturas por Mês\n              </CardTitle>\n              <CardDescription>Evolução mensal das candidaturas recebidas</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {applicationsByMonthLoading ? (\n                <Skeleton className=\"h-64 w-full\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={280}>\n                  <LineChart\n                    data={applicationsByMonth?.map((item) => ({\n                      month: item.month,\n                      count: item.count\n                    })) || []}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n                    <XAxis \n                      dataKey=\"month\" \n                      stroke=\"hsl(var(--muted-foreground))\"\n                      fontSize={12}\n                      tickLine={false}\n                      axisLine={false}\n                    />\n                    <YAxis \n                      stroke=\"hsl(var(--muted-foreground))\"\n                      fontSize={12}\n                      tickLine={false}\n                      axisLine={false}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--popover))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '8px',\n                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"count\" \n                      stroke=\"hsl(var(--chart-2))\" \n                      strokeWidth={3}\n                      dot={{ fill: 'hsl(var(--chart-2))', strokeWidth: 2, r: 5 }}\n                      activeDot={{ r: 7, stroke: 'hsl(var(--chart-2))', strokeWidth: 2, fill: 'hsl(var(--background))' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Jobs Table */}\n        <Card className=\"shadow-sm hover:shadow-lg transition-shadow duration-200\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-chart-3 rounded-full\"></div>\n                  Vagas Recentes\n                </CardTitle>\n                <CardDescription>Últimas vagas cadastradas no sistema</CardDescription>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative\">\n                  <Input\n                    placeholder=\"Buscar vagas...\"\n                    className=\"pl-10 w-64\"\n                    value={search}\n                    onChange={(e) => setSearch(e.target.value)}\n                    data-testid=\"input-search-jobs\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n\n            {jobsLoading ? (\n              <div className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 3 }).map((_, i) => (\n                    <Skeleton key={i} className=\"h-12 w-full\" />\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Título</TableHead>\n                    <TableHead>Empresa</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Candidatos</TableHead>\n                    <TableHead>Salário</TableHead>\n                    <TableHead>Criado em</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {Array.isArray(jobs) && jobs.length > 0 ? (\n                    jobs.map((job: any) => (\n                      <TableRow key={job.id} data-testid={`row-job-${job.id}`}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium text-foreground\" data-testid={`text-job-title-${job.id}`}>\n                              {job.title}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {job.department || \"N/A\"}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-foreground\">\n                            {job.company?.name || \"N/A\"}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={statusVariants[job.status] || \"secondary\"}>\n                            {statusLabels[job.status] || job.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center\">\n                            <span className=\"mr-2\" data-testid={`text-applications-count-${job.id}`}>\n                              {job.applicationsCount || 0}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-foreground\">\n                            {formatSalary(job.salaryMin, job.salaryMax)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {formatDate(job.createdAt)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-job-${job.id}`}>\n                              <Eye className=\"h-4 w-4 text-primary\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Users className=\"h-4 w-4 text-success\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  ) : (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8\">\n                        <div className=\"text-muted-foreground text-center\">\n                          <Briefcase className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground\" />\n                          <p>Nenhuma vaga encontrada</p>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <JobModal\n        isOpen={showJobModal}\n        onClose={() => setShowJobModal(false)}\n      />\n    </>\n  );\n}\n","size_bytes":15352},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/MetricsCard.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { LucideIcon, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface MetricsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconBgColor?: string;\n  iconColor?: string;\n  trend?: {\n    value: string;\n    isPositive: boolean;\n  };\n  subtitle?: string;\n  description?: string;\n}\n\nexport default function MetricsCard({\n  title,\n  value,\n  icon: Icon,\n  iconBgColor = \"bg-primary/10\",\n  iconColor = \"text-primary\",\n  trend,\n  subtitle = \"vs. mês anterior\",\n  description,\n}: MetricsCardProps) {\n  return (\n    <div className=\"group bg-card p-6 rounded-xl border border-border shadow-sm hover:shadow-lg transition-all duration-200 hover:border-primary/20\" data-testid={`card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className={cn(\n            \"w-12 h-12 rounded-xl flex items-center justify-center transition-colors group-hover:scale-110 duration-200\",\n            iconBgColor\n          )}>\n            <Icon className={cn(\"h-6 w-6\", iconColor)} />\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n            <p className=\"text-3xl font-bold text-foreground mt-1\" data-testid={`text-${title.toLowerCase().replace(/\\s+/g, '-')}-value`}>\n              {typeof value === 'number' ? value.toLocaleString('pt-BR') : value}\n            </p>\n            {description && (\n              <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {trend && (\n        <div className=\"mt-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={cn(\n              \"flex items-center px-2 py-1 rounded-full text-xs font-medium\",\n              trend.isPositive \n                ? \"bg-success/10 text-success\" \n                : \"bg-destructive/10 text-destructive\"\n            )}\n            data-testid={`text-${title.toLowerCase().replace(/\\s+/g, '-')}-trend`}\n            >\n              {trend.isPositive ? (\n                <TrendingUp className=\"h-3 w-3 mr-1\" />\n              ) : (\n                <TrendingDown className=\"h-3 w-3 mr-1\" />\n              )}\n              {trend.value}\n            </div>\n          </div>\n          <span className=\"text-xs text-muted-foreground\">{subtitle}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2546},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/CompanyModal.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCompanySchema, type InsertCompany, type CompanyWithCostCenters } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { INDUSTRY_TYPES } from \"@shared/constants\";\n\ninterface CompanyModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  companyId?: string;\n}\n\nexport default function CompanyModal({ isOpen, onClose, companyId }: CompanyModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!companyId;\n\n  const { data: companyData } = useQuery<CompanyWithCostCenters>({\n    queryKey: [\"/api/companies\", companyId],\n    enabled: isEditing,\n  });\n\n  const companyFormSchema = z.object({\n    name: z.string().min(1, \"Nome é obrigatório\"),\n    cnpj: z.string().optional().default(\"\"),\n    contactPerson: z.string().optional().default(\"\"),\n    phone: z.string().optional().default(\"\"),\n    email: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n    industryType: z.string().optional().default(\"\"),\n    description: z.string().optional().default(\"\"),\n    website: z.string().optional().default(\"\"),\n  });\n\n  const form = useForm<z.infer<typeof companyFormSchema>>({\n    resolver: zodResolver(companyFormSchema),\n    defaultValues: {\n      name: \"\",\n      cnpj: \"\",\n      contactPerson: \"\",\n      phone: \"\",\n      email: \"\",\n      industryType: \"\",\n      description: \"\",\n      website: \"\",\n    },\n  });\n\n  // Update form when company data is loaded\n  React.useEffect(() => {\n    if (isEditing && companyData && !form.formState.isDirty) {\n      form.reset({\n        name: companyData?.name || \"\",\n        cnpj: companyData?.cnpj || \"\",\n        contactPerson: companyData?.contactPerson || \"\",\n        phone: companyData?.phone || \"\",\n        email: companyData?.email || \"\",\n        industryType: companyData?.industryType || \"\",\n        description: companyData?.description || \"\",\n        website: companyData?.website || \"\",\n      });\n    }\n  }, [isEditing, companyData, form]);\n\n  const createCompanyMutation = useMutation({\n    mutationFn: async (data: InsertCompany) => {\n      const response = await apiRequest(\"POST\", \"/api/companies\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Empresa criada com sucesso!\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar empresa. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCompanyMutation = useMutation({\n    mutationFn: async (data: Partial<InsertCompany>) => {\n      const response = await apiRequest(\"PUT\", `/api/companies/${companyId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Empresa atualizada com sucesso!\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar empresa. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertCompany) => {\n    if (isEditing) {\n      updateCompanyMutation.mutate(data);\n    } else {\n      createCompanyMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Editar Empresa\" : \"Nova Empresa\"}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nome da Empresa</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Ex: TechCorp Ltda\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"cnpj\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>CNPJ</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"00.000.000/0000-00\" {...field} data-testid=\"input-cnpj\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"contactPerson\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Pessoa de Contato</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Nome do responsável\" {...field} data-testid=\"input-contact-person\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Telefone</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"(11) 99999-9999\" {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"contato@empresa.com.br\" {...field} data-testid=\"input-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"industryType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tipo de Indústria</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value} data-testid=\"select-industry-type\">\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecione o setor de atuação\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {INDUSTRY_TYPES.map((industry) => (\n                        <SelectItem key={industry.value} value={industry.value}>\n                          {industry.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"website\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Website</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"https://www.empresa.com.br\" {...field} data-testid=\"input-website\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrição</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Descrição da empresa, ramo de atividade, missão...\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center justify-end space-x-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel\">\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createCompanyMutation.isPending || updateCompanyMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                {(createCompanyMutation.isPending || updateCompanyMutation.isPending) && (\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                )}\n                {isEditing ? \"Atualizar Empresa\" : \"Criar Empresa\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10103},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"shared/constants.ts":{"content":"// Job status configuration\nexport const JOB_STATUS_CONFIG = {\n  active: {\n    label: \"Ativa\",\n    variant: \"default\" as const,\n    description: \"Vaga publicada e recebendo candidaturas\"\n  },\n  aberto: {\n    label: \"Aberto\",\n    variant: \"default\" as const,\n    description: \"Processo seletivo aberto para candidaturas\"\n  },\n  em_recrutamento: {\n    label: \"Em Recrutamento\",\n    variant: \"outline\" as const,\n    description: \"Processo seletivo em andamento\"\n  },\n  em_documentacao: {\n    label: \"Em Documentação\",\n    variant: \"secondary\" as const,\n    description: \"Candidato selecionado, documentação em andamento\"\n  },\n  aprovada: {\n    label: \"Aprovada\",\n    variant: \"default\" as const,\n    description: \"Vaga aprovada para recrutamento\"\n  },\n  dp: {\n    label: \"DP\",\n    variant: \"secondary\" as const,\n    description: \"Vaga em processamento no departamento pessoal\"\n  },\n  em_mobilizacao: {\n    label: \"Em Mobilização\",\n    variant: \"outline\" as const,\n    description: \"Candidato em processo de mobilização\"\n  },\n  cancelada: {\n    label: \"Cancelada\",\n    variant: \"destructive\" as const,\n    description: \"Vaga cancelada\"\n  },\n  closed: {\n    label: \"Fechada\",\n    variant: \"destructive\" as const,\n    description: \"Vaga encerrada com sucesso\"\n  },\n  expired: {\n    label: \"Expirada\",\n    variant: \"destructive\" as const,\n    description: \"Vaga expirada sem conclusão\"\n  }\n} as const;\n\nexport type JobStatus = keyof typeof JOB_STATUS_CONFIG;\n\nexport const JOB_STATUSES = Object.keys(JOB_STATUS_CONFIG) as JobStatus[];\n\nexport const getStatusLabel = (status: string): string => {\n  return JOB_STATUS_CONFIG[status as JobStatus]?.label || status;\n};\n\nexport const getStatusVariant = (status: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n  return JOB_STATUS_CONFIG[status as JobStatus]?.variant || \"secondary\";\n};\n\nexport const getStatusDescription = (status: string): string => {\n  return JOB_STATUS_CONFIG[status as JobStatus]?.description || \"\";\n};\n\n// Industry Types Configuration\nexport const INDUSTRY_TYPES = [\n  { value: \"technology\", label: \"Tecnologia\" },\n  { value: \"finance\", label: \"Financeiro\" },\n  { value: \"healthcare\", label: \"Saúde\" },\n  { value: \"education\", label: \"Educação\" },\n  { value: \"retail\", label: \"Varejo\" },\n  { value: \"manufacturing\", label: \"Manufatura\" },\n  { value: \"construction\", label: \"Construção\" },\n  { value: \"automotive\", label: \"Automotivo\" },\n  { value: \"energy\", label: \"Energia\" },\n  { value: \"telecommunications\", label: \"Telecomunicações\" },\n  { value: \"consulting\", label: \"Consultoria\" },\n  { value: \"media\", label: \"Mídia\" },\n  { value: \"transportation\", label: \"Transporte\" },\n  { value: \"hospitality\", label: \"Hotelaria\" },\n  { value: \"agriculture\", label: \"Agricultura\" },\n  { value: \"legal\", label: \"Jurídico\" },\n  { value: \"real_estate\", label: \"Imobiliário\" },\n  { value: \"insurance\", label: \"Seguros\" },\n  { value: \"non_profit\", label: \"Sem Fins Lucrativos\" },\n  { value: \"government\", label: \"Governo\" },\n  { value: \"other\", label: \"Outros\" }\n] as const;\n\nexport type IndustryType = typeof INDUSTRY_TYPES[number][\"value\"];\n\nexport const getIndustryLabel = (industryType: string): string => {\n  const industry = INDUSTRY_TYPES.find(i => i.value === industryType);\n  return industry?.label || industryType;\n};\n\n// Brazilian Cities by State\nexport const BRAZILIAN_CITIES = {\n  AC: [\"Rio Branco\", \"Cruzeiro do Sul\", \"Sena Madureira\", \"Tarauacá\", \"Feijó\"],\n  AL: [\"Maceió\", \"Arapiraca\", \"Palmeira dos Índios\", \"Rio Largo\", \"União dos Palmares\"],\n  AP: [\"Macapá\", \"Santana\", \"Laranjal do Jari\", \"Oiapoque\", \"Porto Grande\"],\n  AM: [\"Manaus\", \"Parintins\", \"Itacoatiara\", \"Manacapuru\", \"Coari\"],\n  BA: [\"Salvador\", \"Feira de Santana\", \"Vitória da Conquista\", \"Camaçari\", \"Itabuna\", \"Juazeiro\", \"Lauro de Freitas\", \"Ilhéus\", \"Jequié\", \"Teixeira de Freitas\"],\n  CE: [\"Fortaleza\", \"Caucaia\", \"Juazeiro do Norte\", \"Maracanaú\", \"Sobral\", \"Crato\", \"Itapipoca\", \"Maranguape\", \"Iguatu\", \"Quixadá\"],\n  DF: [\"Brasília\"],\n  ES: [\"Vitória\", \"Vila Velha\", \"Serra\", \"Cariacica\", \"Viana\", \"Cachoeiro de Itapemirim\", \"Linhares\", \"São Mateus\", \"Colatina\", \"Guarapari\"],\n  GO: [\"Goiânia\", \"Aparecida de Goiânia\", \"Anápolis\", \"Rio Verde\", \"Luziânia\", \"Águas Lindas de Goiás\", \"Valparaíso de Goiás\", \"Trindade\", \"Formosa\", \"Novo Gama\"],\n  MA: [\"São Luís\", \"Imperatriz\", \"São José de Ribamar\", \"Timon\", \"Caxias\", \"Codó\", \"Paço do Lumiar\", \"Açailândia\", \"Bacabal\", \"Balsas\"],\n  MT: [\"Cuiabá\", \"Várzea Grande\", \"Rondonópolis\", \"Sinop\", \"Tangará da Serra\", \"Cáceres\", \"Sorriso\", \"Lucas do Rio Verde\", \"Barra do Garças\", \"Primavera do Leste\"],\n  MS: [\"Campo Grande\", \"Dourados\", \"Três Lagoas\", \"Corumbá\", \"Ponta Porã\", \"Aquidauana\", \"Nova Andradina\", \"Sidrolândia\", \"Maracaju\", \"Naviraí\"],\n  MG: [\"Belo Horizonte\", \"Uberlândia\", \"Contagem\", \"Juiz de Fora\", \"Betim\", \"Montes Claros\", \"Ribeirão das Neves\", \"Uberaba\", \"Governador Valadares\", \"Ipatinga\", \"Sete Lagoas\", \"Divinópolis\", \"Santa Luzia\", \"Ibirité\", \"Poços de Caldas\"],\n  PA: [\"Belém\", \"Ananindeua\", \"Santarém\", \"Marabá\", \"Castanhal\", \"Parauapebas\", \"Itaituba\", \"Cametá\", \"Bragança\", \"Abaetetuba\"],\n  PB: [\"João Pessoa\", \"Campina Grande\", \"Santa Rita\", \"Patos\", \"Bayeux\", \"Sousa\", \"Cajazeiras\", \"Guarabira\", \"Cabedelo\", \"Mamanguape\"],\n  PR: [\"Curitiba\", \"Londrina\", \"Maringá\", \"Ponta Grossa\", \"Cascavel\", \"São José dos Pinhais\", \"Foz do Iguaçu\", \"Colombo\", \"Guarapuava\", \"Paranaguá\", \"Araucária\", \"Toledo\", \"Apucarana\", \"Pinhais\", \"Campo Largo\"],\n  PE: [\"Recife\", \"Jaboatão dos Guararapes\", \"Olinda\", \"Paulista\", \"Caruaru\", \"Petrolina\", \"Cabo de Santo Agostinho\", \"Camaragibe\", \"Garanhuns\", \"Vitória de Santo Antão\"],\n  PI: [\"Teresina\", \"Parnaíba\", \"Picos\", \"Piripiri\", \"Floriano\", \"Campo Maior\", \"Barras\", \"Altos\", \"Esperantina\", \"São Raimundo Nonato\"],\n  RJ: [\"Rio de Janeiro\", \"São Gonçalo\", \"Duque de Caxias\", \"Nova Iguaçu\", \"Niterói\", \"Belford Roxo\", \"São João de Meriti\", \"Campos dos Goytacazes\", \"Petrópolis\", \"Volta Redonda\", \"Magé\", \"Itaboraí\", \"Macaé\", \"Cabo Frio\", \"Nova Friburgo\"],\n  RN: [\"Natal\", \"Mossoró\", \"Parnamirim\", \"São Gonçalo do Amarante\", \"Macaíba\", \"Ceará-Mirim\", \"Caicó\", \"Assu\", \"Currais Novos\", \"Pau dos Ferros\"],\n  RS: [\"Porto Alegre\", \"Caxias do Sul\", \"Pelotas\", \"Canoas\", \"Santa Maria\", \"Gravataí\", \"Viamão\", \"Novo Hamburgo\", \"São Leopoldo\", \"Rio Grande\", \"Alvorada\", \"Passo Fundo\", \"Sapucaia do Sul\", \"Uruguaiana\", \"Santa Cruz do Sul\"],\n  RO: [\"Porto Velho\", \"Ji-Paraná\", \"Ariquemes\", \"Vilhena\", \"Cacoal\", \"Jaru\", \"Rolim de Moura\", \"Guajará-Mirim\", \"Pimenta Bueno\", \"Espigão d'Oeste\"],\n  RR: [\"Boa Vista\", \"Rorainópolis\", \"Caracaraí\", \"Alto Alegre\", \"Mucajaí\"],\n  SC: [\"Florianópolis\", \"Joinville\", \"Blumenau\", \"São José\", \"Criciúma\", \"Chapecó\", \"Itajaí\", \"Jaraguá do Sul\", \"Lages\", \"Palhoça\", \"Balneário Camboriú\", \"Brusque\", \"Tubarão\", \"São Bento do Sul\", \"Caçador\"],\n  SP: [\"São Paulo\", \"Guarulhos\", \"Campinas\", \"São Bernardo do Campo\", \"Santo André\", \"Osasco\", \"São José dos Campos\", \"Ribeirão Preto\", \"Sorocaba\", \"Mauá\", \"São José do Rio Preto\", \"Santos\", \"Diadema\", \"Carapicuíba\", \"Piracicaba\", \"Bauru\", \"Itaquaquecetuba\", \"São Vicente\", \"Franca\", \"Guarujá\", \"Taubaté\", \"Limeira\", \"Suzano\", \"Taboão da Serra\", \"Sumaré\", \"Barueri\", \"Embu das Artes\", \"Jundiaí\", \"Praia Grande\"],\n  SE: [\"Aracaju\", \"Nossa Senhora do Socorro\", \"Lagarto\", \"Itabaiana\", \"Estância\", \"São Cristóvão\", \"Simão Dias\", \"Propriá\", \"Tobias Barreto\", \"Laranjeiras\"],\n  TO: [\"Palmas\", \"Araguaína\", \"Gurupi\", \"Porto Nacional\", \"Paraíso do Tocantins\", \"Colinas do Tocantins\", \"Guaraí\", \"Miracema do Tocantins\", \"Tocantinópolis\", \"Araguatins\"]\n} as const;\n\nexport const BRAZILIAN_STATES = [\n  { value: \"AC\", label: \"Acre\" },\n  { value: \"AL\", label: \"Alagoas\" },\n  { value: \"AP\", label: \"Amapá\" },\n  { value: \"AM\", label: \"Amazonas\" },\n  { value: \"BA\", label: \"Bahia\" },\n  { value: \"CE\", label: \"Ceará\" },\n  { value: \"DF\", label: \"Distrito Federal\" },\n  { value: \"ES\", label: \"Espírito Santo\" },\n  { value: \"GO\", label: \"Goiás\" },\n  { value: \"MA\", label: \"Maranhão\" },\n  { value: \"MT\", label: \"Mato Grosso\" },\n  { value: \"MS\", label: \"Mato Grosso do Sul\" },\n  { value: \"MG\", label: \"Minas Gerais\" },\n  { value: \"PA\", label: \"Pará\" },\n  { value: \"PB\", label: \"Paraíba\" },\n  { value: \"PR\", label: \"Paraná\" },\n  { value: \"PE\", label: \"Pernambuco\" },\n  { value: \"PI\", label: \"Piauí\" },\n  { value: \"RJ\", label: \"Rio de Janeiro\" },\n  { value: \"RN\", label: \"Rio Grande do Norte\" },\n  { value: \"RS\", label: \"Rio Grande do Sul\" },\n  { value: \"RO\", label: \"Rondônia\" },\n  { value: \"RR\", label: \"Roraima\" },\n  { value: \"SC\", label: \"Santa Catarina\" },\n  { value: \"SP\", label: \"São Paulo\" },\n  { value: \"SE\", label: \"Sergipe\" },\n  { value: \"TO\", label: \"Tocantins\" }\n] as const;\n\n// Get all cities as flat array\nexport const getAllCities = (): string[] => {\n  return Object.values(BRAZILIAN_CITIES).flat().sort();\n};","size_bytes":8973},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"client/src/pages/Reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { DashboardMetrics, JobsByStatusResponse, ApplicationsByMonthResponse, JobsListResponse, CompaniesListResponse } from \"@shared/schema\";\nimport TopBar from \"@/components/TopBar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\n\nconst COLORS = ['hsl(var(--primary))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))'];\n\nconst statusLabels: Record<string, string> = {\n  active: \"Ativa\",\n  draft: \"Rascunho\",\n  paused: \"Pausada\",\n  closed: \"Fechada\", \n  expired: \"Expirada\"\n};\n\nexport default function Reports() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"30\");\n  const [selectedCompany, setSelectedCompany] = useState(\"all\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: jobsByStatus, isLoading: jobsByStatusLoading } = useQuery<JobsByStatusResponse>({\n    queryKey: [\"/api/dashboard/jobs-by-status\"],\n  });\n\n  const { data: applicationsByMonth, isLoading: applicationsByMonthLoading } = useQuery<ApplicationsByMonthResponse>({\n    queryKey: [\"/api/dashboard/applications-by-month\"],\n  });\n\n  const { data: jobs, isLoading: jobsLoading } = useQuery<JobsListResponse>({\n    queryKey: [\"/api/jobs\", { limit: 100, offset: 0 }],\n  });\n\n  const { data: companies, isLoading: companiesLoading } = useQuery<CompaniesListResponse>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const exportReport = (type: string) => {\n    // TODO: Implement report export functionality\n    console.log(`Exporting ${type} report`);\n  };\n\n  const generatePDF = () => {\n    window.print();\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"pt-BR\");\n  };\n\n  const formatSalary = (min?: string, max?: string) => {\n    if (!min && !max) return \"Não informado\";\n    if (!min) return `Até R$ ${parseFloat(max!).toLocaleString()}`;\n    if (!max) return `A partir de R$ ${parseFloat(min).toLocaleString()}`;\n    return `R$ ${parseFloat(min).toLocaleString()} - ${parseFloat(max).toLocaleString()}`;\n  };\n\n  return (\n    <>\n      <TopBar title=\"Relatórios\" />\n      \n      <div className=\"space-y-6\">\n        {/* Filters and Export Controls */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-filter mr-2 text-primary\"></i>\n              Filtros e Configurações\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col lg:flex-row gap-4 items-start lg:items-end justify-between\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 flex-1\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Período\n                  </label>\n                  <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n                    <SelectTrigger data-testid=\"select-period\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"7\">Últimos 7 dias</SelectItem>\n                      <SelectItem value=\"30\">Últimos 30 dias</SelectItem>\n                      <SelectItem value=\"90\">Últimos 90 dias</SelectItem>\n                      <SelectItem value=\"365\">Último ano</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Empresa\n                  </label>\n                  <Select value={selectedCompany} onValueChange={setSelectedCompany}>\n                    <SelectTrigger data-testid=\"select-company\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todas as empresas</SelectItem>\n                      {companies?.map((company: any) => (\n                        <SelectItem key={company.id} value={company.id}>\n                          {company.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Status\n                  </label>\n                  <Select defaultValue=\"all\">\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os status</SelectItem>\n                      <SelectItem value=\"active\">Ativas</SelectItem>\n                      <SelectItem value=\"closed\">Fechadas</SelectItem>\n                      <SelectItem value=\"draft\">Rascunho</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={generatePDF}\n                  data-testid=\"button-export-pdf\"\n                >\n                  <i className=\"fas fa-file-pdf mr-2\"></i>\n                  PDF\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => exportReport('excel')}\n                  data-testid=\"button-export-excel\"\n                >\n                  <i className=\"fas fa-file-excel mr-2\"></i>\n                  Excel\n                </Button>\n                <Button \n                  onClick={() => exportReport('csv')}\n                  data-testid=\"button-export-csv\"\n                >\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Exportar CSV\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Report Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n              Visão Geral\n            </TabsTrigger>\n            <TabsTrigger value=\"jobs\" data-testid=\"tab-jobs\">\n              Relatório de Vagas\n            </TabsTrigger>\n            <TabsTrigger value=\"performance\" data-testid=\"tab-performance\">\n              Desempenho\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">\n              Analytics\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Key Metrics Summary */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {metricsLoading ? (\n                Array.from({ length: 4 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-32 w-full\" />\n                ))\n              ) : (\n                <>\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {metrics?.totalJobs || 0}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">Vagas Totais</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"fas fa-briefcase text-primary text-lg\"></i>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {metrics?.activeJobs || 0}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">Vagas Ativas</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                          <i className=\"fas fa-check-circle text-green-600 text-lg\"></i>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {metrics?.totalApplications || 0}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">Candidaturas</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          <i className=\"fas fa-user-plus text-blue-600 text-lg\"></i>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {metrics?.totalCompanies || 0}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">Empresas</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                          <i className=\"fas fa-building text-orange-600 text-lg\"></i>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </>\n              )}\n            </div>\n\n            {/* Charts */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Distribuição por Status</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {jobsByStatusLoading ? (\n                    <Skeleton className=\"h-64 w-full\" />\n                  ) : (\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <PieChart>\n                        <Pie\n                          data={jobsByStatus?.map((item: any) => ({\n                            name: statusLabels[item.status] || item.status,\n                            value: item.count\n                          }))}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                          outerRadius={80}\n                          fill=\"hsl(var(--primary))\"\n                          dataKey=\"value\"\n                        >\n                          {jobsByStatus?.map((entry: any, index: number) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Candidaturas ao Longo do Tempo</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {applicationsByMonthLoading ? (\n                    <Skeleton className=\"h-64 w-full\" />\n                  ) : (\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <LineChart data={applicationsByMonth}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"month\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"count\" \n                          stroke=\"hsl(var(--primary))\" \n                          strokeWidth={2}\n                        />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"jobs\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Relatório Detalhado de Vagas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {jobsLoading ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 5 }).map((_, i) => (\n                      <Skeleton key={i} className=\"h-12 w-full\" />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Título</TableHead>\n                          <TableHead>Empresa</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Candidaturas</TableHead>\n                          <TableHead>Faixa Salarial</TableHead>\n                          <TableHead>Data de Criação</TableHead>\n                          <TableHead>Dias Ativa</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {jobs?.map((job: any) => {\n                          const createdDate = new Date(job.createdAt);\n                          const daysActive = Math.floor((Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24));\n                          \n                          return (\n                            <TableRow key={job.id} data-testid={`row-report-job-${job.id}`}>\n                              <TableCell className=\"font-medium\">{job.title}</TableCell>\n                              <TableCell>{job.company?.name || \"N/A\"}</TableCell>\n                              <TableCell>\n                                <Badge variant={job.status === 'active' ? 'default' : 'secondary'}>\n                                  {statusLabels[job.status] || job.status}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>{job.applicationsCount || 0}</TableCell>\n                              <TableCell className=\"text-sm\">\n                                {formatSalary(job.salaryMin, job.salaryMax)}\n                              </TableCell>\n                              <TableCell>{formatDate(job.createdAt)}</TableCell>\n                              <TableCell>{daysActive} dias</TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"performance\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Taxa de Sucesso</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-green-600 mb-2\">78.5%</div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Vagas preenchidas com sucesso\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Tempo Médio</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-blue-600 mb-2\">24 dias</div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Para preenchimento de vagas\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Custo Médio</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-primary mb-2\">R$ 1.850</div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Por contratação realizada\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Indicadores de Performance por Empresa</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {companiesLoading ? (\n                  <Skeleton className=\"h-64 w-full\" />\n                ) : (\n                  <div className=\"space-y-4\">\n                    {companies?.map((company: any) => (\n                      <div key={company.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                            <i className=\"fas fa-building text-primary\"></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{company.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {company.jobsCount || 0} vagas ativas\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-lg font-bold text-green-600\">85%</p>\n                          <p className=\"text-xs text-muted-foreground\">Taxa de sucesso</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Análise de Tendências</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Crescimento em vagas ativas</span>\n                      <span className=\"text-sm font-bold text-green-600\">+15.2%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Aumento em candidaturas</span>\n                      <span className=\"text-sm font-bold text-blue-600\">+23.1%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Redução no tempo de contratação</span>\n                      <span className=\"text-sm font-bold text-primary\">-8.5%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Melhoria na qualidade dos candidatos</span>\n                      <span className=\"text-sm font-bold text-purple-600\">+12.3%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Previsões</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                      <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\n                        Próximo Mês\n                      </h4>\n                      <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                        Previsão de 25% mais candidaturas baseado na tendência atual\n                      </p>\n                    </div>\n                    <div className=\"p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n                      <h4 className=\"font-medium text-green-900 dark:text-green-100 mb-2\">\n                        Trimestre\n                      </h4>\n                      <p className=\"text-sm text-green-700 dark:text-green-300\">\n                        Expectativa de redução de 15% no tempo médio de contratação\n                      </p>\n                    </div>\n                    <div className=\"p-4 bg-orange-50 dark:bg-orange-950 rounded-lg\">\n                      <h4 className=\"font-medium text-orange-900 dark:text-orange-100 mb-2\">\n                        Semestre\n                      </h4>\n                      <p className=\"text-sm text-orange-700 dark:text-orange-300\">\n                        Projeção de 40% de crescimento no número de vagas ativas\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </>\n  );\n}\n","size_bytes":23163},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/Performance.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { DashboardMetrics, JobsByStatusResponse, ApplicationsByMonthResponse } from \"@shared/schema\";\nimport Layout from \"@/components/Layout\";\nimport TopBar from \"@/components/TopBar\";\nimport MetricsCard from \"@/components/MetricsCard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\nimport { \n  TrendingUp, \n  Clock, \n  DollarSign, \n  Star, \n  Target, \n  Users, \n  BarChart3, \n  Lightbulb, \n  CheckCircle, \n  ArrowUp, \n  ArrowDown, \n  AlertTriangle\n} from \"lucide-react\";\n\nconst COLORS = ['hsl(var(--primary))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))'];\n\nexport default function Performance() {\n  const { data: metrics, isLoading: metricsLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: jobsByStatus, isLoading: jobsByStatusLoading } = useQuery<JobsByStatusResponse>({\n    queryKey: [\"/api/dashboard/jobs-by-status\"],\n  });\n\n  const { data: applicationsByMonth, isLoading: applicationsByMonthLoading } = useQuery<ApplicationsByMonthResponse>({\n    queryKey: [\"/api/dashboard/applications-by-month\"],\n  });\n\n  const calculateGrowthRate = (current: number, previous: number) => {\n    if (previous === 0) return 0;\n    return ((current - previous) / previous * 100).toFixed(1);\n  };\n\n  return (\n    <>\n      <TopBar title=\"Desempenho\" />\n      \n      <div className=\"space-y-6\">\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n          {metricsLoading ? (\n            Array.from({ length: 4 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-32 w-full\" />\n            ))\n          ) : (\n            <>\n              <MetricsCard\n                title=\"Taxa de Conversão\"\n                value=\"24.5%\"\n                icon={TrendingUp}\n                iconBgColor=\"bg-primary/10\"\n                iconColor=\"text-primary\"\n                description=\"Candidatos convertidos em contratações\"\n                trend={{ value: \"+2.1%\", isPositive: true }}\n                subtitle=\"vs. período anterior\"\n              />\n              <MetricsCard\n                title=\"Tempo Médio p/ Contratação\"\n                value=\"18 dias\"\n                icon={Clock}\n                iconBgColor=\"bg-warning/10\"\n                iconColor=\"text-warning\"\n                description=\"Do início ao término do processo\"\n                trend={{ value: \"-3 dias\", isPositive: true }}\n              />\n              <MetricsCard\n                title=\"Custo por Contratação\"\n                value=\"R$ 1.250\"\n                icon={DollarSign}\n                iconBgColor=\"bg-success/10\"\n                iconColor=\"text-success\"\n                description=\"Investimento total por contratação\"\n                trend={{ value: \"-5.2%\", isPositive: true }}\n              />\n              <MetricsCard\n                title=\"Satisfação do Candidato\"\n                value=\"4.2/5\"\n                icon={Star}\n                iconBgColor=\"bg-warning/10\"\n                iconColor=\"text-warning\"\n                description=\"Avaliação média dos candidatos\"\n                trend={{ value: \"+0.3\", isPositive: true }}\n              />\n            </>\n          )}\n        </div>\n\n        {/* Charts Row */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Applications Trend */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Tendência de Candidaturas</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {applicationsByMonthLoading ? (\n                <Skeleton className=\"h-64 w-full\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <LineChart data={applicationsByMonth}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"count\" \n                      stroke=\"hsl(var(--primary))\" \n                      strokeWidth={2}\n                      name=\"Candidaturas\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Job Status Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Distribuição de Status das Vagas</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {jobsByStatusLoading ? (\n                <Skeleton className=\"h-64 w-full\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <PieChart>\n                    <Pie\n                      data={jobsByStatus}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ status, percent }) => `${status} ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"hsl(var(--primary))\"\n                      dataKey=\"count\"\n                    >\n                      {jobsByStatus?.map((entry: any, index: number) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Performance Indicators */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Target className=\"h-5 w-5 mr-2 text-primary\" />\n                Eficiência do Recrutamento\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Vagas preenchidas</span>\n                <span className=\"text-lg font-bold text-green-600\">78%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: '78%' }}></div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Dentro do prazo</span>\n                <span className=\"text-lg font-bold text-blue-600\">82%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: '82%' }}></div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"h-5 w-5 mr-2 text-primary\" />\n                Qualidade dos Candidatos\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary mb-2\">8.4</div>\n                <p className=\"text-sm text-muted-foreground\">Score médio de qualificação</p>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Perfil ideal</span>\n                  <span className=\"text-sm font-medium\">34%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Qualificado</span>\n                  <span className=\"text-sm font-medium\">52%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Em desenvolvimento</span>\n                  <span className=\"text-sm font-medium\">14%</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2 text-primary\" />\n                Métricas de Engajamento\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Taxa de resposta</span>\n                  <span className=\"text-sm font-bold text-green-600\">+15%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Tempo de resposta</span>\n                  <span className=\"text-sm font-bold text-blue-600\">2.3h</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Abandono no processo</span>\n                  <span className=\"text-sm font-bold text-orange-600\">12%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Net Promoter Score</span>\n                  <span className=\"text-sm font-bold text-primary\">72</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Insights and Recommendations */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Lightbulb className=\"h-5 w-5 mr-2 text-yellow-500\" />\n              Insights e Recomendações\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-green-600 flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Pontos Fortes\n                </h4>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-start\">\n                    <ArrowUp className=\"h-4 w-4 text-green-500 mr-2 mt-1\" />\n                    Taxa de conversão 23% acima da média do setor\n                  </li>\n                  <li className=\"flex items-start\">\n                    <ArrowUp className=\"h-4 w-4 text-green-500 mr-2 mt-1\" />\n                    Tempo médio de contratação reduziu em 18% este mês\n                  </li>\n                  <li className=\"flex items-start\">\n                    <ArrowUp className=\"h-4 w-4 text-green-500 mr-2 mt-1\" />\n                    Alta satisfação dos candidatos (4.2/5)\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-orange-600 flex items-center\">\n                  <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                  Oportunidades de Melhoria\n                </h4>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-start\">\n                    <ArrowDown className=\"h-4 w-4 text-orange-500 mr-2 mt-1\" />\n                    Reduzir taxa de abandono no processo de candidatura\n                  </li>\n                  <li className=\"flex items-start\">\n                    <ArrowDown className=\"h-4 w-4 text-orange-500 mr-2 mt-1\" />\n                    Melhorar tempo de resposta para candidatos\n                  </li>\n                  <li className=\"flex items-start\">\n                    <ArrowDown className=\"h-4 w-4 text-orange-500 mr-2 mt-1\" />\n                    Aumentar diversidade nas contratações\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":12355},"client/src/components/JobStatusSelect.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Check, X } from \"lucide-react\";\n\ninterface JobStatusSelectProps {\n  jobId: string;\n  currentStatus: string;\n  onStatusChange?: (newStatus: string) => void;\n}\n\nconst statusLabels: Record<string, string> = {\n  active: \"Ativa\",\n  draft: \"Rascunho\",\n  paused: \"Pausada\", \n  closed: \"Fechada\",\n  expired: \"Expirada\",\n  aberto: \"Aberto\",\n  aprovada: \"Aprovada\",\n  em_recrutamento: \"Em Recrutamento\",\n  em_documentacao: \"Em Documentação\"\n};\n\nconst statusVariants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n  active: \"default\",\n  draft: \"secondary\",\n  paused: \"outline\",\n  closed: \"destructive\",\n  expired: \"destructive\",\n  aberto: \"default\",\n  aprovada: \"default\",\n  em_recrutamento: \"outline\",\n  em_documentacao: \"secondary\"\n};\n\nexport default function JobStatusSelect({ jobId, currentStatus, onStatusChange }: JobStatusSelectProps) {\n  const [selectedStatus, setSelectedStatus] = useState(currentStatus);\n  const [isEditing, setIsEditing] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async (newStatus: string) => {\n      await apiRequest(\"PATCH\", `/api/jobs/${jobId}/status`, { status: newStatus });\n    },\n    onSuccess: (_, newStatus) => {\n      toast({\n        title: \"Status atualizado\",\n        description: `Status da vaga alterado para ${statusLabels[newStatus]}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/jobs-by-status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      \n      setIsEditing(false);\n      onStatusChange?.(newStatus);\n    },\n    onError: (error) => {\n      console.error(\"Erro ao atualizar status:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao atualizar status da vaga\",\n        variant: \"destructive\",\n      });\n      setSelectedStatus(currentStatus); // Reset to original status\n    }\n  });\n\n  const handleSave = () => {\n    if (selectedStatus !== currentStatus) {\n      updateStatusMutation.mutate(selectedStatus);\n    } else {\n      setIsEditing(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setSelectedStatus(currentStatus);\n    setIsEditing(false);\n  };\n\n  if (!isEditing) {\n    return (\n      <div \n        onClick={() => setIsEditing(true)}\n        className=\"cursor-pointer hover:opacity-80 transition-opacity\"\n        data-testid={`status-badge-${jobId}`}\n      >\n        <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n          statusVariants[currentStatus] === \"default\" ? \"bg-primary text-primary-foreground border-primary\" :\n          statusVariants[currentStatus] === \"secondary\" ? \"bg-secondary text-secondary-foreground border-secondary\" :\n          statusVariants[currentStatus] === \"destructive\" ? \"bg-destructive text-destructive-foreground border-destructive\" :\n          \"bg-background text-foreground border-border\"\n        }`}>\n          {statusLabels[currentStatus] || currentStatus}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Select \n        value={selectedStatus} \n        onValueChange={setSelectedStatus}\n        data-testid={`status-select-${jobId}`}\n      >\n        <SelectTrigger className=\"w-36\">\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"draft\" data-testid=\"status-option-draft\">\n            {statusLabels.draft}\n          </SelectItem>\n          <SelectItem value=\"active\" data-testid=\"status-option-active\">\n            {statusLabels.active}\n          </SelectItem>\n          <SelectItem value=\"aberto\" data-testid=\"status-option-aberto\">\n            {statusLabels.aberto}\n          </SelectItem>\n          <SelectItem value=\"aprovada\" data-testid=\"status-option-aprovada\">\n            {statusLabels.aprovada}\n          </SelectItem>\n          <SelectItem value=\"em_recrutamento\" data-testid=\"status-option-em_recrutamento\">\n            {statusLabels.em_recrutamento}\n          </SelectItem>\n          <SelectItem value=\"em_documentacao\" data-testid=\"status-option-em_documentacao\">\n            {statusLabels.em_documentacao}\n          </SelectItem>\n          <SelectItem value=\"paused\" data-testid=\"status-option-paused\">\n            {statusLabels.paused}\n          </SelectItem>\n          <SelectItem value=\"closed\" data-testid=\"status-option-closed\">\n            {statusLabels.closed}\n          </SelectItem>\n          <SelectItem value=\"expired\" data-testid=\"status-option-expired\">\n            {statusLabels.expired}\n          </SelectItem>\n        </SelectContent>\n      </Select>\n      \n      <Button\n        size=\"sm\"\n        variant=\"ghost\"\n        onClick={handleSave}\n        disabled={updateStatusMutation.isPending}\n        data-testid={`button-save-status-${jobId}`}\n      >\n        <Check className=\"h-4 w-4 text-green-600\" />\n      </Button>\n      \n      <Button\n        size=\"sm\"\n        variant=\"ghost\"\n        onClick={handleCancel}\n        disabled={updateStatusMutation.isPending}\n        data-testid={`button-cancel-status-${jobId}`}\n      >\n        <X className=\"h-4 w-4 text-red-600\" />\n      </Button>\n    </div>\n  );\n}","size_bytes":5665},"client/src/pages/Jobs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport type { JobsListResponse } from \"@shared/schema\";\nimport Layout from \"@/components/Layout\";\nimport TopBar from \"@/components/TopBar\";\nimport JobModal from \"@/components/JobModal\";\nimport JobStatusSelect from \"@/components/JobStatusSelect\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { JOB_STATUS_CONFIG, getStatusLabel } from \"@shared/constants\";\nimport {\n  Search,\n  Filter,\n  Download,\n  MapPin,\n  Edit,\n  Users,\n  User,\n  Trash2,\n  Briefcase,\n  Plus,\n  LayoutDashboard,\n  ArrowUpDown,\n  ArrowUp,\n  ArrowDown\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst statusLabels: Record<string, string> = {\n  closed: \"Fechada\",\n  aberto: \"Aberto\",\n  em_recrutamento: \"Em Recrutamento\",\n  em_documentacao: \"Em Documentação\"\n};\n\n// Calculate SLA progress\nconst calculateSLA = (createdAt: string, slaDeadline: string) => {\n  const created = new Date(createdAt);\n  const deadline = new Date(slaDeadline);\n  const now = new Date();\n  \n  const totalDays = 14; // SLA é de 14 dias\n  const daysPassed = Math.floor((now.getTime() - created.getTime()) / (1000 * 60 * 60 * 24));\n  const percentage = Math.min((daysPassed / totalDays) * 100, 100);\n  \n  return {\n    daysPassed,\n    totalDays,\n    percentage: Math.round(percentage),\n    isOverdue: now > deadline\n  };\n};\n\nexport default function Jobs() {\n  const [showJobModal, setShowJobModal] = useState(false);\n  const [editingJobId, setEditingJobId] = useState<string | undefined>();\n  const [deletingJobId, setDeletingJobId] = useState<string | undefined>();\n  const [search, setSearch] = useState(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [companyFilter, setCompanyFilter] = useState(\"all\");\n  const [professionFilter, setProfessionFilter] = useState(\"all\");\n  const [currentPage, setCurrentPage] = useState(0);\n  const pageSize = 20;\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Fetch companies for filter\n  const { data: companies } = useQuery<any[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  // Fetch professions for filter\n  const { data: professions } = useQuery<any[]>({\n    queryKey: [\"/api/professions\"],\n  });\n\n  const { data: jobs, isLoading } = useQuery<JobsListResponse>({\n    queryKey: [\"/api/jobs\", { limit: pageSize, offset: currentPage * pageSize, search, statusFilter, companyFilter, professionFilter }],\n    queryFn: async () => {\n      const queryParams = new URLSearchParams();\n      queryParams.set('limit', pageSize.toString());\n      queryParams.set('offset', (currentPage * pageSize).toString());\n      if (search.trim()) {\n        queryParams.set('search', search.trim());\n      }\n      if (statusFilter && statusFilter !== 'all') {\n        queryParams.set('status', statusFilter);\n      }\n      if (companyFilter && companyFilter !== 'all') {\n        queryParams.set('companyId', companyFilter);\n      }\n      if (professionFilter && professionFilter !== 'all') {\n        queryParams.set('professionId', professionFilter);\n      }\n      const queryString = queryParams.toString();\n      const jobsUrl = `/api/jobs${queryString ? `?${queryString}` : ''}`;\n      \n      const response = await fetch(jobsUrl, { credentials: \"include\" });\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    },\n  });\n\n  const deleteJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      await apiRequest(\"DELETE\", `/api/jobs/${jobId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Vaga excluída com sucesso!\",\n      });\n      setDeletingJobId(undefined);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir vaga. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const assignRecruiterMutation = useMutation({\n    mutationFn: async ({ jobId, userId }: { jobId: string; userId: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/jobs/${jobId}`, { recruiterId: userId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Vaga atribuída com sucesso!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atribuir vaga. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const statusVariants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n    closed: \"destructive\"\n  };\n\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  };\n\n  const getSortedJobs = () => {\n    if (!jobs || !sortColumn) return jobs;\n\n    const sorted = [...jobs].sort((a: any, b: any) => {\n      let aValue: any;\n      let bValue: any;\n\n      switch (sortColumn) {\n        case 'jobCode':\n          aValue = a.jobCode || '';\n          bValue = b.jobCode || '';\n          break;\n        case 'profession':\n          aValue = a.profession?.name || a.title || '';\n          bValue = b.profession?.name || b.title || '';\n          break;\n        case 'company':\n          aValue = a.company?.name || '';\n          bValue = b.company?.name || '';\n          break;\n        case 'status':\n          aValue = a.status || '';\n          bValue = b.status || '';\n          break;\n        case 'applicationsCount':\n          aValue = a.applicationsCount || 0;\n          bValue = b.applicationsCount || 0;\n          break;\n        case 'salary':\n          aValue = parseFloat(a.salaryMin || '0');\n          bValue = parseFloat(b.salaryMin || '0');\n          break;\n        case 'sla':\n          aValue = a.slaDeadline ? calculateSLA(a.createdAt, a.slaDeadline).percentage : 0;\n          bValue = b.slaDeadline ? calculateSLA(b.createdAt, b.slaDeadline).percentage : 0;\n          break;\n        case 'createdAt':\n          aValue = new Date(a.createdAt).getTime();\n          bValue = new Date(b.createdAt).getTime();\n          break;\n        case 'recruiter':\n          aValue = a.recruiter?.email || '';\n          bValue = b.recruiter?.email || '';\n          break;\n        case 'creator':\n          aValue = a.creator?.email || a.creator?.firstName || '';\n          bValue = b.creator?.email || b.creator?.firstName || '';\n          break;\n        default:\n          return 0;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      } else {\n        return sortDirection === 'asc' \n          ? aValue - bValue\n          : bValue - aValue;\n      }\n    });\n\n    return sorted;\n  };\n\n  const sortedJobs = getSortedJobs();\n\n  const formatSalary = (min?: string, max?: string) => {\n    if (!min && !max) return \"Não informado\";\n    if (!min) return `Até R$ ${parseFloat(max!).toLocaleString()}`;\n    if (!max) return `R$ ${parseFloat(min).toLocaleString()}`;\n    return `R$ ${parseFloat(min).toLocaleString()} - ${parseFloat(max).toLocaleString()}`;\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"pt-BR\");\n  };\n\n  const handleEditJob = (jobId: string) => {\n    setEditingJobId(jobId);\n    setShowJobModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowJobModal(false);\n    setEditingJobId(undefined);\n  };\n\n  const handleDeleteJob = (jobId: string) => {\n    deleteJobMutation.mutate(jobId);\n  };\n\n  const handleAssignToMe = (jobId: string) => {\n    if (user?.id) {\n      assignRecruiterMutation.mutate({ jobId, userId: user.id });\n    }\n  };\n\n  const handleGoToKanban = (jobId: string) => {\n    setLocation(`/kanban?jobId=${jobId}`);\n  };\n\n  return (\n    <>\n      <TopBar\n        title=\"Gerenciar Vagas\"\n        showCreateButton\n        onCreateClick={() => setShowJobModal(true)}\n        createButtonText=\"Nova Vaga\"\n      />\n\n      <div className=\"space-y-6\">\n        {/* Filters and Search */}\n        <div className=\"bg-card p-6 rounded-lg border border-border\">\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"relative flex-1 max-w-xl\">\n              <Input\n                placeholder=\"Buscar por ID, profissão, empresa ou categoria...\"\n                className=\"pl-10 h-11 text-base\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                data-testid=\"input-search\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5\" />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowFilters(!showFilters)}\n                data-testid=\"button-filters\"\n              >\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filtros\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Exportar\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters Panel */}\n        {showFilters && (\n          <div className=\"bg-card p-6 rounded-lg border border-border\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Status</label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"Todos os status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos os status</SelectItem>\n                    {Object.keys(JOB_STATUS_CONFIG).map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {getStatusLabel(status)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Empresa</label>\n                <Select value={companyFilter} onValueChange={setCompanyFilter}>\n                  <SelectTrigger data-testid=\"select-company-filter\">\n                    <SelectValue placeholder=\"Todas as empresas\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas as empresas</SelectItem>\n                    {companies?.map((company: any) => (\n                      <SelectItem key={company.id} value={company.id}>\n                        {company.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Profissão</label>\n                <Select value={professionFilter} onValueChange={setProfessionFilter}>\n                  <SelectTrigger data-testid=\"select-profession-filter\">\n                    <SelectValue placeholder=\"Todas as profissões\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas as profissões</SelectItem>\n                    {professions?.map((profession: any) => (\n                      <SelectItem key={profession.id} value={profession.id}>\n                        {profession.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-2 mt-4\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => {\n                  setStatusFilter(\"all\");\n                  setCompanyFilter(\"all\");\n                  setProfessionFilter(\"all\");\n                }}\n                data-testid=\"button-clear-filters\"\n              >\n                Limpar Filtros\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Jobs Table */}\n        <div className=\"bg-card rounded-lg border border-border shadow-sm\">\n          {isLoading ? (\n            <div className=\"p-6\">\n              <div className=\"space-y-4\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-16 w-full\" />\n                ))}\n              </div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('jobCode')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        ID Vaga\n                        {sortColumn === 'jobCode' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('profession')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        Profissão\n                        {sortColumn === 'profession' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('company')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        Empresa\n                        {sortColumn === 'company' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('status')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        Status\n                        {sortColumn === 'status' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('applicationsCount')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        Candidatos\n                        {sortColumn === 'applicationsCount' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('salary')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        Salário\n                        {sortColumn === 'salary' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('sla')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        SLA (14 dias)\n                        {sortColumn === 'sla' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('recruiter')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        Recrutador\n                        {sortColumn === 'recruiter' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('creator')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        Gestor\n                        {sortColumn === 'creator' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"cursor-pointer hover:bg-muted/50 select-none\"\n                      onClick={() => handleSort('createdAt')}\n                    >\n                      <div className=\"flex items-center gap-1\">\n                        Criado em\n                        {sortColumn === 'createdAt' ? (\n                          sortDirection === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </div>\n                    </TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedJobs && sortedJobs.length > 0 ? (\n                    sortedJobs.map((job: any) => (\n                      <TableRow key={job.id} data-testid={`row-job-${job.id}`}>\n                        <TableCell>\n                          <div className=\"font-bold text-primary\" data-testid={`text-job-code-${job.id}`}>\n                            {job.jobCode || \"N/A\"}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium text-foreground\">\n                              {job.profession?.name || job.title || \"Profissão não definida\"}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {job.profession?.category || \"\"}\n                            </div>\n                            {job.location && (\n                              <div className=\"text-sm text-muted-foreground\">\n                                <MapPin className=\"h-3 w-3 mr-1\" />\n                                {job.location}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-foreground\">\n                            {job.company?.name || \"N/A\"}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <JobStatusSelect\n                            jobId={job.id}\n                            currentStatus={job.status}\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center\">\n                            <span className=\"font-medium\">\n                              {job.applicationsCount || 0}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            {formatSalary(job.salaryMin, job.salaryMax)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {job.slaDeadline ? (\n                            (() => {\n                              const sla = calculateSLA(job.createdAt, job.slaDeadline);\n                              return (\n                                <div className=\"space-y-1\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <div className=\"text-sm font-medium\" style={{ color: sla.isOverdue ? '#ef4444' : sla.percentage > 80 ? '#f59e0b' : '#10b981' }}>\n                                      {sla.percentage}%\n                                    </div>\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      ({sla.daysPassed}/{sla.totalDays} dias)\n                                    </div>\n                                  </div>\n                                  <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                                    <div \n                                      className=\"h-1.5 rounded-full transition-all\"\n                                      style={{ \n                                        width: `${sla.percentage}%`,\n                                        backgroundColor: sla.isOverdue ? '#ef4444' : sla.percentage > 80 ? '#f59e0b' : '#10b981'\n                                      }}\n                                    />\n                                  </div>\n                                </div>\n                              );\n                            })()\n                          ) : (\n                            <span className=\"text-xs text-muted-foreground\">N/A</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-foreground\">\n                            {job.recruiter?.email || <span className=\"text-muted-foreground\">Não atribuído</span>}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-foreground\">\n                            {job.creator?.email || job.creator?.firstName || <span className=\"text-muted-foreground\">N/A</span>}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {formatDate(job.createdAt)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditJob(job.id)}\n                              data-testid={`button-edit-${job.id}`}\n                            >\n                              <Edit className=\"h-4 w-4 text-primary\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleAssignToMe(job.id)}\n                              title=\"Assumir esta vaga\"\n                              data-testid={`button-assign-${job.id}`}\n                            >\n                              <Users className=\"h-4 w-4 text-green-600\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleGoToKanban(job.id)}\n                              title=\"Ver Kanban desta vaga\"\n                              data-testid={`button-kanban-${job.id}`}\n                            >\n                              <LayoutDashboard className=\"h-4 w-4 text-purple-600\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setDeletingJobId(job.id)}\n                              data-testid={`button-delete-${job.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-destructive\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  ) : (\n                    <TableRow>\n                      <TableCell colSpan={11} className=\"text-center py-12\">\n                        <div className=\"text-muted-foreground\">\n                          <Briefcase className=\"h-16 w-16 mb-4\" />\n                          <p className=\"text-lg font-medium mb-2\">Nenhuma vaga encontrada</p>\n                          <p className=\"text-sm\">\n                            {search\n                              ? \"Tente ajustar os filtros de busca\"\n                              : \"Comece criando sua primeira vaga\"}\n                          </p>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Job Modal */}\n      <JobModal\n        isOpen={showJobModal}\n        onClose={handleCloseModal}\n        jobId={editingJobId}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingJobId} onOpenChange={() => setDeletingJobId(undefined)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir esta vaga? Esta ação não pode ser desfeita.\n              Todas as candidaturas relacionadas também serão removidas.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancelar</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingJobId && handleDeleteJob(deletingJobId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Excluir Vaga\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":29995},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Settings2, Edit, Trash2, Clock } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst workScaleFormSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  description: z.string().optional(),\n});\n\ntype WorkScaleFormData = z.infer<typeof workScaleFormSchema>;\n\ntype WorkScale = {\n  id: string;\n  name: string;\n  description?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport default function Settings() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingWorkScale, setEditingWorkScale] = useState<WorkScale | null>(null);\n  const [deletingWorkScaleId, setDeletingWorkScaleId] = useState<string | undefined>();\n  const { toast } = useToast();\n\n  const form = useForm<WorkScaleFormData>({\n    resolver: zodResolver(workScaleFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const { data: workScales = [], isLoading } = useQuery<WorkScale[]>({\n    queryKey: [\"/api/work-scales?includeInactive=true\"],\n  });\n\n  const createWorkScaleMutation = useMutation({\n    mutationFn: async (data: WorkScaleFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/work-scales\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-scales?includeInactive=true\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Escala de trabalho criada com sucesso!\",\n      });\n      setIsModalOpen(false);\n      form.reset();\n      setEditingWorkScale(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao criar escala de trabalho. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateWorkScaleMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: WorkScaleFormData }) => {\n      const response = await apiRequest(\"PUT\", `/api/work-scales/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-scales?includeInactive=true\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Escala de trabalho atualizada com sucesso!\",\n      });\n      setIsModalOpen(false);\n      form.reset();\n      setEditingWorkScale(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao atualizar escala de trabalho. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteWorkScaleMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"PUT\", `/api/work-scales/${id}`, { isActive: false });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-scales?includeInactive=true\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Escala de trabalho desativada com sucesso!\",\n      });\n      setDeletingWorkScaleId(undefined);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao desativar escala de trabalho. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: WorkScaleFormData) => {\n    if (editingWorkScale) {\n      updateWorkScaleMutation.mutate({ id: editingWorkScale.id, data });\n    } else {\n      createWorkScaleMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (workScale: WorkScale) => {\n    setEditingWorkScale(workScale);\n    form.reset({\n      name: workScale.name,\n      description: workScale.description || \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteWorkScaleMutation.mutate(id);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingWorkScale(null);\n    form.reset({\n      name: \"\",\n      description: \"\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"h-24 bg-gray-100 dark:bg-gray-800 rounded-lg animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Configurações\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mt-1\">\n            Gerencie as escalas de trabalho do sistema\n          </p>\n        </div>\n        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-work-scale\" onClick={() => setEditingWorkScale(null)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nova Escala\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingWorkScale ? \"Editar Escala de Trabalho\" : \"Nova Escala de Trabalho\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome da Escala</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Ex: 5x1, 5x2, 6x1, 12x36\"\n                          data-testid=\"input-work-scale-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição (opcional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Descreva os detalhes da escala de trabalho...\"\n                          rows={3}\n                          data-testid=\"input-work-scale-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2 justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleCloseModal}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createWorkScaleMutation.isPending || updateWorkScaleMutation.isPending}\n                    data-testid=\"button-save-work-scale\"\n                  >\n                    {createWorkScaleMutation.isPending || updateWorkScaleMutation.isPending\n                      ? \"Salvando...\"\n                      : editingWorkScale\n                      ? \"Atualizar\"\n                      : \"Criar\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Escalas de Trabalho\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {workScales.length === 0 ? (\n            <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-work-scales\">\n              Nenhuma escala de trabalho cadastrada\n            </p>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nome</TableHead>\n                  <TableHead>Descrição</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {workScales.map((workScale) => (\n                  <TableRow key={workScale.id} data-testid={`work-scale-row-${workScale.id}`}>\n                    <TableCell className=\"font-medium\" data-testid={`text-work-scale-name-${workScale.id}`}>\n                      {workScale.name}\n                    </TableCell>\n                    <TableCell data-testid={`text-work-scale-description-${workScale.id}`}>\n                      {workScale.description || \"-\"}\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={workScale.isActive ? \"default\" : \"secondary\"}\n                        data-testid={`badge-work-scale-status-${workScale.id}`}\n                      >\n                        {workScale.isActive ? \"Ativa\" : \"Inativa\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex gap-2 justify-end\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(workScale)}\n                          data-testid={`button-edit-work-scale-${workScale.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        {workScale.isActive && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setDeletingWorkScaleId(workScale.id)}\n                            data-testid={`button-delete-work-scale-${workScale.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      <AlertDialog open={!!deletingWorkScaleId} onOpenChange={() => setDeletingWorkScaleId(undefined)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Desativar Escala de Trabalho</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja desativar esta escala de trabalho? Ela será marcada como inativa\n              e não aparecerá mais nas opções de seleção.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancelar</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingWorkScaleId && handleDelete(deletingWorkScaleId)}\n              data-testid=\"button-confirm-delete\"\n            >\n              Desativar\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":12619},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/pages/Permissions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserCompanyRoleSchema, type InsertUserCompanyRole } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit2, Trash2, Shield } from \"lucide-react\";\n\nconst roleLabels = {\n  admin: \"Administrador\",\n  hr_manager: \"Gerente RH\", \n  recruiter: \"Recrutador\",\n  interviewer: \"Entrevistador\",\n  viewer: \"Visualizador\",\n  approver: \"Aprovador\",\n  manager: \"Gestor\"\n};\n\nconst roleColors = {\n  admin: \"bg-red-100 text-red-800\",\n  hr_manager: \"bg-blue-100 text-blue-800\",\n  recruiter: \"bg-green-100 text-green-800\", \n  interviewer: \"bg-yellow-100 text-yellow-800\",\n  viewer: \"bg-gray-100 text-gray-800\",\n  approver: \"bg-purple-100 text-purple-800\",\n  manager: \"bg-orange-100 text-orange-800\"\n};\n\nexport default function Permissions() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get user roles\n  const { data: userRoles = [], isLoading: rolesLoading } = useQuery({\n    queryKey: [\"/api/permissions/user-roles\"],\n  });\n\n  // Get companies for assignment\n  const { data: companies = [] } = useQuery({\n    queryKey: [\"/api/companies\"],\n  });\n\n  // Get role permissions\n  const { data: rolePermissions = [] } = useQuery({\n    queryKey: [\"/api/permissions/roles/permissions\"],\n  });\n\n  // Setup default permissions mutation\n  const setupDefaultsMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/permissions/setup-defaults\", \"POST\", {}),\n    onSuccess: () => {\n      toast({ title: \"Permissões padrão configuradas com sucesso\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permissions/roles/permissions\"] });\n    },\n    onError: () => {\n      toast({ \n        title: \"Erro ao configurar permissões padrão\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Assign user mutation\n  const assignUserMutation = useMutation({\n    mutationFn: (data: InsertUserCompanyRole) => \n      apiRequest(\"/api/permissions/assign\", \"POST\", data),\n    onSuccess: () => {\n      toast({ title: \"Usuário atribuído com sucesso\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permissions/user-roles\"] });\n      setIsModalOpen(false);\n    },\n    onError: () => {\n      toast({ \n        title: \"Erro ao atribuir usuário\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Form for assigning users\n  const form = useForm<InsertUserCompanyRole>({\n    resolver: zodResolver(insertUserCompanyRoleSchema),\n    defaultValues: {\n      userId: \"\",\n      companyId: \"\",\n      role: \"viewer\" as any,\n      costCenterId: null,\n      isActive: true\n    }\n  });\n\n  const onSubmit = (data: InsertUserCompanyRole) => {\n    assignUserMutation.mutate(data);\n  };\n\n  if (rolesLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"h-24 bg-gray-100 dark:bg-gray-800 rounded-lg animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Gestão de Permissões\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mt-1\">\n            Gerencie permissões de usuários por empresa e centro de custo\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={() => setupDefaultsMutation.mutate()}\n            disabled={setupDefaultsMutation.isPending}\n            variant=\"outline\"\n            data-testid=\"button-setup-defaults\"\n          >\n            <Shield className=\"h-4 w-4 mr-2\" />\n            Configurar Padrões\n          </Button>\n          <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-assign-user\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Atribuir Usuário\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Atribuir Usuário à Empresa</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"userId\">ID do Usuário</Label>\n                  <Input\n                    id=\"userId\"\n                    {...form.register(\"userId\")}\n                    placeholder=\"ID do usuário\"\n                    data-testid=\"input-user-id\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"companyId\">Empresa</Label>\n                  <Select \n                    value={form.watch(\"companyId\")} \n                    onValueChange={(value) => form.setValue(\"companyId\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-company\">\n                      <SelectValue placeholder=\"Selecione uma empresa\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {companies.map((company: any) => (\n                        <SelectItem key={company.id} value={company.id}>\n                          {company.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"role\">Função</Label>\n                  <Select \n                    value={form.watch(\"role\")} \n                    onValueChange={(value) => form.setValue(\"role\", value as any)}\n                  >\n                    <SelectTrigger data-testid=\"select-role\">\n                      <SelectValue placeholder=\"Selecione uma função\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(roleLabels).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex gap-2 justify-end\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsModalOpen(false)}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={assignUserMutation.isPending}\n                    data-testid=\"button-save-assignment\"\n                  >\n                    Atribuir\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Current User Roles */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Suas Permissões\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {userRoles.length === 0 ? (\n            <p className=\"text-gray-500 text-center py-8\">\n              Você ainda não possui permissões em nenhuma empresa\n            </p>\n          ) : (\n            <div className=\"space-y-4\">\n              {userRoles.map((role: any) => (\n                <div \n                  key={role.id} \n                  className=\"flex items-center justify-between p-4 border rounded-lg\"\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div>\n                      <p className=\"font-medium\">Empresa: {role.companyId}</p>\n                      {role.costCenterId && (\n                        <p className=\"text-sm text-gray-500\">\n                          Centro de Custo: {role.costCenterId}\n                        </p>\n                      )}\n                    </div>\n                    <Badge className={roleColors[role.role as keyof typeof roleColors]}>\n                      {roleLabels[role.role as keyof typeof roleLabels]}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    Desde: {new Date(role.createdAt).toLocaleDateString('pt-BR')}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Role Permissions Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Permissões por Função</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4\">\n            {Object.entries(roleLabels).map(([roleKey, roleLabel]) => {\n              const permissions = rolePermissions.filter((p: any) => \n                p.role === roleKey && p.isGranted\n              );\n              \n              return (\n                <div key={roleKey} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <Badge className={roleColors[roleKey as keyof typeof roleColors]}>\n                      {roleLabel}\n                    </Badge>\n                    <span className=\"text-sm text-gray-500\">\n                      ({permissions.length} permissões)\n                    </span>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {permissions.map((permission: any) => (\n                      <Badge key={permission.id} variant=\"outline\">\n                        {permission.permission.replace(/_/g, ' ')}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10649},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/JobClosureReport.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport TopBar from \"@/components/TopBar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, TrendingUp, Clock, DollarSign } from \"lucide-react\";\nimport type { JobClosureReportItem } from \"@shared/schema\";\n\nexport default function JobClosureReport() {\n  const { data: reportData, isLoading } = useQuery<JobClosureReportItem[]>({\n    queryKey: [\"/api/reports/job-closure\"],\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\",\n    }).format(value);\n  };\n\n  const getMedalColor = (position: number) => {\n    switch (position) {\n      case 0:\n        return \"text-yellow-500\";\n      case 1:\n        return \"text-gray-400\";\n      case 2:\n        return \"text-amber-600\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  return (\n    <>\n      <TopBar title=\"Relatório de Fechamento de Vagas\" />\n\n      <div className=\"space-y-6\">\n        {/* Summary Cards */}\n        {reportData && reportData.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                  <Trophy className=\"h-4 w-4\" />\n                  Total de Recrutadores\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{reportData.length}</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  Total de Vagas Fechadas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {reportData.reduce((acc, item) => acc + item.closedJobsCount, 0)}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  Tempo Médio de Fechamento\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {Math.round(\n                    reportData.reduce((acc, item) => acc + item.averageDaysToClose, 0) /\n                      reportData.length\n                  )}{\" \"}\n                  dias\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4\" />\n                  Salário Médio Geral\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {formatCurrency(\n                    reportData.reduce((acc, item) => acc + item.averageSalary, 0) /\n                      reportData.length\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Report Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Ranking de Recrutadores por Vagas Fechadas</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-16 w-full\" />\n                ))}\n              </div>\n            ) : reportData && reportData.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-[80px]\">Posição</TableHead>\n                      <TableHead>Recrutador</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead className=\"text-center\">Vagas Fechadas</TableHead>\n                      <TableHead className=\"text-center\">Tempo Médio (dias)</TableHead>\n                      <TableHead className=\"text-right\">Salário Médio</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {reportData.map((item, index) => (\n                      <TableRow key={item.recruiterId} data-testid={`row-report-${item.recruiterId}`}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <span className={`text-xl ${getMedalColor(index)}`}>\n                              {index < 3 ? <Trophy className=\"h-5 w-5\" /> : `#${index + 1}`}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">{item.recruiterName}</div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {item.recruiterEmail}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          <Badge variant=\"default\" className=\"font-semibold bg-green-600 hover:bg-green-700 text-white\">\n                            {item.closedJobsCount}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          <div className=\"flex items-center justify-center gap-1\">\n                            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"font-medium\">{item.averageDaysToClose}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"font-medium\">\n                            {formatCurrency(item.averageSalary)}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Trophy className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-medium mb-2\">Nenhum dado disponível</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Não há vagas fechadas para gerar o relatório\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":7431},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 98%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 4.8%, 95.9%);\n  --secondary-foreground: hsl(240, 5.9%, 10%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 3.8%, 46.1%);\n  --accent: hsl(240, 4.8%, 95.9%);\n  --accent-foreground: hsl(240, 5.9%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --ring: hsl(221, 83%, 53%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 98%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(0, 0%, 98%);\n  --info: hsl(199, 89%, 48%);\n  --info-foreground: hsl(0, 0%, 98%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(240, 10%, 3.9%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(240, 4.8%, 95.9%);\n  --sidebar-accent-foreground: hsl(240, 5.9%, 10%);\n  --sidebar-border: hsl(240, 5.9%, 90%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(240, 10%, 3.9%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --ring: hsl(221, 83%, 53%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 98%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(240, 10%, 3.9%);\n  --info: hsl(199, 89%, 48%);\n  --info-foreground: hsl(240, 10%, 3.9%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(240, 10%, 3.9%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(240, 10%, 3.9%);\n  --sidebar-accent: hsl(240, 3.7%, 15.9%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(240, 3.7%, 15.9%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold tracking-tight;\n  }\n}\n\n@layer components {\n  .sidebar-active {\n    @apply bg-primary/10 text-primary border-r-2 border-primary;\n  }\n\n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: hsl(var(--background) / 0.8);\n  }\n\n  .gradient-border {\n    background: linear-gradient(hsl(var(--border)), hsl(var(--border))) padding-box,\n                linear-gradient(45deg, hsl(var(--primary)), hsl(var(--chart-2))) border-box;\n    border: 1px solid transparent;\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n","size_bytes":4168},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/storage.ts":{"content":"import {\n  users,\n  companies,\n  costCenters,\n  clients,\n  jobs,\n  candidates,\n  applications,\n  selectionStages,\n  interviews,\n  interviewCriteria,\n  applicationStageProgress,\n  userCompanyRoles,\n  rolePermissions,\n  professions,\n  workScales,\n  benefits,\n  jobBenefits,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type Company,\n  type InsertCompany,\n  type CostCenter,\n  type InsertCostCenter,\n  type Client,\n  type InsertClient,\n  type Job,\n  type InsertJob,\n  type JobWithDetails,\n  type CompanyWithCostCenters,\n  type Candidate,\n  type InsertCandidate,\n  type Application,\n  type InsertApplication,\n  type ApplicationWithDetails,\n  type SelectionStage,\n  type InsertSelectionStage,\n  type Interview,\n  type InsertInterview,\n  type InterviewWithDetails,\n  type InterviewCriteria,\n  type InsertInterviewCriteria,\n  type ApplicationStageProgress,\n  type InsertApplicationStageProgress,\n  type UserCompanyRole,\n  type InsertUserCompanyRole,\n  type RolePermission,\n  type InsertRolePermission,\n  type Profession,\n  type InsertProfession,\n  type SelectionProcessMetrics,\n  type InterviewCalendarResponse,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, count, and, or, ilike, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUsers(): Promise<User[]>;\n  \n  // Authentication operations (for local auth)\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: { email: string; passwordHash: string; firstName?: string; lastName?: string; role?: string }): Promise<User>;\n  updateUser(id: string, user: { email?: string; firstName?: string; lastName?: string; role?: string }): Promise<User>;\n  updateUserPassword(id: string, passwordHash: string): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getRecruiters(): Promise<User[]>;\n  \n  // Company operations\n  getCompanies(): Promise<CompanyWithCostCenters[]>;\n  getCompany(id: string): Promise<CompanyWithCostCenters | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company>;\n  deleteCompany(id: string): Promise<void>;\n  \n  // Cost Center operations\n  getCostCentersByCompany(companyId: string): Promise<CostCenter[]>;\n  createCostCenter(costCenter: InsertCostCenter): Promise<CostCenter>;\n  updateCostCenter(id: string, costCenter: Partial<InsertCostCenter>): Promise<CostCenter>;\n  deleteCostCenter(id: string): Promise<void>;\n  \n  // Client operations\n  getClients(): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client>;\n  deleteClient(id: string): Promise<void>;\n  \n  // Profession operations\n  getProfessions(): Promise<Profession[]>;\n  getProfessionsByCategory(category: string): Promise<Profession[]>;\n  getProfession(id: string): Promise<Profession | undefined>;\n  createProfession(profession: InsertProfession): Promise<Profession>;\n  updateProfession(id: string, profession: Partial<InsertProfession>): Promise<Profession>;\n  deleteProfession(id: string): Promise<void>;\n\n  // Work Scale operations\n  getWorkScales(includeInactive?: boolean): Promise<any[]>;\n  getWorkScale(id: string): Promise<any | undefined>;\n  createWorkScale(workScale: any): Promise<any>;\n  updateWorkScale(id: string, workScale: Partial<any>): Promise<any>;\n  deleteWorkScale(id: string): Promise<void>;\n\n  // Benefit operations\n  getBenefits(includeInactive?: boolean): Promise<any[]>;\n  getBenefit(id: string): Promise<any | undefined>;\n  createBenefit(benefit: any): Promise<any>;\n  updateBenefit(id: string, benefit: Partial<any>): Promise<any>;\n  deleteBenefit(id: string): Promise<void>;\n\n  // Candidate operations\n  getCandidates(): Promise<Candidate[]>;\n  getCandidate(id: string): Promise<Candidate | undefined>;\n  getCandidateByEmail(email: string): Promise<Candidate | undefined>;\n  createCandidate(candidate: InsertCandidate): Promise<Candidate>;\n  updateCandidate(id: string, candidate: Partial<InsertCandidate>): Promise<Candidate>;\n  deleteCandidate(id: string): Promise<void>;\n\n  // Job operations\n  getJobs(limit?: number, offset?: number, search?: string, status?: string, companyId?: string, professionId?: string): Promise<JobWithDetails[]>;\n  getJob(id: string): Promise<JobWithDetails | undefined>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJob(id: string, job: Partial<InsertJob>): Promise<Job>;\n  deleteJob(id: string): Promise<void>;\n  \n  // Application operations\n  getApplicationsByJob(jobId: string): Promise<Application[]>;\n  getApplicationWithDetails(id: string): Promise<ApplicationWithDetails | undefined>;\n  getApplicationsWithJobDetails(): Promise<any[]>;\n  createApplication(application: InsertApplication): Promise<Application>;\n  updateApplicationStatus(id: string, status: string): Promise<Application>;\n  updateApplication(id: string, application: Partial<InsertApplication>): Promise<Application>;\n  \n  // Selection Stages operations\n  getSelectionStagesByJob(jobId: string): Promise<SelectionStage[]>;\n  createSelectionStage(stage: InsertSelectionStage): Promise<SelectionStage>;\n  updateSelectionStage(id: string, stage: Partial<InsertSelectionStage>): Promise<SelectionStage>;\n  deleteSelectionStage(id: string): Promise<void>;\n  setupDefaultSelectionStages(jobId: string): Promise<void>;\n  \n  // Interview operations\n  getInterviewsByApplication(applicationId: string): Promise<InterviewWithDetails[]>;\n  getInterviewWithDetails(id: string): Promise<InterviewWithDetails | undefined>;\n  getUpcomingInterviews(interviewerId?: string): Promise<InterviewWithDetails[]>;\n  createInterview(interview: InsertInterview): Promise<Interview>;\n  updateInterview(id: string, interview: Partial<InsertInterview>): Promise<Interview>;\n  deleteInterview(id: string): Promise<void>;\n  \n  // Interview Criteria operations\n  getInterviewCriteria(interviewId: string): Promise<InterviewCriteria[]>;\n  createInterviewCriteria(criteria: InsertInterviewCriteria): Promise<InterviewCriteria>;\n  updateInterviewCriteria(id: string, criteria: Partial<InsertInterviewCriteria>): Promise<InterviewCriteria>;\n  \n  // Application Stage Progress operations\n  getApplicationProgress(applicationId: string): Promise<ApplicationStageProgress[]>;\n  createStageProgress(progress: InsertApplicationStageProgress): Promise<ApplicationStageProgress>;\n  updateStageProgress(id: string, progress: Partial<InsertApplicationStageProgress>): Promise<ApplicationStageProgress>;\n  advanceApplicationStage(applicationId: string, stageId: string, score: number, feedback?: string): Promise<void>;\n  \n  // Analytics operations\n  getDashboardMetrics(): Promise<{\n    totalJobs: number;\n    activeJobs: number;\n    totalApplications: number;\n    totalCompanies: number;\n  }>;\n  \n  getJobsByStatus(): Promise<Array<{ status: string; count: number }>>;\n  getApplicationsByMonth(): Promise<Array<{ month: string; count: number }>>;\n  \n  // Selection process analytics\n  getSelectionProcessMetrics(companyId?: string, timeframe?: string): Promise<SelectionProcessMetrics>;\n  getInterviewCalendar(interviewerId?: string): Promise<InterviewCalendarResponse>;\n  getApplicationStatusDistribution(): Promise<Array<{ status: string; count: number }>>;\n  getAverageTimeToHire(companyId?: string): Promise<number>;\n  getConversionRates(companyId?: string): Promise<{\n    applicationToInterview: number;\n    interviewToOffer: number;\n    offerToHire: number;\n  }>;\n  \n  // Permission operations\n  getUserCompanyRoles(userId: string): Promise<UserCompanyRole[]>;\n  getUserCompanyRoleById(id: string): Promise<UserCompanyRole | undefined>;\n  getUserPermissions(userId: string, companyId: string): Promise<string[]>;\n  assignUserToCompany(assignment: InsertUserCompanyRole): Promise<UserCompanyRole>;\n  updateUserCompanyRole(id: string, role: string): Promise<UserCompanyRole>;\n  removeUserFromCompany(userId: string, companyId: string): Promise<void>;\n  getRolePermissions(): Promise<RolePermission[]>;\n  setupDefaultRolePermissions(): Promise<void>;\n  checkUserPermission(userId: string, companyId: string, permission: string): Promise<boolean>;\n  \n  // Job closure report\n  getJobClosureReport(): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    const allUsers = await db.select().from(users).orderBy(desc(users.createdAt));\n    return allUsers;\n  }\n\n  // Authentication operations (for local auth)\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(user: { email: string; passwordHash: string; firstName?: string; lastName?: string; role?: string }): Promise<User> {\n    const [newUser] = await db\n      .insert(users)\n      .values(user)\n      .returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, user: { email?: string; firstName?: string; lastName?: string; role?: string }): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...user, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async updateUserPassword(id: string, passwordHash: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ passwordHash, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Get users that can be assigned as recruiters\n  async getRecruiters(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Company operations\n  async getCompanies(): Promise<CompanyWithCostCenters[]> {\n    const companiesWithCounts = await db\n      .select({\n        id: companies.id,\n        name: companies.name,\n        description: companies.description,\n        website: companies.website,\n        logo: companies.logo,\n        createdAt: companies.createdAt,\n        updatedAt: companies.updatedAt,\n        jobsCount: count(jobs.id),\n      })\n      .from(companies)\n      .leftJoin(jobs, eq(companies.id, jobs.companyId))\n      .groupBy(companies.id)\n      .orderBy(desc(companies.createdAt));\n\n    const companiesWithCostCenters = await Promise.all(\n      companiesWithCounts.map(async (company) => {\n        const costCentersList = await this.getCostCentersByCompany(company.id);\n        return {\n          ...company,\n          costCenters: costCentersList,\n        };\n      })\n    );\n\n    return companiesWithCostCenters;\n  }\n\n  async getCompany(id: string): Promise<CompanyWithCostCenters | undefined> {\n    const [company] = await db.select().from(companies).where(eq(companies.id, id));\n    if (!company) return undefined;\n\n    const costCentersList = await this.getCostCentersByCompany(id);\n    const [jobsCount] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(eq(jobs.companyId, id));\n\n    return {\n      ...company,\n      costCenters: costCentersList,\n      jobsCount: jobsCount.count,\n    };\n  }\n\n  async createCompany(company: InsertCompany): Promise<Company> {\n    const [newCompany] = await db.insert(companies).values(company).returning();\n    return newCompany;\n  }\n\n  async updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company> {\n    const [updatedCompany] = await db\n      .update(companies)\n      .set({ ...company, updatedAt: new Date() })\n      .where(eq(companies.id, id))\n      .returning();\n    return updatedCompany;\n  }\n\n  async deleteCompany(id: string): Promise<void> {\n    await db.delete(companies).where(eq(companies.id, id));\n  }\n\n  // Cost Center operations\n  async getCostCentersByCompany(companyId: string): Promise<CostCenter[]> {\n    return await db\n      .select()\n      .from(costCenters)\n      .where(eq(costCenters.companyId, companyId))\n      .orderBy(costCenters.name);\n  }\n\n  async createCostCenter(costCenter: InsertCostCenter): Promise<CostCenter> {\n    const [newCostCenter] = await db.insert(costCenters).values(costCenter).returning();\n    return newCostCenter;\n  }\n\n  async updateCostCenter(id: string, costCenter: Partial<InsertCostCenter>): Promise<CostCenter> {\n    const [updatedCostCenter] = await db\n      .update(costCenters)\n      .set({ ...costCenter, updatedAt: new Date() })\n      .where(eq(costCenters.id, id))\n      .returning();\n    return updatedCostCenter;\n  }\n\n  async deleteCostCenter(id: string): Promise<void> {\n    await db.delete(costCenters).where(eq(costCenters.id, id));\n  }\n\n  // Client operations\n  async getClients(): Promise<Client[]> {\n    return await db\n      .select()\n      .from(clients)\n      .where(eq(clients.isActive, true))\n      .orderBy(clients.name);\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client;\n  }\n\n  async createClient(client: InsertClient): Promise<Client> {\n    const [newClient] = await db.insert(clients).values(client).returning();\n    return newClient;\n  }\n\n  async updateClient(id: string, client: Partial<InsertClient>): Promise<Client> {\n    const [updatedClient] = await db\n      .update(clients)\n      .set({ ...client, updatedAt: new Date() })\n      .where(eq(clients.id, id))\n      .returning();\n    return updatedClient;\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    // Soft delete\n    await db\n      .update(clients)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(clients.id, id));\n  }\n\n  // Profession operations\n  async getProfessions(): Promise<Profession[]> {\n    return await db.select().from(professions).where(eq(professions.isActive, true)).orderBy(professions.name);\n  }\n\n  async getProfessionsByCategory(category: string): Promise<Profession[]> {\n    return await db.select().from(professions)\n      .where(and(eq(professions.category, category), eq(professions.isActive, true)))\n      .orderBy(professions.name);\n  }\n\n  async getProfession(id: string): Promise<Profession | undefined> {\n    const [profession] = await db.select().from(professions).where(eq(professions.id, id));\n    return profession;\n  }\n\n  async createProfession(profession: InsertProfession): Promise<Profession> {\n    const [newProfession] = await db.insert(professions).values(profession).returning();\n    return newProfession;\n  }\n\n  async updateProfession(id: string, profession: Partial<InsertProfession>): Promise<Profession> {\n    const [updatedProfession] = await db\n      .update(professions)\n      .set({ ...profession, updatedAt: new Date() })\n      .where(eq(professions.id, id))\n      .returning();\n    return updatedProfession;\n  }\n\n  async deleteProfession(id: string): Promise<void> {\n    await db.delete(professions).where(eq(professions.id, id));\n  }\n\n  // Work Scale operations\n  async getWorkScales(includeInactive = false): Promise<any[]> {\n    if (includeInactive) {\n      return await db.select().from(workScales).orderBy(workScales.name);\n    }\n    return await db.select().from(workScales).where(eq(workScales.isActive, true)).orderBy(workScales.name);\n  }\n\n  async getWorkScale(id: string): Promise<any | undefined> {\n    const [workScale] = await db.select().from(workScales).where(eq(workScales.id, id));\n    return workScale;\n  }\n\n  async createWorkScale(workScale: any): Promise<any> {\n    const [newWorkScale] = await db.insert(workScales).values(workScale).returning();\n    return newWorkScale;\n  }\n\n  async updateWorkScale(id: string, workScale: Partial<any>): Promise<any> {\n    const [updatedWorkScale] = await db\n      .update(workScales)\n      .set({ ...workScale, updatedAt: new Date() })\n      .where(eq(workScales.id, id))\n      .returning();\n    return updatedWorkScale;\n  }\n\n  async deleteWorkScale(id: string): Promise<void> {\n    await db.update(workScales)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(workScales.id, id));\n  }\n\n  // Benefit operations\n  async getBenefits(includeInactive = false): Promise<any[]> {\n    if (includeInactive) {\n      return await db.select().from(benefits).orderBy(benefits.name);\n    }\n    return await db.select().from(benefits).where(eq(benefits.isActive, true)).orderBy(benefits.name);\n  }\n\n  async getBenefit(id: string): Promise<any | undefined> {\n    const [benefit] = await db.select().from(benefits).where(eq(benefits.id, id));\n    return benefit;\n  }\n\n  async createBenefit(benefit: any): Promise<any> {\n    const [newBenefit] = await db.insert(benefits).values(benefit).returning();\n    return newBenefit;\n  }\n\n  async updateBenefit(id: string, benefit: Partial<any>): Promise<any> {\n    const [updatedBenefit] = await db\n      .update(benefits)\n      .set({ ...benefit, updatedAt: new Date() })\n      .where(eq(benefits.id, id))\n      .returning();\n    return updatedBenefit;\n  }\n\n  async deleteBenefit(id: string): Promise<void> {\n    await db.update(benefits)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(benefits.id, id));\n  }\n\n  // Candidate operations\n  async getCandidates(): Promise<Candidate[]> {\n    return await db.select().from(candidates).orderBy(desc(candidates.createdAt));\n  }\n\n  async getCandidate(id: string): Promise<Candidate | undefined> {\n    const [candidate] = await db.select().from(candidates).where(eq(candidates.id, id));\n    return candidate;\n  }\n\n  async getCandidateByEmail(email: string): Promise<Candidate | undefined> {\n    const [candidate] = await db.select().from(candidates).where(eq(candidates.email, email));\n    return candidate;\n  }\n\n  async createCandidate(candidate: InsertCandidate): Promise<Candidate> {\n    const [newCandidate] = await db.insert(candidates).values(candidate).returning();\n    return newCandidate;\n  }\n\n  async updateCandidate(id: string, candidate: Partial<InsertCandidate>): Promise<Candidate> {\n    const [updatedCandidate] = await db\n      .update(candidates)\n      .set(candidate)\n      .where(eq(candidates.id, id))\n      .returning();\n    return updatedCandidate;\n  }\n\n  async deleteCandidate(id: string): Promise<void> {\n    await db.delete(candidates).where(eq(candidates.id, id));\n  }\n\n  // Job operations\n  async getJobs(limit = 50, offset = 0, search?: string, status?: string, companyId?: string, professionId?: string): Promise<JobWithDetails[]> {\n    let baseQuery = db\n      .select({\n        id: jobs.id,\n        jobCode: jobs.jobCode,\n        title: jobs.title,\n        professionId: jobs.professionId,\n        description: jobs.description,\n        requirements: jobs.requirements,\n        companyId: jobs.companyId,\n        costCenterId: jobs.costCenterId,\n        recruiterId: jobs.recruiterId,\n        department: jobs.department,\n        location: jobs.location,\n        contractType: jobs.contractType,\n        salaryMin: jobs.salaryMin,\n\n        status: jobs.status,\n        createdBy: jobs.createdBy,\n        expiresAt: jobs.expiresAt,\n        createdAt: jobs.createdAt,\n        updatedAt: jobs.updatedAt,\n        profession: {\n          id: professions.id,\n          name: professions.name,\n          description: professions.description,\n          category: professions.category,\n          isActive: professions.isActive,\n          createdAt: professions.createdAt,\n          updatedAt: professions.updatedAt,\n        },\n        company: {\n          id: companies.id,\n          name: companies.name,\n          description: companies.description,\n          website: companies.website,\n          logo: companies.logo,\n          createdAt: companies.createdAt,\n          updatedAt: companies.updatedAt,\n        },\n        recruiter: {\n          id: sql<string>`recruiter_users.id`,\n          firstName: sql<string>`recruiter_users.first_name`,\n          lastName: sql<string>`recruiter_users.last_name`,\n          email: sql<string>`recruiter_users.email`,\n        },\n        applicationsCount: count(applications.id),\n      })\n      .from(jobs)\n      .leftJoin(professions, eq(jobs.professionId, professions.id))\n      .leftJoin(companies, eq(jobs.companyId, companies.id))\n      .leftJoin(sql`users as recruiter_users`, eq(jobs.recruiterId, sql`recruiter_users.id`))\n      .leftJoin(applications, eq(jobs.id, applications.jobId))\n      .groupBy(\n        jobs.id, \n        professions.id, \n        companies.id, \n        sql`recruiter_users.id`,\n        sql`recruiter_users.first_name`,\n        sql`recruiter_users.last_name`,\n        sql`recruiter_users.email`\n      );\n\n    const whereConditions = [];\n\n    if (search) {\n      whereConditions.push(\n        or(\n          ilike(jobs.title, `%${search}%`),\n          ilike(professions.name, `%${search}%`),\n          ilike(professions.category, `%${search}%`)\n        )\n      );\n    }\n\n    if (status) {\n      whereConditions.push(eq(jobs.status, status));\n    }\n\n    if (companyId) {\n      whereConditions.push(eq(jobs.companyId, companyId));\n    }\n\n    if (professionId) {\n      whereConditions.push(eq(jobs.professionId, professionId));\n    }\n\n    if (whereConditions.length > 0) {\n      baseQuery = baseQuery.where(and(...whereConditions));\n    }\n\n    const result = await baseQuery\n      .orderBy(desc(jobs.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    return result.map(row => ({\n      ...row,\n      company: row.company?.id ? row.company : undefined,\n      recruiter: row.recruiter?.id ? row.recruiter : undefined,\n    }));\n  }\n\n  async getJob(id: string): Promise<JobWithDetails | undefined> {\n    const [job] = await db\n      .select({\n        id: jobs.id,\n        jobCode: jobs.jobCode,\n        title: jobs.title,\n        professionId: jobs.professionId,\n        description: jobs.description,\n        requirements: jobs.requirements,\n        companyId: jobs.companyId,\n        costCenterId: jobs.costCenterId,\n        recruiterId: jobs.recruiterId,\n        department: jobs.department,\n        location: jobs.location,\n        contractType: jobs.contractType,\n        salaryMin: jobs.salaryMin,\n\n        status: jobs.status,\n        createdBy: jobs.createdBy,\n        expiresAt: jobs.expiresAt,\n        createdAt: jobs.createdAt,\n        updatedAt: jobs.updatedAt,\n        profession: {\n          id: professions.id,\n          name: professions.name,\n          description: professions.description,\n          category: professions.category,\n          isActive: professions.isActive,\n          createdAt: professions.createdAt,\n          updatedAt: professions.updatedAt,\n        },\n        company: {\n          id: companies.id,\n          name: companies.name,\n          description: companies.description,\n          website: companies.website,\n          logo: companies.logo,\n          createdAt: companies.createdAt,\n          updatedAt: companies.updatedAt,\n        },\n        recruiter: {\n          id: sql<string>`recruiter_users.id`,\n          firstName: sql<string>`recruiter_users.first_name`,\n          lastName: sql<string>`recruiter_users.last_name`,\n          email: sql<string>`recruiter_users.email`,\n        },\n        costCenter: {\n          id: costCenters.id,\n          name: costCenters.name,\n          code: costCenters.code,\n          companyId: costCenters.companyId,\n          budget: costCenters.budget,\n          createdAt: costCenters.createdAt,\n          updatedAt: costCenters.updatedAt,\n        },\n      })\n      .from(jobs)\n      .leftJoin(professions, eq(jobs.professionId, professions.id))\n      .leftJoin(companies, eq(jobs.companyId, companies.id))\n      .leftJoin(sql`users as recruiter_users`, eq(jobs.recruiterId, sql`recruiter_users.id`))\n      .leftJoin(costCenters, eq(jobs.costCenterId, costCenters.id))\n      .where(eq(jobs.id, id));\n\n    if (!job) return undefined;\n\n    const jobApplications = await this.getApplicationsByJob(id);\n\n    return {\n      ...job,\n      profession: job.profession?.id ? job.profession : undefined,\n      company: job.company?.id ? job.company : undefined,\n      recruiter: job.recruiter?.id ? job.recruiter : undefined,\n      costCenter: job.costCenter?.id ? job.costCenter : undefined,\n      applications: jobApplications,\n      applicationsCount: jobApplications.length,\n    };\n  }\n\n  async createJob(job: InsertJob): Promise<Job> {\n    // Generate simple incremental job code\n    let jobCode = job.jobCode;\n    \n    if (!jobCode) {\n      // Get next value from sequence\n      const result = await db.execute(sql`SELECT nextval('job_code_seq') as code`);\n      const counter = (result.rows[0] as any).code;\n      jobCode = `VG${String(counter).padStart(3, '0')}`;\n    }\n    \n    const [newJob] = await db.insert(jobs).values({ ...job, jobCode }).returning();\n    return newJob;\n  }\n\n  async updateJob(id: string, job: Partial<InsertJob>): Promise<Job> {\n    const [updatedJob] = await db\n      .update(jobs)\n      .set({ ...job, updatedAt: new Date() })\n      .where(eq(jobs.id, id))\n      .returning();\n    return updatedJob;\n  }\n\n  async deleteJob(id: string): Promise<void> {\n    await db.delete(jobs).where(eq(jobs.id, id));\n  }\n\n  // Application operations\n  async getApplicationsByJob(jobId: string): Promise<Application[]> {\n    return await db\n      .select()\n      .from(applications)\n      .where(eq(applications.jobId, jobId))\n      .orderBy(desc(applications.appliedAt));\n  }\n\n  async createApplication(application: InsertApplication): Promise<Application> {\n    const [newApplication] = await db.insert(applications).values(application).returning();\n    return newApplication;\n  }\n\n  async updateApplicationStatus(id: string, status: string): Promise<Application> {\n    const [updatedApplication] = await db\n      .update(applications)\n      .set({ status })\n      .where(eq(applications.id, id))\n      .returning();\n    return updatedApplication;\n  }\n\n  async getApplicationWithDetails(id: string): Promise<ApplicationWithDetails | undefined> {\n    const [application] = await db\n      .select()\n      .from(applications)\n      .where(eq(applications.id, id));\n    \n    if (!application) return undefined;\n\n    // Get job details\n    const job = await this.getJob(application.jobId!);\n    \n    // Get interviews\n    const applicationInterviews = await this.getInterviewsByApplication(id);\n    \n    // Get stage progress\n    const stageProgress = await this.getApplicationProgress(id);\n    \n    return {\n      ...application,\n      job,\n      interviews: applicationInterviews,\n      stageProgress,\n    };\n  }\n\n  async updateApplication(id: string, application: Partial<InsertApplication>): Promise<Application> {\n    const [updatedApplication] = await db\n      .update(applications)\n      .set({ ...application, updatedAt: new Date() })\n      .where(eq(applications.id, id))\n      .returning();\n    return updatedApplication;\n  }\n\n  async getApplicationsWithJobDetails(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: applications.id,\n        jobId: applications.jobId,\n        candidateId: applications.candidateId,\n        coverLetter: applications.coverLetter,\n        status: applications.status,\n        currentStage: applications.currentStage,\n        kanbanStage: applications.kanbanStage,\n        appliedAt: applications.appliedAt,\n        candidate: {\n          id: candidates.id,\n          name: candidates.name,\n          email: candidates.email,\n          phone: candidates.phone,\n        },\n        job: {\n          id: jobs.id,\n          professionId: jobs.professionId,\n          profession: {\n            id: professions.id,\n            name: professions.name,\n          },\n          company: {\n            id: companies.id,\n            name: companies.name,\n          },\n        },\n      })\n      .from(applications)\n      .leftJoin(candidates, eq(applications.candidateId, candidates.id))\n      .leftJoin(jobs, eq(applications.jobId, jobs.id))\n      .leftJoin(professions, eq(jobs.professionId, professions.id))\n      .leftJoin(companies, eq(jobs.companyId, companies.id))\n      .orderBy(desc(applications.appliedAt));\n\n    return result.map(row => ({\n      ...row,\n      candidate: row.candidate?.id ? row.candidate : undefined,\n      job: row.job?.id ? {\n        ...row.job,\n        profession: row.job.profession?.id ? row.job.profession : undefined,\n        company: row.job.company?.id ? row.job.company : undefined,\n      } : undefined,\n    }));\n  }\n\n  // Selection Stages operations\n  async getSelectionStagesByJob(jobId: string): Promise<SelectionStage[]> {\n    return await db\n      .select()\n      .from(selectionStages)\n      .where(eq(selectionStages.jobId, jobId))\n      .orderBy(selectionStages.order);\n  }\n\n  async createSelectionStage(stage: InsertSelectionStage): Promise<SelectionStage> {\n    const [newStage] = await db.insert(selectionStages).values(stage).returning();\n    return newStage;\n  }\n\n  async updateSelectionStage(id: string, stage: Partial<InsertSelectionStage>): Promise<SelectionStage> {\n    const [updatedStage] = await db\n      .update(selectionStages)\n      .set(stage)\n      .where(eq(selectionStages.id, id))\n      .returning();\n    return updatedStage;\n  }\n\n  async deleteSelectionStage(id: string): Promise<void> {\n    await db.delete(selectionStages).where(eq(selectionStages.id, id));\n  }\n\n  async setupDefaultSelectionStages(jobId: string): Promise<void> {\n    const defaultStages = [\n      {\n        jobId,\n        name: \"Application Review\",\n        description: \"Initial screening of application documents\",\n        order: 1,\n        isRequired: true,\n        passingScore: 60,\n      },\n      {\n        jobId,\n        name: \"Phone Screening\",\n        description: \"Brief phone interview to assess basic fit\",\n        order: 2,\n        isRequired: true,\n        passingScore: 70,\n      },\n      {\n        jobId,\n        name: \"Technical Interview\",\n        description: \"Technical skills assessment\",\n        order: 3,\n        isRequired: true,\n        passingScore: 75,\n      },\n      {\n        jobId,\n        name: \"Final Interview\",\n        description: \"Final interview with hiring manager\",\n        order: 4,\n        isRequired: true,\n        passingScore: 80,\n      },\n    ];\n\n    // Only create if no stages exist\n    const existingStages = await this.getSelectionStagesByJob(jobId);\n    if (existingStages.length === 0) {\n      for (const stage of defaultStages) {\n        await this.createSelectionStage(stage);\n      }\n    }\n  }\n\n  // Interview operations\n  async getInterviewsByApplication(applicationId: string): Promise<InterviewWithDetails[]> {\n    const result = await db\n      .select({\n        interview: interviews,\n        interviewer: users,\n        stage: selectionStages,\n        application: applications,\n        candidate: candidates,\n      })\n      .from(interviews)\n      .leftJoin(users, eq(interviews.interviewerId, users.id))\n      .leftJoin(selectionStages, eq(interviews.stageId, selectionStages.id))\n      .leftJoin(applications, eq(interviews.applicationId, applications.id))\n      .leftJoin(candidates, eq(applications.candidateId, candidates.id))\n      .where(eq(interviews.applicationId, applicationId))\n      .orderBy(interviews.scheduledAt);\n\n    return result.map(row => ({\n      ...row.interview,\n      interviewer: row.interviewer || undefined,\n      stage: row.stage || undefined,\n      application: row.application || undefined,\n      candidate: row.candidate ? {\n        name: row.candidate.name,\n        email: row.candidate.email,\n        jobTitle: \"Candidate\",\n      } : undefined,\n    }));\n  }\n\n  async getInterviewWithDetails(id: string): Promise<InterviewWithDetails | undefined> {\n    const result = await db\n      .select({\n        interview: interviews,\n        interviewer: users,\n        stage: selectionStages,\n        application: applications,\n        candidate: candidates,\n      })\n      .from(interviews)\n      .leftJoin(users, eq(interviews.interviewerId, users.id))\n      .leftJoin(selectionStages, eq(interviews.stageId, selectionStages.id))\n      .leftJoin(applications, eq(interviews.applicationId, applications.id))\n      .leftJoin(candidates, eq(applications.candidateId, candidates.id))\n      .where(eq(interviews.id, id));\n\n    if (result.length === 0) return undefined;\n\n    const row = result[0];\n    const criteria = await this.getInterviewCriteria(id);\n\n    return {\n      ...row.interview,\n      interviewer: row.interviewer || undefined,\n      stage: row.stage || undefined,\n      application: row.application || undefined,\n      criteria,\n      candidate: row.candidate ? {\n        name: row.candidate.name,\n        email: row.candidate.email,\n        jobTitle: \"Candidate\",\n      } : undefined,\n    };\n  }\n\n  async getUpcomingInterviews(interviewerId?: string): Promise<InterviewWithDetails[]> {\n    let query = db\n      .select({\n        interview: interviews,\n        interviewer: users,\n        stage: selectionStages,\n        application: applications,\n        candidate: candidates,\n      })\n      .from(interviews)\n      .leftJoin(users, eq(interviews.interviewerId, users.id))\n      .leftJoin(selectionStages, eq(interviews.stageId, selectionStages.id))\n      .leftJoin(applications, eq(interviews.applicationId, applications.id))\n      .leftJoin(candidates, eq(applications.candidateId, candidates.id))\n      .where(and(\n        sql`${interviews.scheduledAt} >= NOW()`,\n        eq(interviews.status, \"scheduled\")\n      ));\n\n    if (interviewerId) {\n      query = query.where(and(\n        sql`${interviews.scheduledAt} >= NOW()`,\n        eq(interviews.status, \"scheduled\"),\n        eq(interviews.interviewerId, interviewerId)\n      ));\n    }\n\n    const result = await query.orderBy(interviews.scheduledAt);\n\n    return result.map(row => ({\n      ...row.interview,\n      interviewer: row.interviewer || undefined,\n      stage: row.stage || undefined,\n      application: row.application || undefined,\n      candidate: row.candidate ? {\n        name: row.candidate.name,\n        email: row.candidate.email,\n        jobTitle: \"Candidate\",\n      } : undefined,\n    }));\n  }\n\n  async createInterview(interview: InsertInterview): Promise<Interview> {\n    const [newInterview] = await db.insert(interviews).values(interview).returning();\n    return newInterview;\n  }\n\n  async updateInterview(id: string, interview: Partial<InsertInterview>): Promise<Interview> {\n    const [updatedInterview] = await db\n      .update(interviews)\n      .set({ ...interview, updatedAt: new Date() })\n      .where(eq(interviews.id, id))\n      .returning();\n    return updatedInterview;\n  }\n\n  async deleteInterview(id: string): Promise<void> {\n    await db.delete(interviews).where(eq(interviews.id, id));\n  }\n\n  // Interview Criteria operations\n  async getInterviewCriteria(interviewId: string): Promise<InterviewCriteria[]> {\n    return await db\n      .select()\n      .from(interviewCriteria)\n      .where(eq(interviewCriteria.interviewId, interviewId));\n  }\n\n  async createInterviewCriteria(criteria: InsertInterviewCriteria): Promise<InterviewCriteria> {\n    const [newCriteria] = await db.insert(interviewCriteria).values(criteria).returning();\n    return newCriteria;\n  }\n\n  async updateInterviewCriteria(id: string, criteria: Partial<InsertInterviewCriteria>): Promise<InterviewCriteria> {\n    const [updatedCriteria] = await db\n      .update(interviewCriteria)\n      .set(criteria)\n      .where(eq(interviewCriteria.id, id))\n      .returning();\n    return updatedCriteria;\n  }\n\n  // Application Stage Progress operations\n  async getApplicationProgress(applicationId: string): Promise<ApplicationStageProgress[]> {\n    return await db\n      .select()\n      .from(applicationStageProgress)\n      .where(eq(applicationStageProgress.applicationId, applicationId))\n      .orderBy(applicationStageProgress.createdAt);\n  }\n\n  async createStageProgress(progress: InsertApplicationStageProgress): Promise<ApplicationStageProgress> {\n    const [newProgress] = await db.insert(applicationStageProgress).values(progress).returning();\n    return newProgress;\n  }\n\n  async updateStageProgress(id: string, progress: Partial<InsertApplicationStageProgress>): Promise<ApplicationStageProgress> {\n    const [updatedProgress] = await db\n      .update(applicationStageProgress)\n      .set({ ...progress, updatedAt: new Date() })\n      .where(eq(applicationStageProgress.id, id))\n      .returning();\n    return updatedProgress;\n  }\n\n  async advanceApplicationStage(applicationId: string, stageId: string, score: number, feedback?: string): Promise<void> {\n    // Update current stage progress\n    await this.createStageProgress({\n      applicationId,\n      stageId,\n      status: \"completed\",\n      score,\n      feedback,\n      completedAt: new Date(),\n    });\n\n    // Update application's current stage and overall score\n    await this.updateApplication(applicationId, {\n      currentStage: stageId,\n      overallScore: score,\n      updatedAt: new Date(),\n    });\n  }\n\n  // Analytics operations\n  async getDashboardMetrics(): Promise<{\n    totalJobs: number;\n    activeJobs: number;\n    totalApplications: number;\n    totalCompanies: number;\n  }> {\n    const [totalJobsResult] = await db.select({ count: count() }).from(jobs);\n    const [activeJobsResult] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(eq(jobs.status, \"active\"));\n    const [totalApplicationsResult] = await db.select({ count: count() }).from(applications);\n    const [totalCompaniesResult] = await db.select({ count: count() }).from(companies);\n\n    return {\n      totalJobs: totalJobsResult.count,\n      activeJobs: activeJobsResult.count,\n      totalApplications: totalApplicationsResult.count,\n      totalCompanies: totalCompaniesResult.count,\n    };\n  }\n\n  async getJobsByStatus(): Promise<Array<{ status: string; count: number }>> {\n    const result = await db\n      .select({\n        status: jobs.status,\n        count: count(),\n      })\n      .from(jobs)\n      .groupBy(jobs.status);\n    \n    return result.map(row => ({\n      status: row.status || '',\n      count: row.count\n    }));\n  }\n\n  async getApplicationsByMonth(): Promise<Array<{ month: string; count: number }>> {\n    return await db\n      .select({\n        month: sql<string>`TO_CHAR(${applications.appliedAt}, 'YYYY-MM')`,\n        count: count(),\n      })\n      .from(applications)\n      .where(sql`${applications.appliedAt} >= NOW() - INTERVAL '12 months'`)\n      .groupBy(sql`TO_CHAR(${applications.appliedAt}, 'YYYY-MM')`)\n      .orderBy(sql`TO_CHAR(${applications.appliedAt}, 'YYYY-MM')`);\n  }\n\n  // Selection process analytics\n  async getSelectionProcessMetrics(companyId?: string, timeframe?: string): Promise<SelectionProcessMetrics> {\n    let baseQuery = db.select().from(applications);\n    \n    if (companyId) {\n      baseQuery = baseQuery.leftJoin(jobs, eq(applications.jobId, jobs.id))\n        .where(eq(jobs.companyId, companyId)) as any;\n    }\n\n    const [totalAppsResult] = await db.select({ count: count() }).from(applications);\n    const statusDistribution = await this.getApplicationStatusDistribution();\n    const avgTimeToHire = await this.getAverageTimeToHire(companyId);\n    const conversionRates = await this.getConversionRates(companyId);\n\n    return {\n      totalApplications: totalAppsResult.count,\n      byStatus: statusDistribution,\n      averageTimeToHire: avgTimeToHire,\n      conversionRates,\n    };\n  }\n\n  async getInterviewCalendar(interviewerId?: string): Promise<InterviewCalendarResponse> {\n    const now = new Date();\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);\n\n    // Upcoming interviews (future)\n    const upcomingInterviews = await this.getUpcomingInterviews(interviewerId);\n\n    // Today's interviews\n    let todayQuery = db\n      .select({\n        interview: interviews,\n        interviewer: users,\n        stage: selectionStages,\n        application: applications,\n      })\n      .from(interviews)\n      .leftJoin(users, eq(interviews.interviewerId, users.id))\n      .leftJoin(selectionStages, eq(interviews.stageId, selectionStages.id))\n      .leftJoin(applications, eq(interviews.applicationId, applications.id))\n      .where(and(\n        sql`${interviews.scheduledAt} >= ${todayStart}`,\n        sql`${interviews.scheduledAt} < ${todayEnd}`,\n        eq(interviews.status, \"scheduled\")\n      ));\n\n    if (interviewerId) {\n      todayQuery = todayQuery.where(and(\n        sql`${interviews.scheduledAt} >= ${todayStart}`,\n        sql`${interviews.scheduledAt} < ${todayEnd}`,\n        eq(interviews.status, \"scheduled\"),\n        eq(interviews.interviewerId, interviewerId)\n      ));\n    }\n\n    const todayResult = await todayQuery.orderBy(interviews.scheduledAt);\n\n    // Overdue interviews (past scheduled but still marked as scheduled)\n    let overdueQuery = db\n      .select({\n        interview: interviews,\n        interviewer: users,\n        stage: selectionStages,\n        application: applications,\n      })\n      .from(interviews)\n      .leftJoin(users, eq(interviews.interviewerId, users.id))\n      .leftJoin(selectionStages, eq(interviews.stageId, selectionStages.id))\n      .leftJoin(applications, eq(interviews.applicationId, applications.id))\n      .where(and(\n        sql`${interviews.scheduledAt} < NOW()`,\n        eq(interviews.status, \"scheduled\")\n      ));\n\n    if (interviewerId) {\n      overdueQuery = overdueQuery.where(and(\n        sql`${interviews.scheduledAt} < NOW()`,\n        eq(interviews.status, \"scheduled\"),\n        eq(interviews.interviewerId, interviewerId)\n      ));\n    }\n\n    const overdueResult = await overdueQuery.orderBy(interviews.scheduledAt);\n\n    const mapToDetails = (rows: any[]) => rows.map(row => ({\n      ...row.interview,\n      interviewer: row.interviewer,\n      stage: row.stage,\n      application: row.application,\n      candidate: row.application ? {\n        name: row.application.candidateName,\n        email: row.application.candidateEmail,\n        jobTitle: \"Candidate\",\n      } : undefined,\n    }));\n\n    return {\n      upcomingInterviews,\n      todayInterviews: mapToDetails(todayResult),\n      overdueInterviews: mapToDetails(overdueResult),\n    };\n  }\n\n  async getApplicationStatusDistribution(): Promise<Array<{ status: string; count: number }>> {\n    const result = await db\n      .select({\n        status: applications.status,\n        count: count(),\n      })\n      .from(applications)\n      .groupBy(applications.status);\n    \n    return result.map(row => ({\n      status: row.status || '',\n      count: row.count\n    }));\n  }\n\n  async getAverageTimeToHire(companyId?: string): Promise<number> {\n    let query = db\n      .select({\n        appliedAt: applications.appliedAt,\n        updatedAt: applications.updatedAt,\n      })\n      .from(applications);\n\n    if (companyId) {\n      query = query\n        .leftJoin(jobs, eq(applications.jobId, jobs.id))\n        .where(and(\n          eq(applications.status, \"hired\"),\n          eq(jobs.companyId, companyId)\n        )) as any;\n    } else {\n      query = query.where(eq(applications.status, \"hired\"));\n    }\n\n    const hiredApplications = await query;\n    \n    if (hiredApplications.length === 0) return 0;\n\n    const totalDays = hiredApplications.reduce((sum, app) => {\n      const daysDiff = Math.floor((app.updatedAt!.getTime() - app.appliedAt!.getTime()) / (1000 * 60 * 60 * 24));\n      return sum + daysDiff;\n    }, 0);\n\n    return Math.round(totalDays / hiredApplications.length);\n  }\n\n  async getConversionRates(companyId?: string): Promise<{\n    applicationToInterview: number;\n    interviewToOffer: number;\n    offerToHire: number;\n  }> {\n    let baseQuery = db.select({ count: count() }).from(applications);\n    \n    if (companyId) {\n      baseQuery = baseQuery\n        .leftJoin(jobs, eq(applications.jobId, jobs.id))\n        .where(eq(jobs.companyId, companyId)) as any;\n    }\n\n    const [totalApps] = await baseQuery;\n    \n    let interviewsQuery = db.select({ count: count() }).from(applications);\n    if (companyId) {\n      interviewsQuery = interviewsQuery\n        .leftJoin(jobs, eq(applications.jobId, jobs.id))\n        .where(and(\n          sql`${applications.status} IN ('interview_scheduled', 'interview_completed', 'final_review', 'approved', 'hired')`,\n          eq(jobs.companyId, companyId)\n        )) as any;\n    } else {\n      interviewsQuery = interviewsQuery\n        .where(sql`${applications.status} IN ('interview_scheduled', 'interview_completed', 'final_review', 'approved', 'hired')`);\n    }\n\n    const [appsWithInterviews] = await interviewsQuery;\n\n    let offersQuery = db.select({ count: count() }).from(applications);\n    if (companyId) {\n      offersQuery = offersQuery\n        .leftJoin(jobs, eq(applications.jobId, jobs.id))\n        .where(and(\n          sql`${applications.status} IN ('approved', 'hired')`,\n          eq(jobs.companyId, companyId)\n        )) as any;\n    } else {\n      offersQuery = offersQuery\n        .where(sql`${applications.status} IN ('approved', 'hired')`);\n    }\n\n    const [appsWithOffers] = await offersQuery;\n\n    let hiredQuery = db.select({ count: count() }).from(applications);\n    if (companyId) {\n      hiredQuery = hiredQuery\n        .leftJoin(jobs, eq(applications.jobId, jobs.id))\n        .where(and(\n          eq(applications.status, \"hired\"),\n          eq(jobs.companyId, companyId)\n        )) as any;\n    } else {\n      hiredQuery = hiredQuery.where(eq(applications.status, \"hired\"));\n    }\n\n    const [hiredApps] = await hiredQuery;\n\n    const applicationToInterview = totalApps.count > 0 ? (appsWithInterviews.count / totalApps.count) * 100 : 0;\n    const interviewToOffer = appsWithInterviews.count > 0 ? (appsWithOffers.count / appsWithInterviews.count) * 100 : 0;\n    const offerToHire = appsWithOffers.count > 0 ? (hiredApps.count / appsWithOffers.count) * 100 : 0;\n\n    return {\n      applicationToInterview: Math.round(applicationToInterview * 100) / 100,\n      interviewToOffer: Math.round(interviewToOffer * 100) / 100,\n      offerToHire: Math.round(offerToHire * 100) / 100,\n    };\n  }\n\n  // Permission operations\n  async getUserCompanyRoles(userId: string): Promise<UserCompanyRole[]> {\n    return await db\n      .select()\n      .from(userCompanyRoles)\n      .where(and(eq(userCompanyRoles.userId, userId), eq(userCompanyRoles.isActive, true)))\n      .orderBy(userCompanyRoles.createdAt);\n  }\n\n  async getUserCompanyRoleById(id: string): Promise<UserCompanyRole | undefined> {\n    const [role] = await db\n      .select()\n      .from(userCompanyRoles)\n      .where(eq(userCompanyRoles.id, id));\n    return role;\n  }\n\n  async getUserPermissions(userId: string, companyId: string): Promise<string[]> {\n    // Get user's roles in the company\n    const userRoles = await db\n      .select()\n      .from(userCompanyRoles)\n      .where(\n        and(\n          eq(userCompanyRoles.userId, userId),\n          eq(userCompanyRoles.companyId, companyId),\n          eq(userCompanyRoles.isActive, true)\n        )\n      );\n\n    if (userRoles.length === 0) return [];\n\n    // Get permissions for all user's roles and aggregate them\n    const allPermissions = new Set<string>();\n    \n    for (const userRole of userRoles) {\n      const permissions = await db\n        .select({ permission: rolePermissions.permission })\n        .from(rolePermissions)\n        .where(\n          and(\n            eq(rolePermissions.role, userRole.role),\n            eq(rolePermissions.isGranted, true)\n          )\n        );\n      \n      permissions.forEach(p => allPermissions.add(p.permission));\n    }\n\n    return Array.from(allPermissions);\n  }\n\n  async assignUserToCompany(assignment: InsertUserCompanyRole): Promise<UserCompanyRole> {\n    const [newAssignment] = await db\n      .insert(userCompanyRoles)\n      .values(assignment)\n      .returning();\n    return newAssignment;\n  }\n\n  async updateUserCompanyRole(id: string, role: string): Promise<UserCompanyRole> {\n    const [updatedRole] = await db\n      .update(userCompanyRoles)\n      .set({ role: role as any, updatedAt: new Date() })\n      .where(eq(userCompanyRoles.id, id))\n      .returning();\n    return updatedRole;\n  }\n\n  async removeUserFromCompany(userId: string, companyId: string): Promise<void> {\n    await db\n      .update(userCompanyRoles)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(\n        and(\n          eq(userCompanyRoles.userId, userId),\n          eq(userCompanyRoles.companyId, companyId)\n        )\n      );\n  }\n\n  async getRolePermissions(): Promise<RolePermission[]> {\n    return await db.select().from(rolePermissions).orderBy(rolePermissions.role);\n  }\n\n  async setupDefaultRolePermissions(): Promise<void> {\n    // Clear existing permissions first to ensure idempotency\n    await db.delete(rolePermissions);\n    \n    // Setup default permissions for different roles\n    const defaultPermissions = [\n      // Admin permissions - full access\n      { role: \"admin\", permission: \"create_jobs\", isGranted: true },\n      { role: \"admin\", permission: \"edit_jobs\", isGranted: true },\n      { role: \"admin\", permission: \"delete_jobs\", isGranted: true },\n      { role: \"admin\", permission: \"view_jobs\", isGranted: true },\n      { role: \"admin\", permission: \"create_companies\", isGranted: true },\n      { role: \"admin\", permission: \"edit_companies\", isGranted: true },\n      { role: \"admin\", permission: \"delete_companies\", isGranted: true },\n      { role: \"admin\", permission: \"view_companies\", isGranted: true },\n      { role: \"admin\", permission: \"manage_cost_centers\", isGranted: true },\n      { role: \"admin\", permission: \"view_applications\", isGranted: true },\n      { role: \"admin\", permission: \"manage_applications\", isGranted: true },\n      { role: \"admin\", permission: \"interview_candidates\", isGranted: true },\n      { role: \"admin\", permission: \"hire_candidates\", isGranted: true },\n      { role: \"admin\", permission: \"view_reports\", isGranted: true },\n      { role: \"admin\", permission: \"export_data\", isGranted: true },\n      { role: \"admin\", permission: \"manage_users\", isGranted: true },\n      { role: \"admin\", permission: \"manage_permissions\", isGranted: true },\n\n      // HR Manager permissions\n      { role: \"hr_manager\", permission: \"create_jobs\", isGranted: true },\n      { role: \"hr_manager\", permission: \"edit_jobs\", isGranted: true },\n      { role: \"hr_manager\", permission: \"delete_jobs\", isGranted: true },\n      { role: \"hr_manager\", permission: \"view_jobs\", isGranted: true },\n      { role: \"hr_manager\", permission: \"view_companies\", isGranted: true },\n      { role: \"hr_manager\", permission: \"manage_cost_centers\", isGranted: true },\n      { role: \"hr_manager\", permission: \"view_applications\", isGranted: true },\n      { role: \"hr_manager\", permission: \"manage_applications\", isGranted: true },\n      { role: \"hr_manager\", permission: \"interview_candidates\", isGranted: true },\n      { role: \"hr_manager\", permission: \"hire_candidates\", isGranted: true },\n      { role: \"hr_manager\", permission: \"view_reports\", isGranted: true },\n      { role: \"hr_manager\", permission: \"export_data\", isGranted: true },\n\n      // Recruiter permissions\n      { role: \"recruiter\", permission: \"create_jobs\", isGranted: true },\n      { role: \"recruiter\", permission: \"edit_jobs\", isGranted: true },\n      { role: \"recruiter\", permission: \"view_jobs\", isGranted: true },\n      { role: \"recruiter\", permission: \"view_companies\", isGranted: true },\n      { role: \"recruiter\", permission: \"view_applications\", isGranted: true },\n      { role: \"recruiter\", permission: \"manage_applications\", isGranted: true },\n      { role: \"recruiter\", permission: \"interview_candidates\", isGranted: true },\n      { role: \"recruiter\", permission: \"view_reports\", isGranted: true },\n\n      // Interviewer permissions\n      { role: \"interviewer\", permission: \"view_jobs\", isGranted: true },\n      { role: \"interviewer\", permission: \"view_companies\", isGranted: true },\n      { role: \"interviewer\", permission: \"view_applications\", isGranted: true },\n      { role: \"interviewer\", permission: \"interview_candidates\", isGranted: true },\n\n      // Viewer permissions - read only\n      { role: \"viewer\", permission: \"view_jobs\", isGranted: true },\n      { role: \"viewer\", permission: \"view_companies\", isGranted: true },\n      { role: \"viewer\", permission: \"view_applications\", isGranted: true },\n      { role: \"viewer\", permission: \"view_reports\", isGranted: true },\n    ];\n\n    // Insert permissions in batch\n    if (defaultPermissions.length > 0) {\n      await db\n        .insert(rolePermissions)\n        .values(defaultPermissions as any);\n    }\n  }\n\n  async checkUserPermission(userId: string, companyId: string, permission: string): Promise<boolean> {\n    // If AUTH_BYPASS is enabled, allow all permissions\n    if (process.env.AUTH_BYPASS === 'true') {\n      return true;\n    }\n    \n    const userPermissions = await this.getUserPermissions(userId, companyId);\n    return userPermissions.includes(permission);\n  }\n\n  async getJobClosureReport(): Promise<any[]> {\n    const result = await db\n      .select({\n        recruiterId: users.id,\n        recruiterName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        recruiterEmail: users.email,\n        closedJobsCount: count(jobs.id),\n        avgDaysToClose: sql<number>`COALESCE(AVG(EXTRACT(EPOCH FROM (${jobs.updatedAt} - ${jobs.createdAt})) / 86400), 0)`,\n        avgSalaryMin: sql<number>`COALESCE(AVG(CAST(${jobs.salaryMin} AS DECIMAL)), 0)`,\n        avgSalaryMax: sql<number>`COALESCE(AVG(CAST(${jobs.salaryMax} AS DECIMAL)), 0)`,\n      })\n      .from(jobs)\n      .innerJoin(users, eq(jobs.recruiterId, users.id))\n      .where(eq(jobs.status, 'closed'))\n      .groupBy(users.id, users.firstName, users.lastName, users.email)\n      .orderBy(desc(count(jobs.id)));\n\n    return result.map((row) => ({\n      recruiterId: row.recruiterId,\n      recruiterName: row.recruiterName,\n      recruiterEmail: row.recruiterEmail,\n      closedJobsCount: Number(row.closedJobsCount),\n      averageDaysToClose: Math.round(Number(row.avgDaysToClose)),\n      averageSalary: Math.round((Number(row.avgSalaryMin) + Number(row.avgSalaryMax)) / 2),\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":54743},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/Landing.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Briefcase, Mail, Lock, User, ArrowRight, CheckCircle2 } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  firstName: z.string().min(2, \"Nome é obrigatório\"),\n  lastName: z.string().min(2, \"Sobrenome é obrigatório\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Landing() {\n  const { isLoading } = useAuth();\n  const { toast } = useToast();\n  const [isLogin, setIsLogin] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const handleLogin = async (data: LoginForm) => {\n    setIsSubmitting(true);\n    try {\n      await apiRequest(\"POST\", \"/api/auth/login\", data);\n\n      toast({\n        title: \"Login realizado com sucesso\",\n        description: \"Redirecionando para o dashboard...\",\n      });\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    } catch (error: any) {\n      toast({\n        title: \"Erro no login\",\n        description: error.message || \"Verifique suas credenciais\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleRegister = async (data: RegisterForm) => {\n    setIsSubmitting(true);\n    try {\n      await apiRequest(\"POST\", \"/api/auth/register\", data);\n\n      toast({\n        title: \"Conta criada com sucesso\",\n        description: \"Bem-vindo ao VagasPro!\",\n      });\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    } catch (error: any) {\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Tente novamente\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-600 via-indigo-700 to-purple-800 flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"w-16 h-16 border-4 border-white border-t-transparent rounded-full animate-spin\"></div>\n          <p className=\"text-white text-lg font-medium\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-600 via-indigo-700 to-purple-800 flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-white/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-white/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-white/5 rounded-full blur-3xl\"></div>\n      </div>\n\n      <div className=\"w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-8 relative z-10\">\n        {/* Left side - Branding */}\n        <div className=\"hidden lg:flex flex-col justify-center text-white space-y-8 p-8\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-14 h-14 bg-white/20 backdrop-blur-lg rounded-2xl flex items-center justify-center\">\n                <Briefcase className=\"w-8 h-8 text-white\" />\n              </div>\n              <h1 className=\"text-5xl font-bold\">VagasPro</h1>\n            </div>\n            <p className=\"text-2xl text-white/90 font-light\">\n              Sistema Inteligente de Gestão de Vagas\n            </p>\n          </div>\n\n          <div className=\"space-y-6 mt-12\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <CheckCircle2 className=\"w-5 h-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">Gestão Completa de Vagas</h3>\n                <p className=\"text-white/80\">Controle total do processo de recrutamento</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <CheckCircle2 className=\"w-5 h-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">Dashboard Analítico</h3>\n                <p className=\"text-white/80\">Métricas e relatórios em tempo real</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <CheckCircle2 className=\"w-5 h-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">Controle de Permissões</h3>\n                <p className=\"text-white/80\">Gestão segura e hierarquizada</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right side - Login/Register Form */}\n        <div className=\"flex items-center justify-center\">\n          <Card className=\"w-full max-w-md bg-white/95 backdrop-blur-xl border-0 shadow-2xl\">\n            <CardHeader className=\"text-center space-y-4 pb-8\">\n              {/* Mobile logo */}\n              <div className=\"lg:hidden flex items-center justify-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-indigo-700 rounded-xl flex items-center justify-center\">\n                  <Briefcase className=\"w-7 h-7 text-white\" />\n                </div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-700 bg-clip-text text-transparent\">\n                  VagasPro\n                </h1>\n              </div>\n\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">\n                  {isLogin ? \"Bem-vindo de volta!\" : \"Crie sua conta\"}\n                </h2>\n                <p className=\"text-gray-600 mt-2\">\n                  {isLogin \n                    ? \"Acesse sua conta para continuar\" \n                    : \"Comece a gerenciar suas vagas hoje\"}\n                </p>\n              </div>\n\n              <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                <button\n                  onClick={() => setIsLogin(true)}\n                  className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${\n                    isLogin\n                      ? \"bg-white text-gray-900 shadow-sm\"\n                      : \"text-gray-600 hover:text-gray-900\"\n                  }`}\n                  data-testid=\"button-switch-login\"\n                >\n                  Login\n                </button>\n                <button\n                  onClick={() => setIsLogin(false)}\n                  className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${\n                    !isLogin\n                      ? \"bg-white text-gray-900 shadow-sm\"\n                      : \"text-gray-600 hover:text-gray-900\"\n                  }`}\n                  data-testid=\"button-switch-register\"\n                >\n                  Cadastro\n                </button>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"pb-8\">\n              {isLogin ? (\n                <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-5\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"text-gray-700 font-medium\">Email</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"seu@email.com\"\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...loginForm.register(\"email\")}\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n                    {loginForm.formState.errors.email && (\n                      <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                        {loginForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\" className=\"text-gray-700 font-medium\">Senha</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        id=\"password\"\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...loginForm.register(\"password\")}\n                        data-testid=\"input-password\"\n                      />\n                    </div>\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white font-medium shadow-lg hover:shadow-xl transition-all\"\n                    data-testid=\"button-login\"\n                  >\n                    {isSubmitting ? (\n                      <span className=\"flex items-center gap-2\">\n                        <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        Entrando...\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center gap-2\">\n                        Entrar\n                        <ArrowRight className=\"w-5 h-5\" />\n                      </span>\n                    )}\n                  </Button>\n                </form>\n              ) : (\n                <form onSubmit={registerForm.handleSubmit(handleRegister)} className=\"space-y-5\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\" className=\"text-gray-700 font-medium\">Nome</Label>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                        <Input\n                          id=\"firstName\"\n                          placeholder=\"João\"\n                          className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                          {...registerForm.register(\"firstName\")}\n                          data-testid=\"input-first-name\"\n                        />\n                      </div>\n                      {registerForm.formState.errors.firstName && (\n                        <p className=\"text-sm text-red-600\">\n                          {registerForm.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\" className=\"text-gray-700 font-medium\">Sobrenome</Label>\n                      <Input\n                        id=\"lastName\"\n                        placeholder=\"Silva\"\n                        className=\"h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...registerForm.register(\"lastName\")}\n                        data-testid=\"input-last-name\"\n                      />\n                      {registerForm.formState.errors.lastName && (\n                        <p className=\"text-sm text-red-600\">\n                          {registerForm.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-email\" className=\"text-gray-700 font-medium\">Email</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        placeholder=\"seu@email.com\"\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...registerForm.register(\"email\")}\n                        data-testid=\"input-register-email\"\n                      />\n                    </div>\n                    {registerForm.formState.errors.email && (\n                      <p className=\"text-sm text-red-600\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-password\" className=\"text-gray-700 font-medium\">Senha</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        placeholder=\"Mínimo 6 caracteres\"\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...registerForm.register(\"password\")}\n                        data-testid=\"input-register-password\"\n                      />\n                    </div>\n                    {registerForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-600\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white font-medium shadow-lg hover:shadow-xl transition-all\"\n                    data-testid=\"button-register\"\n                  >\n                    {isSubmitting ? (\n                      <span className=\"flex items-center gap-2\">\n                        <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        Criando conta...\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center gap-2\">\n                        Criar conta\n                        <ArrowRight className=\"w-5 h-5\" />\n                      </span>\n                    )}\n                  </Button>\n                </form>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16817},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n      sameSite: 'lax',\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  // Register strategies for configured domains\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  // Register strategy for localhost development using the actual Replit domain\n  const localhostStrategy = new Strategy(\n    {\n      name: `replitauth:localhost`,\n      config,\n      scope: \"openid email profile offline_access\",\n      callbackURL: `https://${process.env.REPLIT_DOMAINS}/api/callback`,\n    },\n    verify,\n  );\n  passport.use(localhostStrategy);\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4688},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ClientModal.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertClientSchema, type Client } from \"@shared/schema\";\nimport { getAllCities, BRAZILIAN_STATES } from \"@shared/constants\";\n\ninterface ClientModalProps {\n  clientId?: string;\n  onClose: () => void;\n}\n\nconst formSchema = insertClientSchema.extend({\n  name: z.string().min(1, \"Nome é obrigatório\"),\n  contactPerson: z.string().optional(),\n  phone: z.string().optional(),\n  email: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n  address: z.string().optional(),\n  city: z.string().optional(),\n  state: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport default function ClientModal({ clientId, onClose }: ClientModalProps) {\n  const { toast } = useToast();\n  const isEditing = !!clientId;\n  const [cities] = useState(getAllCities());\n\n  const { data: client } = useQuery<Client>({\n    queryKey: [\"/api/clients\", clientId],\n    enabled: isEditing,\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      contactPerson: \"\",\n      phone: \"\",\n      email: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      notes: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (client) {\n      form.reset({\n        name: client.name,\n        contactPerson: client.contactPerson || \"\",\n        phone: client.phone || \"\",\n        email: client.email || \"\",\n        address: client.address || \"\",\n        city: client.city || \"\",\n        state: client.state || \"\",\n        notes: client.notes || \"\",\n      });\n    }\n  }, [client, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      if (isEditing) {\n        return await apiRequest(\"PUT\", `/api/clients/${clientId}`, data);\n      }\n      return await apiRequest(\"POST\", \"/api/clients\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: \"Sucesso\",\n        description: `Cliente ${isEditing ? \"atualizado\" : \"criado\"} com sucesso!`,\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || `Erro ao ${isEditing ? \"atualizar\" : \"criar\"} cliente`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"title-client-modal\">\n            {isEditing ? \"Editar Cliente\" : \"Novo Cliente\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEditing\n              ? \"Atualize as informações do cliente\"\n              : \"Preencha os dados do novo cliente\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Informações Básicas */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wide\">\n                Informações Básicas\n              </h3>\n\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome do Cliente *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Ex: João Silva Construções\"\n                        {...field}\n                        data-testid=\"input-client-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"contactPerson\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Pessoa de Contato</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Ex: João Silva\"\n                        {...field}\n                        data-testid=\"input-contact-person\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Telefone</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"(11) 98765-4321\"\n                          {...field}\n                          data-testid=\"input-phone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"contato@exemplo.com\"\n                          {...field}\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Endereço */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wide\">\n                Endereço\n              </h3>\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Endereço Completo</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Rua, número, bairro, complemento...\"\n                        {...field}\n                        data-testid=\"input-address\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"city\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cidade</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-city\">\n                            <SelectValue placeholder=\"Selecione a cidade\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {cities.map((city) => (\n                            <SelectItem key={city} value={city}>\n                              {city}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"state\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Estado</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-state\">\n                            <SelectValue placeholder=\"Selecione o estado\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {BRAZILIAN_STATES.map((state) => (\n                            <SelectItem key={state.value} value={state.value}>\n                              {state.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Observações */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wide\">\n                Observações\n              </h3>\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notas</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Informações adicionais sobre o cliente...\"\n                        rows={4}\n                        {...field}\n                        data-testid=\"input-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createMutation.isPending}\n                data-testid=\"button-submit-client\"\n              >\n                {createMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Salvando...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-save mr-2\"></i>\n                    {isEditing ? \"Atualizar\" : \"Criar\"} Cliente\n                  </>\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11499},"server/simpleAuth.ts":{"content":"import * as bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\n\nconst SALT_ROUNDS = 10;\n\n// Session configuration for simple auth\nexport function getSessionForSimpleAuth() {\n  return session({\n    secret: process.env.SESSION_SECRET || 'default-dev-secret-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'lax',\n    },\n  });\n}\n\n// Demo user for bypass mode\nconst DEMO_USER = {\n  id: \"demo-user-bypass\",\n  email: \"demo@example.com\", \n  firstName: \"Demo\",\n  lastName: \"User\",\n  role: \"admin\" as const,\n  profileImageUrl: null,\n  createdAt: new Date(),\n  updatedAt: new Date()\n};\n\n// Helper function to check if auth bypass is enabled (lazy evaluation)\nexport function isAuthBypassEnabled(): boolean {\n  return process.env.AUTH_BYPASS === 'true';\n}\n\n// Middleware to setup demo user when AUTH_BYPASS is enabled\nexport const setupDemoUserBypass: RequestHandler = (req, res, next) => {\n  if (isAuthBypassEnabled()) {\n    // Ensure session exists\n    if (!req.session) {\n      req.session = {} as any;\n    }\n    // Set demo user in session\n    (req.session as any).user = DEMO_USER;\n    // Add bypass header\n    res.setHeader('X-Auth-Bypass', 'true');\n  }\n  next();\n};\n\n// Middleware to check if user is authenticated\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  // Bypass mode - always authenticated with demo user\n  if (isAuthBypassEnabled()) {\n    if (!req.session) {\n      req.session = {} as any;\n    }\n    (req.session as any).user = DEMO_USER;\n    return next();\n  }\n  \n  // Normal authentication check\n  if (req.session?.user) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};\n\n// Validation schemas\nconst loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\n// Helper functions\nasync function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, SALT_ROUNDS);\n}\n\nasync function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\n// Setup simple authentication routes\nexport function setupSimpleAuth(app: Express) {\n  const authBypassEnabled = isAuthBypassEnabled();\n  \n  // Safety check: refuse to start if bypass is enabled in production\n  if (authBypassEnabled && process.env.NODE_ENV === 'production') {\n    throw new Error('SECURITY ERROR: AUTH_BYPASS cannot be enabled in production! Remove AUTH_BYPASS environment variable.');\n  }\n  \n  // Log warning if bypass mode is enabled\n  if (authBypassEnabled) {\n    console.warn('⚠️  WARNING: AUTH_BYPASS is enabled! Authentication is disabled. DO NOT use in production!');\n  }\n\n  // Use session middleware\n  app.use(getSessionForSimpleAuth());\n  \n  // Setup demo user bypass middleware (must be before routes)\n  app.use(setupDemoUserBypass);\n\n  // Override old Replit Auth routes to prevent conflicts\n  app.get('/api/login', (req, res) => {\n    res.redirect('/');\n  });\n  \n  app.get('/api/logout', (req, res) => {\n    res.redirect('/');\n  });\n\n  // Register endpoint\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      // In bypass mode, registration is disabled\n      if (isAuthBypassEnabled()) {\n        return res.status(200).json({ \n          message: \"AUTH_BYPASS está ativo - registro desabilitado. Acesso direto permitido.\" \n        });\n      }\n\n      const validationResult = registerSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Dados inválidos\", \n          errors: validationResult.error.format() \n        });\n      }\n\n      const { email, password, firstName, lastName } = validationResult.data;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"Email já está em uso\" });\n      }\n\n      // Hash password and create user\n      const passwordHash = await hashPassword(password);\n      const newUser = await storage.createUser({\n        email,\n        passwordHash,\n        firstName,\n        lastName,\n      });\n\n      // Remove password hash from response\n      const { passwordHash: _, ...userResponse } = newUser;\n\n      // Set session\n      (req.session as any).user = {\n        id: newUser.id,\n        email: newUser.email,\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        role: newUser.role,\n      };\n\n      res.status(201).json({\n        message: \"Usuário criado com sucesso\",\n        user: userResponse,\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Login endpoint\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      // In bypass mode, login is not needed\n      if (isAuthBypassEnabled()) {\n        return res.status(200).json({ \n          message: \"AUTH_BYPASS está ativo - login não necessário. Acesso direto permitido.\",\n          user: DEMO_USER\n        });\n      }\n\n      const validationResult = loginSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Dados inválidos\", \n          errors: validationResult.error.format() \n        });\n      }\n\n      const { email, password } = validationResult.data;\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.passwordHash) {\n        return res.status(401).json({ message: \"Email ou senha inválidos\" });\n      }\n\n      // Verify password\n      const isPasswordValid = await verifyPassword(password, user.passwordHash);\n      if (!isPasswordValid) {\n        return res.status(401).json({ message: \"Email ou senha inválidos\" });\n      }\n\n      // Set session\n      (req.session as any).user = {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n      };\n\n      // Remove password hash from response\n      const { passwordHash: _, ...userResponse } = user;\n\n      res.json({\n        message: \"Login realizado com sucesso\",\n        user: userResponse,\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/auth/logout', (req, res) => {\n    // In bypass mode, logout is a no-op\n    if (isAuthBypassEnabled()) {\n      return res.status(200).json({ \n        message: \"AUTH_BYPASS está ativo - logout não necessário. Acesso sempre permitido.\" \n      });\n    }\n\n    req.session?.destroy((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Erro ao fazer logout\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logout realizado com sucesso\" });\n    });\n  });\n\n  // Get current user endpoint\n  app.get('/api/auth/user', isAuthenticated, async (req, res) => {\n    try {\n      // In bypass mode, return demo user directly\n      if (isAuthBypassEnabled()) {\n        return res.json(DEMO_USER);\n      }\n\n      const sessionUser = (req.session as any).user;\n      const user = await storage.getUser(sessionUser.id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n\n      // Remove password hash from response\n      const { passwordHash: _, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n}\n\n// Extend session type to include user\ndeclare module 'express-session' {\n  interface SessionData {\n    user?: {\n      id: string;\n      email: string;\n      firstName?: string;\n      lastName?: string;\n      role?: string;\n    };\n  }\n}","size_bytes":8521},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupSimpleAuth, isAuthenticated } from \"./simpleAuth\";\nimport { \n  insertCompanySchema, \n  insertCostCenterSchema,\n  insertClientSchema,\n  insertJobSchema,\n  insertCandidateSchema,\n  insertApplicationSchema,\n  insertUserCompanyRoleSchema,\n  insertSelectionStageSchema,\n  insertInterviewSchema,\n  insertInterviewCriteriaSchema,\n  insertApplicationStageProgressSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Authorization middleware\nconst requirePermission = (permission: string) => {\n  return async (req: any, res: any, next: any) => {\n    try {\n      const userId = req.session?.user?.id;\n      const companyId = req.body.companyId || req.params.companyId;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      if (!companyId) {\n        return res.status(400).json({ message: \"Company ID required\" });\n      }\n      \n      const hasPermission = await storage.checkUserPermission(userId, companyId, permission);\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Authorization error:\", error);\n      res.status(500).json({ message: \"Authorization check failed\" });\n    }\n  };\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware - setup simple auth to provide authentication\n  setupSimpleAuth(app);\n\n  // Dashboard metrics\n  app.get('/api/dashboard/metrics', isAuthenticated, async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching dashboard metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  app.get('/api/dashboard/jobs-by-status', isAuthenticated, async (req, res) => {\n    try {\n      const data = await storage.getJobsByStatus();\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching jobs by status:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs by status\" });\n    }\n  });\n\n  app.get('/api/dashboard/applications-by-month', isAuthenticated, async (req, res) => {\n    try {\n      const data = await storage.getApplicationsByMonth();\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching applications by month:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications by month\" });\n    }\n  });\n\n  app.get('/api/reports/job-closure', isAuthenticated, async (req, res) => {\n    try {\n      const report = await storage.getJobClosureReport();\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching job closure report:\", error);\n      res.status(500).json({ message: \"Failed to fetch job closure report\" });\n    }\n  });\n\n  // Profession routes\n  app.get('/api/professions', isAuthenticated, async (req, res) => {\n    try {\n      const professions = await storage.getProfessions();\n      res.json(professions);\n    } catch (error) {\n      console.error(\"Error fetching professions:\", error);\n      res.status(500).json({ message: \"Failed to fetch professions\" });\n    }\n  });\n\n  // Recruiters endpoint\n  app.get('/api/recruiters', isAuthenticated, async (req, res) => {\n    try {\n      const recruiters = await storage.getRecruiters();\n      res.json(recruiters);\n    } catch (error) {\n      console.error(\"Error fetching recruiters:\", error);\n      res.status(500).json({ message: \"Failed to fetch recruiters\" });\n    }\n  });\n\n  // Users routes\n  app.get('/api/users', isAuthenticated, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/users', isAuthenticated, async (req, res) => {\n    try {\n      const userData = req.body;\n      \n      // Check if email already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already in use\" });\n      }\n      \n      // Validate password is provided\n      if (!userData.password || userData.password.length < 6) {\n        return res.status(400).json({ message: \"Senha deve ter pelo menos 6 caracteres\" });\n      }\n      \n      // Hash the provided password\n      const bcrypt = await import('bcrypt');\n      const passwordHash = await bcrypt.hash(userData.password, 10);\n      \n      const newUser = await storage.createUser({\n        email: userData.email,\n        passwordHash: passwordHash,\n        firstName: userData.name,\n        lastName: userData.name, // Using name for both first and last\n        role: userData.role || 'user'\n      });\n      \n      res.status(201).json(newUser);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put('/api/users/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userData = req.body;\n      \n      // Check if user exists\n      const existingUser = await storage.getUser(id);\n      if (!existingUser) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n      \n      // If email is being changed, check if new email is available\n      if (userData.email && userData.email !== existingUser.email) {\n        const emailInUse = await storage.getUserByEmail(userData.email);\n        if (emailInUse) {\n          return res.status(400).json({ message: \"Email já está em uso\" });\n        }\n      }\n      \n      // Update user (password is updated separately)\n      const updatedUser = await storage.updateUser(id, {\n        email: userData.email,\n        firstName: userData.name,\n        lastName: userData.name,\n        role: userData.role\n      });\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar usuário\" });\n    }\n  });\n\n  app.delete('/api/users/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if user exists\n      const existingUser = await storage.getUser(id);\n      if (!existingUser) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n      \n      await storage.deleteUser(id);\n      res.json({ message: \"Usuário excluído com sucesso\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Erro ao excluir usuário\" });\n    }\n  });\n\n  app.get('/api/professions/categories/:category', isAuthenticated, async (req, res) => {\n    try {\n      const { category } = req.params;\n      const professions = await storage.getProfessionsByCategory(category);\n      res.json(professions);\n    } catch (error) {\n      console.error(\"Error fetching professions by category:\", error);\n      res.status(500).json({ message: \"Failed to fetch professions by category\" });\n    }\n  });\n\n  app.get('/api/professions/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const profession = await storage.getProfession(id);\n      if (!profession) {\n        return res.status(404).json({ message: \"Profession not found\" });\n      }\n      res.json(profession);\n    } catch (error) {\n      console.error(\"Error fetching profession:\", error);\n      res.status(500).json({ message: \"Failed to fetch profession\" });\n    }\n  });\n\n  // Work Scale routes\n  app.get('/api/work-scales', isAuthenticated, async (req, res) => {\n    try {\n      const includeInactive = req.query.includeInactive === 'true';\n      const workScales = await storage.getWorkScales(includeInactive);\n      res.json(workScales);\n    } catch (error) {\n      console.error(\"Error fetching work scales:\", error);\n      res.status(500).json({ message: \"Failed to fetch work scales\" });\n    }\n  });\n\n  app.get('/api/work-scales/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const workScale = await storage.getWorkScale(id);\n      if (!workScale) {\n        return res.status(404).json({ message: \"Work scale not found\" });\n      }\n      res.json(workScale);\n    } catch (error) {\n      console.error(\"Error fetching work scale:\", error);\n      res.status(500).json({ message: \"Failed to fetch work scale\" });\n    }\n  });\n\n  app.post('/api/work-scales', isAuthenticated, async (req, res) => {\n    try {\n      const workScale = await storage.createWorkScale(req.body);\n      res.status(201).json(workScale);\n    } catch (error) {\n      console.error(\"Error creating work scale:\", error);\n      res.status(500).json({ message: \"Failed to create work scale\" });\n    }\n  });\n\n  app.put('/api/work-scales/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const workScale = await storage.updateWorkScale(id, req.body);\n      res.json(workScale);\n    } catch (error) {\n      console.error(\"Error updating work scale:\", error);\n      res.status(500).json({ message: \"Failed to update work scale\" });\n    }\n  });\n\n  app.delete('/api/work-scales/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteWorkScale(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting work scale:\", error);\n      res.status(500).json({ message: \"Failed to delete work scale\" });\n    }\n  });\n\n  // Benefit routes\n  app.get('/api/benefits', isAuthenticated, async (req, res) => {\n    try {\n      const includeInactive = req.query.includeInactive === 'true';\n      const benefits = await storage.getBenefits(includeInactive);\n      res.json(benefits);\n    } catch (error) {\n      console.error(\"Error fetching benefits:\", error);\n      res.status(500).json({ message: \"Failed to fetch benefits\" });\n    }\n  });\n\n  app.get('/api/benefits/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const benefit = await storage.getBenefit(id);\n      if (!benefit) {\n        return res.status(404).json({ message: \"Benefit not found\" });\n      }\n      res.json(benefit);\n    } catch (error) {\n      console.error(\"Error fetching benefit:\", error);\n      res.status(500).json({ message: \"Failed to fetch benefit\" });\n    }\n  });\n\n  app.post('/api/benefits', isAuthenticated, async (req, res) => {\n    try {\n      const benefit = await storage.createBenefit(req.body);\n      res.status(201).json(benefit);\n    } catch (error) {\n      console.error(\"Error creating benefit:\", error);\n      res.status(500).json({ message: \"Failed to create benefit\" });\n    }\n  });\n\n  app.put('/api/benefits/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const benefit = await storage.updateBenefit(id, req.body);\n      res.json(benefit);\n    } catch (error) {\n      console.error(\"Error updating benefit:\", error);\n      res.status(500).json({ message: \"Failed to update benefit\" });\n    }\n  });\n\n  app.delete('/api/benefits/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteBenefit(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting benefit:\", error);\n      res.status(500).json({ message: \"Failed to delete benefit\" });\n    }\n  });\n\n  // Company routes\n  app.get('/api/companies', isAuthenticated, async (req, res) => {\n    try {\n      const companies = await storage.getCompanies();\n      res.json(companies);\n    } catch (error) {\n      console.error(\"Error fetching companies:\", error);\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  app.get('/api/companies/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const company = await storage.getCompany(id);\n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error fetching company:\", error);\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  app.post('/api/companies', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertCompanySchema.parse(req.body);\n      const company = await storage.createCompany(validatedData);\n      res.status(201).json(company);\n    } catch (error) {\n      console.error(\"Error creating company:\", error);\n      res.status(400).json({ message: \"Invalid company data\" });\n    }\n  });\n\n  app.put('/api/companies/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      // Check if user has permission to edit this company\n      const hasPermission = await storage.checkUserPermission(userId, id, 'edit_companies');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const validatedData = insertCompanySchema.partial().parse(req.body);\n      const company = await storage.updateCompany(id, validatedData);\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error updating company:\", error);\n      res.status(400).json({ message: \"Invalid company data\" });\n    }\n  });\n\n  app.delete('/api/companies/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      // Check if user has permission to delete this company\n      const hasPermission = await storage.checkUserPermission(userId, id, 'delete_companies');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      await storage.deleteCompany(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting company:\", error);\n      res.status(500).json({ message: \"Failed to delete company\" });\n    }\n  });\n\n  // Cost Center routes\n  app.get('/api/companies/:companyId/cost-centers', isAuthenticated, async (req, res) => {\n    try {\n      const { companyId } = req.params;\n      const costCenters = await storage.getCostCentersByCompany(companyId);\n      res.json(costCenters);\n    } catch (error) {\n      console.error(\"Error fetching cost centers:\", error);\n      res.status(500).json({ message: \"Failed to fetch cost centers\" });\n    }\n  });\n\n  app.post('/api/cost-centers', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertCostCenterSchema.parse(req.body);\n      const costCenter = await storage.createCostCenter(validatedData);\n      res.status(201).json(costCenter);\n    } catch (error) {\n      console.error(\"Error creating cost center:\", error);\n      res.status(400).json({ message: \"Invalid cost center data\" });\n    }\n  });\n\n  app.put('/api/cost-centers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertCostCenterSchema.partial().parse(req.body);\n      const costCenter = await storage.updateCostCenter(id, validatedData);\n      res.json(costCenter);\n    } catch (error) {\n      console.error(\"Error updating cost center:\", error);\n      res.status(400).json({ message: \"Invalid cost center data\" });\n    }\n  });\n\n  app.delete('/api/cost-centers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCostCenter(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting cost center:\", error);\n      res.status(500).json({ message: \"Failed to delete cost center\" });\n    }\n  });\n\n  // Client Routes\n  app.get('/api/clients', isAuthenticated, async (req, res) => {\n    try {\n      const clients = await storage.getClients();\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get('/api/clients/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const client = await storage.getClient(id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error fetching client:\", error);\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post('/api/clients', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(validatedData);\n      res.status(201).json(client);\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid client data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create client\" });\n    }\n  });\n\n  app.put('/api/clients/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(id, validatedData);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid client data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  app.delete('/api/clients/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteClient(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Job routes\n  app.get('/api/jobs', isAuthenticated, async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n      const search = req.query.search as string;\n      const status = req.query.status as string === 'all' ? undefined : req.query.status as string;\n      const companyId = req.query.companyId as string === 'all' ? undefined : req.query.companyId as string;\n      const professionId = req.query.professionId as string === 'all' ? undefined : req.query.professionId as string;\n      \n      let jobs = await storage.getJobs(limit, offset, search, status, companyId, professionId);\n      \n      // Filter jobs based on user role\n      const userId = req.user?.id || (req.session as any).user?.id;\n      \n      // Get user's roles to check permissions\n      const userRoles = await storage.getUserCompanyRoles(userId);\n      const isRecruiter = userRoles.some((r: any) => r.role === 'recruiter');\n      const isManagerOrHR = userRoles.some((r: any) => r.role === 'manager' || r.role === 'hr_manager' || r.role === 'admin');\n      \n      // Recrutadores veem APENAS vagas com status \"aprovada\"\n      if (isRecruiter && !isManagerOrHR) {\n        jobs = jobs.filter((job: any) => job.status === 'aprovada');\n      }\n      \n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.get('/api/jobs/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const job = await storage.getJob(id);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      console.error(\"Error fetching job:\", error);\n      res.status(500).json({ message: \"Failed to fetch job\" });\n    }\n  });\n\n  app.post('/api/jobs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.id || (req.session as any).user?.id;\n      \n      console.log(\"=== DEBUG JOB CREATION ===\");\n      console.log(\"Request body:\", JSON.stringify(req.body, null, 2));\n      \n      // Calculate SLA deadline (14 days from now)\n      const slaDeadline = new Date();\n      slaDeadline.setDate(slaDeadline.getDate() + 14);\n      \n      // Clean the data - remove empty strings and convert to proper types\n      const cleanedBody = Object.fromEntries(\n        Object.entries(req.body).filter(([_, v]) => v !== \"\" && v !== null && v !== undefined)\n      );\n      \n      console.log(\"Cleaned body:\", JSON.stringify(cleanedBody, null, 2));\n      \n      // Don't set createdBy in AUTH_BYPASS mode since the user doesn't exist in DB\n      const dataToValidate: any = {\n        ...cleanedBody,\n        slaDeadline: slaDeadline.toISOString(),\n      };\n      \n      // Only set createdBy if not in bypass mode and user exists\n      if (process.env.AUTH_BYPASS !== 'true') {\n        dataToValidate.createdBy = userId;\n      }\n      \n      const validatedData = insertJobSchema.parse(dataToValidate);\n      \n      console.log(\"Validated data:\", JSON.stringify(validatedData, null, 2));\n      \n      // Convert ISO strings to Date objects for Drizzle timestamp columns\n      const jobDataForDb: any = { ...validatedData };\n      \n      console.log(\"Before date conversion - slaDeadline type:\", typeof jobDataForDb.slaDeadline, \"value:\", jobDataForDb.slaDeadline);\n      \n      if (jobDataForDb.openingDate) {\n        console.log(\"Converting openingDate:\", jobDataForDb.openingDate);\n        jobDataForDb.openingDate = new Date(jobDataForDb.openingDate);\n      }\n      if (jobDataForDb.startDate) {\n        console.log(\"Converting startDate:\", jobDataForDb.startDate);\n        jobDataForDb.startDate = new Date(jobDataForDb.startDate);\n      }\n      if (jobDataForDb.expiresAt) {\n        console.log(\"Converting expiresAt:\", jobDataForDb.expiresAt);\n        jobDataForDb.expiresAt = new Date(jobDataForDb.expiresAt);\n      }\n      if (jobDataForDb.slaDeadline) {\n        console.log(\"Converting slaDeadline:\", jobDataForDb.slaDeadline);\n        jobDataForDb.slaDeadline = new Date(jobDataForDb.slaDeadline);\n        console.log(\"Converted slaDeadline to:\", jobDataForDb.slaDeadline, \"type:\", typeof jobDataForDb.slaDeadline);\n      }\n      \n      console.log(\"Date conversion complete. About to call storage.createJob\");\n      \n      // Validate profession exists and is active  \n      const profession = await storage.getProfession(validatedData.professionId);\n      if (!profession || !profession.isActive) {\n        return res.status(400).json({ message: \"Invalid or inactive profession\" });\n      }\n      \n      // Require companyId for authorization\n      if (!validatedData.companyId) {\n        return res.status(400).json({ message: \"Company ID is required\" });\n      }\n      \n      // Skip permission checks in AUTH_BYPASS mode\n      if (process.env.AUTH_BYPASS !== 'true') {\n        // Apenas GESTOR e Gerente de RH podem criar vagas\n        const userRoles = await storage.getUserCompanyRoles(userId);\n        const canCreateJobs = userRoles.some((r: any) => \n          (r.role === 'manager' || r.role === 'hr_manager' || r.role === 'admin') && \n          r.companyId === validatedData.companyId\n        );\n        \n        if (!canCreateJobs) {\n          return res.status(403).json({ message: \"Apenas Gestores e Gerentes de RH podem criar vagas\" });\n        }\n        \n        // Check permission for the specific company\n        const hasPermission = await storage.checkUserPermission(userId, validatedData.companyId, 'create_jobs');\n        if (!hasPermission) {\n          return res.status(403).json({ message: \"Insufficient permissions\" });\n        }\n      }\n      \n      // If vacancyQuantity > 1, create multiple job records\n      const quantity = jobDataForDb.vacancyQuantity || 1;\n      \n      if (quantity > 1) {\n        const createdJobs = [];\n        \n        for (let i = 0; i < quantity; i++) {\n          // Create a copy of job data for each vacancy\n          const jobCopy = { ...jobDataForDb };\n          // Set vacancyQuantity to 1 for each individual job record\n          jobCopy.vacancyQuantity = 1;\n          \n          const job = await storage.createJob(jobCopy);\n          createdJobs.push(job);\n        }\n        \n        console.log(`Created ${quantity} job records`);\n        // Return the first job as response\n        res.status(201).json(createdJobs[0]);\n      } else {\n        const job = await storage.createJob(jobDataForDb);\n        res.status(201).json(job);\n      }\n    } catch (error) {\n      console.error(\"Error creating job:\", error);\n      res.status(400).json({ message: \"Invalid job data\" });\n    }\n  });\n\n  app.put('/api/jobs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user?.id || (req.session as any).user?.id;\n      \n      // First load the job to get its actual companyId for authorization\n      const existingJob = await storage.getJob(id);\n      if (!existingJob) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Check permission using the job's actual companyId\n      if (!existingJob.companyId) {\n        return res.status(400).json({ message: \"Job has no associated company\" });\n      }\n      const hasPermission = await storage.checkUserPermission(userId, existingJob.companyId, 'edit_jobs');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const validatedData = insertJobSchema.partial().parse(req.body);\n      \n      // Validate profession exists and is active if being updated\n      if (validatedData.professionId) {\n        const profession = await storage.getProfession(validatedData.professionId);\n        if (!profession || !profession.isActive) {\n          return res.status(400).json({ message: \"Invalid or inactive profession\" });\n        }\n      }\n      \n      // Prevent changing companyId via update (security measure)\n      delete validatedData.companyId;\n      \n      // If AUTH_BYPASS is enabled, don't include recruiterId if it's the demo user\n      const authBypass = process.env.AUTH_BYPASS === 'true';\n      if (authBypass && validatedData.recruiterId === 'demo-user-bypass') {\n        delete validatedData.recruiterId;\n      }\n      \n      const job = await storage.updateJob(id, validatedData);\n      res.json(job);\n    } catch (error) {\n      console.error(\"Error updating job:\", error);\n      res.status(400).json({ message: \"Invalid job data\" });\n    }\n  });\n\n  // Job status update endpoint\n  app.patch('/api/jobs/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      const userId = req.user?.id || (req.session as any).user?.id;\n      \n      // Validate status\n      const validStatuses = [\"draft\", \"active\", \"paused\", \"closed\", \"expired\", \"aberto\", \"aprovada\", \"em_recrutamento\", \"em_documentacao\"];\n      if (!status || !validStatuses.includes(status)) {\n        return res.status(400).json({ message: \"Invalid status provided\" });\n      }\n      \n      // First load the job to get its actual companyId for authorization\n      const existingJob = await storage.getJob(id);\n      if (!existingJob) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Check permission using the job's actual companyId\n      if (!existingJob.companyId) {\n        return res.status(400).json({ message: \"Job has no associated company\" });\n      }\n      const hasPermission = await storage.checkUserPermission(userId, existingJob.companyId, 'edit_jobs');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      // Update only the status\n      const job = await storage.updateJob(id, { status });\n      res.json(job);\n    } catch (error) {\n      console.error(\"Error updating job status:\", error);\n      res.status(500).json({ message: \"Failed to update job status\" });\n    }\n  });\n\n  app.delete('/api/jobs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user?.id || (req.session as any).user?.id;\n      \n      // First load the job to get its actual companyId for authorization\n      const existingJob = await storage.getJob(id);\n      if (!existingJob) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Check permission using the job's actual companyId\n      if (!existingJob.companyId) {\n        return res.status(400).json({ message: \"Job has no associated company\" });\n      }\n      const hasPermission = await storage.checkUserPermission(userId, existingJob.companyId, 'delete_jobs');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      await storage.deleteJob(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting job:\", error);\n      res.status(500).json({ message: \"Failed to delete job\" });\n    }\n  });\n\n  // Candidate routes\n  app.get('/api/candidates', isAuthenticated, async (req, res) => {\n    try {\n      const candidates = await storage.getCandidates();\n      res.json(candidates);\n    } catch (error) {\n      console.error(\"Error fetching candidates:\", error);\n      res.status(500).json({ message: \"Failed to fetch candidates\" });\n    }\n  });\n\n  app.get('/api/candidates/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const candidate = await storage.getCandidate(id);\n      if (!candidate) {\n        return res.status(404).json({ message: \"Candidate not found\" });\n      }\n      res.json(candidate);\n    } catch (error) {\n      console.error(\"Error fetching candidate:\", error);\n      res.status(500).json({ message: \"Failed to fetch candidate\" });\n    }\n  });\n\n  app.post('/api/candidates', async (req, res) => {\n    try {\n      const validatedData = insertCandidateSchema.parse(req.body);\n      const candidate = await storage.createCandidate(validatedData);\n      res.status(201).json(candidate);\n    } catch (error) {\n      console.error(\"Error creating candidate:\", error);\n      res.status(400).json({ message: \"Invalid candidate data\" });\n    }\n  });\n\n  app.patch('/api/candidates/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const candidate = await storage.updateCandidate(id, req.body);\n      res.json(candidate);\n    } catch (error) {\n      console.error(\"Error updating candidate:\", error);\n      res.status(500).json({ message: \"Failed to update candidate\" });\n    }\n  });\n\n  app.delete('/api/candidates/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCandidate(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting candidate:\", error);\n      res.status(500).json({ message: \"Failed to delete candidate\" });\n    }\n  });\n\n  // Application routes\n  app.get('/api/jobs/:jobId/applications', isAuthenticated, async (req, res) => {\n    try {\n      const { jobId } = req.params;\n      const applications = await storage.getApplicationsByJob(jobId);\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error fetching applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  app.post('/api/applications', async (req, res) => {\n    try {\n      const validatedData = insertApplicationSchema.parse(req.body);\n      const application = await storage.createApplication(validatedData);\n      res.status(201).json(application);\n    } catch (error) {\n      console.error(\"Error creating application:\", error);\n      res.status(400).json({ message: \"Invalid application data\" });\n    }\n  });\n\n  app.get('/api/applications', isAuthenticated, async (req, res) => {\n    try {\n      const { jobId } = req.query;\n      let applications;\n      \n      if (jobId && typeof jobId === 'string') {\n        applications = await storage.getApplicationsByJob(jobId);\n        // Also get candidate and job details for each application\n        const detailedApplications = await storage.getApplicationsWithJobDetails();\n        applications = detailedApplications.filter(app => app.jobId === jobId);\n      } else {\n        applications = await storage.getApplicationsWithJobDetails();\n      }\n      \n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error fetching applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  app.patch('/api/applications/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const application = await storage.updateApplication(id, req.body);\n      res.json(application);\n    } catch (error) {\n      console.error(\"Error updating application:\", error);\n      res.status(500).json({ message: \"Failed to update application\" });\n    }\n  });\n\n  app.patch('/api/applications/:id/status', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      const application = await storage.updateApplicationStatus(id, status);\n      res.json(application);\n    } catch (error) {\n      console.error(\"Error updating application status:\", error);\n      res.status(500).json({ message: \"Failed to update application status\" });\n    }\n  });\n\n  // Expanded Application routes\n  app.get('/api/applications/:id/details', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      const application = await storage.getApplicationWithDetails(id);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      \n      // Check if user has permission to view applications for this company\n      const hasPermission = await storage.checkUserPermission(userId, application.job?.companyId!, 'view_applications');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      res.json(application);\n    } catch (error) {\n      console.error(\"Error fetching application details:\", error);\n      res.status(500).json({ message: \"Failed to fetch application details\" });\n    }\n  });\n\n  app.put('/api/applications/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      // Get application to check company permission\n      const existingApp = await storage.getApplicationWithDetails(id);\n      if (!existingApp) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      \n      const hasPermission = await storage.checkUserPermission(userId, existingApp.job?.companyId!, 'manage_applications');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const validatedData = insertApplicationSchema.partial().parse(req.body);\n      const application = await storage.updateApplication(id, validatedData);\n      res.json(application);\n    } catch (error) {\n      console.error(\"Error updating application:\", error);\n      res.status(400).json({ message: \"Failed to update application\" });\n    }\n  });\n\n  // Selection Stages routes\n  app.get('/api/jobs/:jobId/stages', isAuthenticated, async (req: any, res) => {\n    try {\n      const { jobId } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      // Get job to check company permission\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      const hasPermission = await storage.checkUserPermission(userId, job.companyId!, 'view_jobs');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const stages = await storage.getSelectionStagesByJob(jobId);\n      res.json(stages);\n    } catch (error) {\n      console.error(\"Error fetching selection stages:\", error);\n      res.status(500).json({ message: \"Failed to fetch selection stages\" });\n    }\n  });\n\n  app.post('/api/selection-stages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.session as any).user.id;\n      const validatedData = insertSelectionStageSchema.parse(req.body);\n      \n      // Get job to check company permission\n      const job = await storage.getJob(validatedData.jobId!);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      const hasPermission = await storage.checkUserPermission(userId, job.companyId!, 'edit_jobs');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const stage = await storage.createSelectionStage(validatedData);\n      res.status(201).json(stage);\n    } catch (error) {\n      console.error(\"Error creating selection stage:\", error);\n      res.status(400).json({ message: \"Invalid selection stage data\" });\n    }\n  });\n\n  app.put('/api/selection-stages/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      // Get existing stage to check permissions\n      const stages = await storage.getSelectionStagesByJob(\"dummy\"); // Need to get stage first to check job\n      // Note: This could be improved with a getSelectionStage(id) method\n      \n      const validatedData = insertSelectionStageSchema.partial().parse(req.body);\n      const stage = await storage.updateSelectionStage(id, validatedData);\n      res.json(stage);\n    } catch (error) {\n      console.error(\"Error updating selection stage:\", error);\n      res.status(400).json({ message: \"Failed to update selection stage\" });\n    }\n  });\n\n  app.delete('/api/selection-stages/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      // Note: Should check permissions by getting stage and its job first\n      await storage.deleteSelectionStage(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting selection stage:\", error);\n      res.status(500).json({ message: \"Failed to delete selection stage\" });\n    }\n  });\n\n  app.post('/api/jobs/:jobId/setup-default-stages', isAuthenticated, async (req: any, res) => {\n    try {\n      const { jobId } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      // Get job to check company permission\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      const hasPermission = await storage.checkUserPermission(userId, job.companyId!, 'edit_jobs');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      await storage.setupDefaultSelectionStages(jobId);\n      res.json({ message: \"Default stages created successfully\" });\n    } catch (error) {\n      console.error(\"Error setting up default stages:\", error);\n      res.status(500).json({ message: \"Failed to setup default stages\" });\n    }\n  });\n\n  // Interview routes\n  app.get('/api/applications/:applicationId/interviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const { applicationId } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      // Get application to check company permission\n      const application = await storage.getApplicationWithDetails(applicationId);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      \n      const hasPermission = await storage.checkUserPermission(userId, application.job?.companyId!, 'view_applications');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const interviews = await storage.getInterviewsByApplication(applicationId);\n      res.json(interviews);\n    } catch (error) {\n      console.error(\"Error fetching interviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch interviews\" });\n    }\n  });\n\n  app.get('/api/interviews/upcoming', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.session as any).user.id;\n      const interviewerId = req.query.interviewerId as string;\n      \n      const interviews = await storage.getUpcomingInterviews(interviewerId);\n      res.json(interviews);\n    } catch (error) {\n      console.error(\"Error fetching upcoming interviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch upcoming interviews\" });\n    }\n  });\n\n  app.get('/api/interviews/calendar', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.session as any).user.id;\n      const interviewerId = req.query.interviewerId as string;\n      \n      const calendar = await storage.getInterviewCalendar(interviewerId);\n      res.json(calendar);\n    } catch (error) {\n      console.error(\"Error fetching interview calendar:\", error);\n      res.status(500).json({ message: \"Failed to fetch interview calendar\" });\n    }\n  });\n\n  app.post('/api/interviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.session as any).user.id;\n      const validatedData = insertInterviewSchema.parse(req.body);\n      \n      // Check if user can schedule interviews (interviewer role or manage_applications permission)\n      const hasPermission = await storage.checkUserPermission(userId, \"dummy\", 'interview_candidates'); // Note: Need company context\n      \n      const interview = await storage.createInterview(validatedData);\n      res.status(201).json(interview);\n    } catch (error) {\n      console.error(\"Error creating interview:\", error);\n      res.status(400).json({ message: \"Invalid interview data\" });\n    }\n  });\n\n  app.get('/api/interviews/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      const interview = await storage.getInterviewWithDetails(id);\n      if (!interview) {\n        return res.status(404).json({ message: \"Interview not found\" });\n      }\n      \n      res.json(interview);\n    } catch (error) {\n      console.error(\"Error fetching interview:\", error);\n      res.status(500).json({ message: \"Failed to fetch interview\" });\n    }\n  });\n\n  app.put('/api/interviews/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      const validatedData = insertInterviewSchema.partial().parse(req.body);\n      const interview = await storage.updateInterview(id, validatedData);\n      res.json(interview);\n    } catch (error) {\n      console.error(\"Error updating interview:\", error);\n      res.status(400).json({ message: \"Failed to update interview\" });\n    }\n  });\n\n  // Application Stage Progress routes\n  app.get('/api/applications/:applicationId/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const { applicationId } = req.params;\n      const userId = (req.session as any).user.id;\n      \n      const progress = await storage.getApplicationProgress(applicationId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching application progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch application progress\" });\n    }\n  });\n\n  app.post('/api/applications/:applicationId/advance-stage', isAuthenticated, async (req: any, res) => {\n    try {\n      const { applicationId } = req.params;\n      const { stageId, score, feedback } = req.body;\n      const userId = (req.session as any).user.id;\n      \n      await storage.advanceApplicationStage(applicationId, stageId, score, feedback);\n      res.json({ message: \"Application stage advanced successfully\" });\n    } catch (error) {\n      console.error(\"Error advancing application stage:\", error);\n      res.status(500).json({ message: \"Failed to advance application stage\" });\n    }\n  });\n\n  // Selection Process Analytics routes\n  app.get('/api/analytics/selection-process', isAuthenticated, async (req: any, res) => {\n    try {\n      const companyId = req.query.companyId as string;\n      const timeframe = req.query.timeframe as string;\n      \n      const metrics = await storage.getSelectionProcessMetrics(companyId, timeframe);\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching selection process metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch selection process metrics\" });\n    }\n  });\n\n  app.get('/api/analytics/conversion-rates', isAuthenticated, async (req: any, res) => {\n    try {\n      const companyId = req.query.companyId as string;\n      \n      const conversionRates = await storage.getConversionRates(companyId);\n      res.json(conversionRates);\n    } catch (error) {\n      console.error(\"Error fetching conversion rates:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversion rates\" });\n    }\n  });\n\n  app.get('/api/analytics/time-to-hire', isAuthenticated, async (req: any, res) => {\n    try {\n      const companyId = req.query.companyId as string;\n      \n      const avgTimeToHire = await storage.getAverageTimeToHire(companyId);\n      res.json({ averageTimeToHire: avgTimeToHire });\n    } catch (error) {\n      console.error(\"Error fetching time to hire:\", error);\n      res.status(500).json({ message: \"Failed to fetch time to hire\" });\n    }\n  });\n\n  // Permission routes\n  app.get('/api/permissions/user-roles', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.session as any).user.id;\n      const roles = await storage.getUserCompanyRoles(userId);\n      res.json(roles);\n    } catch (error) {\n      console.error(\"Error fetching user roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch user roles\" });\n    }\n  });\n\n  app.get('/api/permissions/:companyId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.session as any).user.id;\n      const { companyId } = req.params;\n      const permissions = await storage.getUserPermissions(userId, companyId);\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching user permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch user permissions\" });\n    }\n  });\n\n  app.post('/api/permissions/assign', isAuthenticated, requirePermission('manage_permissions'), async (req, res) => {\n    try {\n      const validatedData = insertUserCompanyRoleSchema.parse(req.body);\n      const assignment = await storage.assignUserToCompany(validatedData);\n      res.status(201).json(assignment);\n    } catch (error) {\n      console.error(\"Error assigning user to company:\", error);\n      res.status(400).json({ message: \"Invalid assignment data\" });\n    }\n  });\n\n  app.put('/api/permissions/:id/role', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { role } = req.body;\n      const userId = (req.session as any).user.id;\n      \n      // First get the assignment to verify company ownership\n      const assignment = await storage.getUserCompanyRoleById(id);\n      if (!assignment) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n      \n      // Check if user has permission to manage roles in the assignment's company\n      if (!assignment.companyId) {\n        return res.status(400).json({ message: \"Invalid assignment - missing company ID\" });\n      }\n      const hasPermission = await storage.checkUserPermission(userId, assignment.companyId, 'manage_permissions');\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      // Validate role value\n      const roleSchema = z.enum(['admin', 'hr_manager', 'recruiter', 'interviewer', 'viewer']);\n      const validatedRole = roleSchema.parse(role);\n      \n      const updatedRole = await storage.updateUserCompanyRole(id, validatedRole);\n      res.json(updatedRole);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  app.delete('/api/permissions/:userId/:companyId', isAuthenticated, requirePermission('manage_permissions'), async (req, res) => {\n    try {\n      const { userId, companyId } = req.params;\n      await storage.removeUserFromCompany(userId, companyId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing user from company:\", error);\n      res.status(500).json({ message: \"Failed to remove user from company\" });\n    }\n  });\n\n  app.get('/api/permissions/roles/permissions', isAuthenticated, async (req, res) => {\n    try {\n      const permissions = await storage.getRolePermissions();\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching role permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch role permissions\" });\n    }\n  });\n\n  app.post('/api/permissions/setup-defaults', isAuthenticated, async (req: any, res) => {\n    try {\n      // Only allow system admins to setup defaults (users with admin role globally)\n      const userId = (req.session as any).user.id;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only system administrators can setup default permissions\" });\n      }\n      \n      await storage.setupDefaultRolePermissions();\n      res.json({ message: \"Default permissions setup completed\" });\n    } catch (error) {\n      console.error(\"Error setting up default permissions:\", error);\n      res.status(500).json({ message: \"Failed to setup default permissions\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":50608},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/pages/LoginDemo.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Briefcase, Mail, Lock, User, ArrowRight, CheckCircle2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  firstName: z.string().min(2, \"Nome é obrigatório\"),\n  lastName: z.string().min(2, \"Sobrenome é obrigatório\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function LoginDemo() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const handleLogin = async (data: LoginForm) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      \n      toast({\n        title: \"Login realizado com sucesso\",\n        description: `Bem-vindo de volta!`,\n      });\n\n      // Invalidate auth query to update UI\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Redirect to dashboard\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Erro no login\",\n        description: error.message || \"Email ou senha inválidos\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegister = async (data: RegisterForm) => {\n    setIsLoading(true);\n    try {\n      await apiRequest(\"POST\", \"/api/auth/register\", data);\n      \n      toast({\n        title: \"Conta criada com sucesso\",\n        description: \"Você já está logado!\",\n      });\n\n      // Invalidate auth query to update UI\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Redirect to dashboard\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Erro no registro\",\n        description: error.message || \"Não foi possível criar a conta\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-600 via-indigo-700 to-purple-800 flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-white/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-white/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-white/5 rounded-full blur-3xl\"></div>\n      </div>\n\n      <div className=\"w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-8 relative z-10\">\n        {/* Left side - Branding */}\n        <div className=\"hidden lg:flex flex-col justify-center text-white space-y-8 p-8\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-14 h-14 bg-white/20 backdrop-blur-lg rounded-2xl flex items-center justify-center\">\n                <Briefcase className=\"w-8 h-8 text-white\" />\n              </div>\n              <h1 className=\"text-5xl font-bold\">VagasPro</h1>\n            </div>\n            <p className=\"text-2xl text-white/90 font-light\">\n              Sistema Inteligente de Gestão de Vagas\n            </p>\n          </div>\n\n          <div className=\"space-y-6 mt-12\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <CheckCircle2 className=\"w-5 h-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">Gestão Completa de Vagas</h3>\n                <p className=\"text-white/80\">Controle total do processo de recrutamento</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <CheckCircle2 className=\"w-5 h-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">Dashboard Analítico</h3>\n                <p className=\"text-white/80\">Métricas e relatórios em tempo real</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <CheckCircle2 className=\"w-5 h-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">Controle de Permissões</h3>\n                <p className=\"text-white/80\">Gestão segura e hierarquizada</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right side - Login/Register Form */}\n        <div className=\"flex items-center justify-center\">\n          <Card className=\"w-full max-w-md bg-white/95 backdrop-blur-xl border-0 shadow-2xl\">\n            <CardHeader className=\"text-center space-y-4 pb-8\">\n              {/* Mobile logo */}\n              <div className=\"lg:hidden flex items-center justify-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-indigo-700 rounded-xl flex items-center justify-center\">\n                  <Briefcase className=\"w-7 h-7 text-white\" />\n                </div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-700 bg-clip-text text-transparent\">\n                  VagasPro\n                </h1>\n              </div>\n\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">\n                  {isLogin ? \"Bem-vindo de volta!\" : \"Crie sua conta\"}\n                </h2>\n                <p className=\"text-gray-600 mt-2\">\n                  {isLogin \n                    ? \"Acesse sua conta para continuar\" \n                    : \"Comece a gerenciar suas vagas hoje\"}\n                </p>\n              </div>\n\n              <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                <button\n                  onClick={() => setIsLogin(true)}\n                  className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${\n                    isLogin\n                      ? \"bg-white text-gray-900 shadow-sm\"\n                      : \"text-gray-600 hover:text-gray-900\"\n                  }`}\n                  data-testid=\"button-switch-login\"\n                >\n                  Login\n                </button>\n                <button\n                  onClick={() => setIsLogin(false)}\n                  className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${\n                    !isLogin\n                      ? \"bg-white text-gray-900 shadow-sm\"\n                      : \"text-gray-600 hover:text-gray-900\"\n                  }`}\n                  data-testid=\"button-switch-register\"\n                >\n                  Cadastro\n                </button>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"pb-8\">\n              {isLogin ? (\n                <form className=\"space-y-5\" onSubmit={loginForm.handleSubmit(handleLogin)}>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"text-gray-700 font-medium\">Email</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"seu@email.com\"\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...loginForm.register(\"email\")}\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n                    {loginForm.formState.errors.email && (\n                      <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                        {loginForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\" className=\"text-gray-700 font-medium\">Senha</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        id=\"password\"\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...loginForm.register(\"password\")}\n                        data-testid=\"input-password\"\n                      />\n                    </div>\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-600 flex items-center gap-1\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white font-medium shadow-lg hover:shadow-xl transition-all\"\n                    data-testid=\"button-login\"\n                  >\n                    <span className=\"flex items-center gap-2\">\n                      {isLoading ? \"Entrando...\" : \"Entrar\"}\n                      {!isLoading && <ArrowRight className=\"w-5 h-5\" />}\n                    </span>\n                  </Button>\n                </form>\n              ) : (\n                <form className=\"space-y-5\" onSubmit={registerForm.handleSubmit(handleRegister)}>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\" className=\"text-gray-700 font-medium\">Nome</Label>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                        <Input\n                          id=\"firstName\"\n                          placeholder=\"João\"\n                          className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                          {...registerForm.register(\"firstName\")}\n                          data-testid=\"input-first-name\"\n                        />\n                      </div>\n                      {registerForm.formState.errors.firstName && (\n                        <p className=\"text-sm text-red-600\">\n                          {registerForm.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\" className=\"text-gray-700 font-medium\">Sobrenome</Label>\n                      <Input\n                        id=\"lastName\"\n                        placeholder=\"Silva\"\n                        className=\"h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...registerForm.register(\"lastName\")}\n                        data-testid=\"input-last-name\"\n                      />\n                      {registerForm.formState.errors.lastName && (\n                        <p className=\"text-sm text-red-600\">\n                          {registerForm.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-email\" className=\"text-gray-700 font-medium\">Email</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        placeholder=\"seu@email.com\"\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...registerForm.register(\"email\")}\n                        data-testid=\"input-register-email\"\n                      />\n                    </div>\n                    {registerForm.formState.errors.email && (\n                      <p className=\"text-sm text-red-600\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-password\" className=\"text-gray-700 font-medium\">Senha</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        placeholder=\"Mínimo 6 caracteres\"\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                        {...registerForm.register(\"password\")}\n                        data-testid=\"input-register-password\"\n                      />\n                    </div>\n                    {registerForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-600\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white font-medium shadow-lg hover:shadow-xl transition-all\"\n                    data-testid=\"button-register\"\n                  >\n                    <span className=\"flex items-center gap-2\">\n                      {isLoading ? \"Criando conta...\" : \"Criar conta\"}\n                      {!isLoading && <ArrowRight className=\"w-5 h-5\" />}\n                    </span>\n                  </Button>\n                </form>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15944},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"replit.md":{"content":"# Overview\n\nThis is a job management system (VagasPro) built with React and Express, designed for companies to manage job postings, applications, and recruitment workflows. The application provides a comprehensive dashboard for tracking hiring metrics, managing companies and cost centers, and analyzing recruitment performance through various reports and visualizations.\n\n**CURRENT STATE**: Authentication bypass mode is enabled for direct access without login/password requirements. Users can access the full application immediately without creating accounts.\n\n# Recent Changes (October 17, 2025)\n\n## Modern Login Screen Implementation\n- **Created**: Beautiful, modern login/registration interface with glassmorphism design\n- **Features**: \n  - Gradient background (blue → indigo → purple) with decorative blur elements\n  - Two-column layout on desktop: branding information + login form\n  - Responsive mobile design with optimized single-column layout\n  - Toggle between Login and Registration forms\n  - Icon-enhanced input fields (Mail, Lock, User icons)\n  - Form validation with real-time error messages\n  - Loading states with animated spinners\n  - Gradient buttons with smooth hover effects\n- **Routes**: \n  - Main login at `/` (when not authenticated)\n  - Demo preview at `/login-demo` (accessible anytime)\n- **Integration**: Fully integrated with existing authentication system (simpleAuth.ts)\n\n## Job Status Updates\n- **Added new statuses**: \"dp\", \"em_mobilizacao\", \"cancelada\"\n- **Removed status**: \"paused\"\n- **Updated**: All status configurations in shared/constants.ts and frontend components\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Extensive use of shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state and data fetching\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation using @hookform/resolvers\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful API with JSON responses\n- **Middleware**: Custom logging, JSON parsing, and error handling middleware\n- **Development Server**: Custom Vite integration for hot reloading in development\n\n## Database & ORM\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **ORM**: Drizzle ORM with Drizzle Kit for migrations\n- **Schema**: Comprehensive relational schema with users, companies, cost centers, jobs, and applications\n- **Connection**: Neon serverless client with WebSocket support for serverless environments\n\n## Authentication & Authorization\n- **CURRENT**: Simple local authentication system with bypass mode enabled\n- **Bypass Mode**: AUTH_BYPASS is active - provides immediate access as demo admin user\n- **Login Page**: Modern, responsive login/registration interface with glassmorphism design\n- **Session Management**: Express sessions with in-memory store for development\n- **Security**: BCrypt password hashing, HTTP-only cookies, secure sessions\n- **Note**: Authentication can be re-enabled by removing the temporary bypass flag\n- **Demo Route**: `/login-demo` available to preview the login screen design\n\n## Data Layer Design\n- **Storage Pattern**: Repository pattern with IStorage interface\n- **Type Safety**: Full TypeScript integration with Drizzle schema types\n- **Validation**: Zod schemas for API input validation and type inference\n- **Relationships**: Well-defined foreign key relationships between entities\n- **Parametrized Systems**: Work scales and benefits are now fully parametrized and managed via Settings page\n\n## UI/UX Architecture\n- **Design System**: Consistent component library with shadcn/ui\n- **Responsive Design**: Mobile-first approach with responsive breakpoints\n- **Charts & Visualization**: Recharts library for dashboard analytics\n- **Icons**: Font Awesome for iconography\n- **Loading States**: Skeleton components and loading indicators throughout\n\n## Development Workflow\n- **Build Process**: Separate client (Vite) and server (esbuild) builds\n- **Development**: Integrated development server with HMR support\n- **Code Quality**: TypeScript strict mode, ESLint integration\n- **Path Aliases**: Configured path mapping for clean imports (@/, @shared/, etc.)\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **WebSocket Support**: Real-time database connections via ws library\n\n## Authentication Services\n- **Replit Auth**: OpenID Connect authentication provider\n- **Session Storage**: PostgreSQL-backed session persistence\n\n## UI & Styling Libraries\n- **Radix UI**: Headless UI primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide Icons**: Icon library for UI elements\n- **Font Awesome**: Additional icon library\n- **Google Fonts**: Inter font family for typography\n\n## Development & Build Tools\n- **Vite**: Frontend build tool with plugins for React and development features\n- **TypeScript**: Type checking and compilation\n- **PostCSS**: CSS processing with Tailwind CSS\n- **ESBuild**: Fast JavaScript bundler for server-side code\n\n## Data Visualization\n- **Recharts**: React charting library for dashboard analytics\n- **Chart.js**: Alternative charting capabilities\n\n## Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional CSS class utilities\n- **class-variance-authority**: Component variant management\n- **cmdk**: Command palette functionality\n- **memoizee**: Function memoization for performance optimization","size_bytes":5820},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/index.ts":{"content":"import dotenv from \"dotenv\";\n// Load environment variables first\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2149},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"./Sidebar\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      navigate(\"/\");\n    }\n  }, [isAuthenticated, isLoading, navigate]);\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-background\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center animate-pulse\">\n            <i className=\"fas fa-briefcase text-primary-foreground\"></i>\n          </div>\n          <span className=\"text-foreground\">Carregando...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\n        <main className=\"flex-1 overflow-y-auto bg-background p-4 sm:p-6 lg:p-8\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1303},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/TopBar.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Plus, Menu, LogOut, Search, Shield } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface TopBarProps {\n  title?: string;\n  showCreateButton?: boolean;\n  onCreateClick?: () => void;\n  createButtonText?: string;\n}\n\nexport default function TopBar({\n  title = \"Dashboard\",\n  showCreateButton = false,\n  onCreateClick,\n  createButtonText = \"Nova Vaga\",\n}: TopBarProps) {\n  const { toast } = useToast();\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n  const [, setLocation] = useLocation();\n\n  // Check if user is in AUTH_BYPASS mode\n  const { data: user } = useQuery<{ id: string; email: string; name?: string }>({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  const isAuthBypass = user?.id === \"demo-user-bypass\";\n\n  const handleLogout = async () => {\n    setIsLoggingOut(true);\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n      \n      toast({\n        title: \"Logout realizado com sucesso\",\n        description: \"Até logo!\",\n      });\n\n      // Invalidate auth query to update UI\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Redirect to login page\n      setLocation(\"/login-demo\");\n    } catch (error: any) {\n      toast({\n        title: \"Erro no logout\",\n        description: error.message || \"Tente novamente\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoggingOut(false);\n    }\n  };\n\n  return (\n    <header className=\"bg-card/80 backdrop-blur-sm border-b border-border/40 px-4 py-3 sm:px-6 lg:px-8 sticky top-0 z-40\">\n      <div className=\"flex items-center justify-between\">\n        {/* Left section */}\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden p-2 h-auto\"\n            data-testid=\"button-mobile-menu\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          \n          <div className=\"flex flex-col\">\n            <div className=\"flex items-center gap-2\">\n              <h2 className=\"text-2xl font-bold text-foreground tracking-tight\">{title}</h2>\n              {isAuthBypass ? (\n                <Badge \n                  variant=\"outline\" \n                  className=\"bg-amber-500/10 text-amber-600 dark:text-amber-400 border-amber-500/20 flex items-center gap-1\"\n                  data-testid=\"badge-auth-mode\"\n                >\n                  <Shield className=\"h-3 w-3\" />\n                  Modo Desenvolvimento\n                </Badge>\n              ) : (\n                <Badge \n                  variant=\"outline\" \n                  className=\"bg-green-500/10 text-green-600 dark:text-green-400 border-green-500/20 flex items-center gap-1\"\n                  data-testid=\"badge-auth-mode\"\n                >\n                  <Shield className=\"h-3 w-3\" />\n                  Modo Produção\n                </Badge>\n              )}\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              {new Date().toLocaleDateString('pt-BR', { \n                weekday: 'long', \n                year: 'numeric', \n                month: 'long', \n                day: 'numeric' \n              })}\n            </p>\n          </div>\n        </div>\n\n        {/* Center section - Search */}\n        <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n          <div className=\"relative w-full\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              placeholder=\"Buscar em todo o sistema...\"\n              className=\"pl-10 bg-background/50 border-border/50 focus:bg-background transition-colors\"\n            />\n          </div>\n        </div>\n\n        {/* Right section */}\n        <div className=\"flex items-center space-x-3\">\n          {/* Search button for mobile */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden p-2 h-auto\"\n          >\n            <Search className=\"h-5 w-5\" />\n          </Button>\n\n          {/* Notifications */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"relative p-2 h-auto\"\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"h-5 w-5\" />\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n            >\n              3\n            </Badge>\n          </Button>\n\n          {/* Create button */}\n          {showCreateButton && onCreateClick && (\n            <Button \n              onClick={onCreateClick} \n              data-testid=\"button-create-job\"\n              className=\"shadow-lg hover:shadow-xl transition-shadow\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {createButtonText}\n            </Button>\n          )}\n\n          {/* Logout button */}\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleLogout}\n            disabled={isLoggingOut}\n            data-testid=\"button-logout\"\n            className=\"transition-all hover:scale-105\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            {isLoggingOut ? \"Saindo...\" : \"Sair\"}\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5743},"client/src/components/JobModal.tsx":{"content":"import { useState } from \"react\";\nimport React from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertJobSchema, type InsertJob, type JobWithDetails, type CompaniesListResponse, type Profession, type Client, type WorkScale } from \"@shared/schema\";\nimport { getAllCities } from \"@shared/constants\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst jobFormSchema = z.object({\n  professionId: z.string().min(1, \"Profissão é obrigatória\"),\n  description: z.string().optional().default(\"\"),\n  companyId: z.string().min(1, \"Empresa é obrigatória\"),\n  costCenterId: z.string().optional(),\n  recruiterId: z.string().optional(),\n  department: z.string().optional().default(\"\"),\n  location: z.string().optional().default(\"\"),\n  contractType: z.enum([\"clt\", \"pj\", \"freelancer\", \"estagio\", \"temporario\"]).default(\"clt\"),\n  jobType: z.enum([\"produtiva\", \"improdutiva\"]).optional(),\n  status: z.enum([\"active\", \"closed\", \"expired\", \"aberto\", \"aprovada\", \"em_recrutamento\", \"em_documentacao\", \"dp\", \"em_mobilizacao\", \"cancelada\"]).default(\"aberto\"),\n  \n  // Novos campos detalhados\n  openingDate: z.string().optional(),\n  startDate: z.string().optional(),\n  openingReason: z.enum([\"substituicao\", \"aumento_quadro\"]).optional(),\n  replacementEmployeeName: z.string().optional(),\n  ageRangeMin: z.string().optional(),\n  ageRangeMax: z.string().optional(),\n  specifications: z.string().optional(),\n  clientId: z.string().optional(),\n  vacancyQuantity: z.string().optional().default(\"1\"),\n  gender: z.enum([\"masculino\", \"feminino\", \"indiferente\"]).default(\"indiferente\"),\n  workScaleId: z.string().optional(),\n  workHours: z.string().optional(),\n  \n  salaryMin: z.string().optional().default(\"\"),\n  salaryMax: z.string().optional().default(\"\"),\n  bonus: z.string().optional(),\n  hasHazardPay: z.boolean().default(false),\n  unhealthinessLevel: z.enum([\"nao\", \"10\", \"20\", \"40\"]).default(\"nao\"),\n  \n  hasMealVoucher: z.boolean().default(false),\n  hasFoodVoucher: z.boolean().default(false),\n  hasTransportVoucher: z.boolean().default(false),\n  hasHealthInsurance: z.boolean().default(false),\n  hasChartered: z.boolean().default(false),\n});\n\ntype JobFormData = z.infer<typeof jobFormSchema>;\n\ninterface JobModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  jobId?: string;\n}\n\nexport default function JobModal({ isOpen, onClose, jobId }: JobModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!jobId;\n  const [cities] = useState(getAllCities());\n  const [professionPopoverOpen, setProfessionPopoverOpen] = useState(false);\n\n  const { data: companies } = useQuery<CompaniesListResponse>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const { data: professions } = useQuery<Profession[]>({\n    queryKey: [\"/api/professions\"],\n  });\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: recruiters } = useQuery({\n    queryKey: [\"/api/recruiters\"],\n  });\n\n  const { data: workScales } = useQuery<WorkScale[]>({\n    queryKey: [\"/api/work-scales\"],\n  });\n\n  const { data: jobData } = useQuery<JobWithDetails>({\n    queryKey: [\"/api/jobs\", jobId],\n    enabled: isEditing,\n  });\n\n  const form = useForm<JobFormData>({\n    resolver: zodResolver(jobFormSchema),\n    defaultValues: {\n      professionId: \"\",\n      description: \"\",\n      recruiterId: \"\",\n      department: \"\",\n      location: \"\",\n      contractType: \"clt\",\n      status: \"aberto\",\n      vacancyQuantity: \"1\",\n      gender: \"indiferente\",\n      unhealthinessLevel: \"nao\",\n      hasHazardPay: false,\n      hasMealVoucher: false,\n      hasFoodVoucher: false,\n      hasTransportVoucher: false,\n      hasHealthInsurance: false,\n      hasChartered: false,\n    },\n  });\n\n  // Update form when job data is loaded\n  React.useEffect(() => {\n    if (isEditing && jobData && !form.formState.isDirty) {\n      form.reset({\n        professionId: jobData.professionId || \"\",\n        description: jobData.description || \"\",\n        department: jobData.department || \"\",\n        location: jobData.location || \"\",\n        companyId: jobData.companyId || undefined,\n        costCenterId: jobData.costCenterId || undefined,\n        recruiterId: jobData.recruiterId || \"\",\n        contractType: jobData.contractType || \"clt\",\n        jobType: jobData.jobType || undefined,\n        status: jobData.status || \"aberto\",\n        salaryMin: jobData.salaryMin || \"\",\n        openingDate: jobData.openingDate ? new Date(jobData.openingDate).toISOString().split('T')[0] : undefined,\n        startDate: jobData.startDate ? new Date(jobData.startDate).toISOString().split('T')[0] : undefined,\n        openingReason: jobData.openingReason || undefined,\n        replacementEmployeeName: jobData.replacementEmployeeName || \"\",\n        ageRangeMin: jobData.ageRangeMin?.toString() || \"\",\n        ageRangeMax: jobData.ageRangeMax?.toString() || \"\",\n        specifications: jobData.specifications || \"\",\n        clientId: jobData.clientId || \"\",\n        vacancyQuantity: jobData.vacancyQuantity?.toString() || \"1\",\n        gender: jobData.gender || \"indiferente\",\n        workScaleId: jobData.workScaleId || undefined,\n        workHours: jobData.workHours || \"\",\n        bonus: jobData.bonus || \"\",\n        hasHazardPay: jobData.hasHazardPay || false,\n        unhealthinessLevel: jobData.unhealthinessLevel || \"nao\",\n        hasMealVoucher: false,\n        hasFoodVoucher: false,\n        hasTransportVoucher: false,\n        hasHealthInsurance: false,\n        hasChartered: false,\n      });\n    }\n  }, [isEditing, jobData, form]);\n\n  const { data: costCenters } = useQuery({\n    queryKey: [\"/api/companies\", form.watch(\"companyId\"), \"cost-centers\"],\n    enabled: !!form.watch(\"companyId\"),\n  });\n\n  // Watch professionId to show union\n  const selectedProfessionId = form.watch(\"professionId\");\n  const selectedProfession = professions?.find(p => p.id === selectedProfessionId);\n\n  // Watch openingReason to show replacement employee field\n  const openingReason = form.watch(\"openingReason\");\n\n  const createJobMutation = useMutation({\n    mutationFn: async (data: JobFormData) => {\n      // Convert form data to API format and remove invalid fields\n      const apiData: any = {\n        professionId: data.professionId,\n        companyId: data.companyId,\n        description: data.description || undefined,\n        costCenterId: data.costCenterId || undefined,\n        recruiterId: data.recruiterId || undefined,\n        department: data.department || undefined,\n        location: data.location || undefined,\n        contractType: data.contractType,\n        jobType: data.jobType || undefined,\n        salaryMin: data.salaryMin || undefined,\n        status: data.status,\n        clientId: data.clientId || undefined,\n        vacancyQuantity: data.vacancyQuantity ? parseInt(data.vacancyQuantity) : 1,\n        gender: data.gender || undefined,\n        workScaleId: data.workScaleId || undefined,\n        workHours: data.workHours || undefined,\n        bonus: data.bonus || undefined,\n        hasHazardPay: data.hasHazardPay || undefined,\n        unhealthinessLevel: data.unhealthinessLevel || undefined,\n        openingDate: data.openingDate ? new Date(data.openingDate).toISOString() : undefined,\n        startDate: data.startDate ? new Date(data.startDate).toISOString() : undefined,\n        openingReason: data.openingReason || undefined,\n        replacementEmployeeName: data.replacementEmployeeName || undefined,\n        ageRangeMin: data.ageRangeMin ? parseInt(data.ageRangeMin) : undefined,\n        ageRangeMax: data.ageRangeMax ? parseInt(data.ageRangeMax) : undefined,\n        specifications: data.specifications || undefined,\n      };\n      \n      // Remove undefined values to keep payload clean\n      Object.keys(apiData).forEach(key => {\n        if (apiData[key] === undefined || apiData[key] === \"\" || apiData[key] === null) {\n          delete apiData[key];\n        }\n      });\n      \n      const response = await apiRequest(\"POST\", \"/api/jobs\", apiData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Vaga criada com sucesso!\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar vaga. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateJobMutation = useMutation({\n    mutationFn: async (data: Partial<JobFormData>) => {\n      // Convert form data to API format and remove invalid fields\n      const apiData: any = {\n        professionId: data.professionId,\n        description: data.description || undefined,\n        costCenterId: data.costCenterId || undefined,\n        recruiterId: data.recruiterId || undefined,\n        department: data.department || undefined,\n        location: data.location || undefined,\n        contractType: data.contractType,\n        jobType: data.jobType || undefined,\n        salaryMin: data.salaryMin || undefined,\n        status: data.status,\n        clientId: data.clientId || undefined,\n        vacancyQuantity: data.vacancyQuantity ? parseInt(data.vacancyQuantity) : undefined,\n        gender: data.gender || undefined,\n        workScaleId: data.workScaleId || undefined,\n        workHours: data.workHours || undefined,\n        bonus: data.bonus || undefined,\n        hasHazardPay: data.hasHazardPay || undefined,\n        unhealthinessLevel: data.unhealthinessLevel || undefined,\n        openingDate: data.openingDate ? new Date(data.openingDate).toISOString() : undefined,\n        startDate: data.startDate ? new Date(data.startDate).toISOString() : undefined,\n        openingReason: data.openingReason || undefined,\n        replacementEmployeeName: data.replacementEmployeeName || undefined,\n        ageRangeMin: data.ageRangeMin ? parseInt(data.ageRangeMin) : undefined,\n        ageRangeMax: data.ageRangeMax ? parseInt(data.ageRangeMax) : undefined,\n        specifications: data.specifications || undefined,\n      };\n      \n      // Remove undefined, empty string, and null values\n      Object.keys(apiData).forEach(key => {\n        if (apiData[key] === undefined || apiData[key] === \"\" || apiData[key] === null) {\n          delete apiData[key];\n        }\n      });\n      \n      const response = await apiRequest(\"PUT\", `/api/jobs/${jobId}`, apiData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\", jobId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Vaga atualizada com sucesso!\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar vaga. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: JobFormData) => {\n    if (isEditing) {\n      updateJobMutation.mutate(data);\n    } else {\n      createJobMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Editar Vaga\" : \"Nova Vaga\"}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Seção 1: Informações Básicas */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Informações Básicas</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"professionId\"\n                  render={({ field }) => {\n                    const activeProfessions = Array.isArray(professions) \n                      ? professions.filter(p => p.isActive).sort((a, b) => \n                          (a.category || \"\").localeCompare(b.category || \"\") || a.name.localeCompare(b.name)\n                        )\n                      : [];\n                    \n                    const selectedProfession = activeProfessions.find(p => p.id === field.value);\n                    \n                    return (\n                      <FormItem className=\"flex flex-col\">\n                        <FormLabel>Profissão *</FormLabel>\n                        <Popover open={professionPopoverOpen} onOpenChange={setProfessionPopoverOpen}>\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant=\"outline\"\n                                role=\"combobox\"\n                                data-testid=\"select-profession\"\n                                className={cn(\n                                  \"w-full justify-between\",\n                                  !field.value && \"text-muted-foreground\"\n                                )}\n                              >\n                                {selectedProfession ? (\n                                  <>\n                                    <span className=\"text-xs text-muted-foreground mr-2\">\n                                      {selectedProfession.category}\n                                    </span>\n                                    {selectedProfession.name}\n                                  </>\n                                ) : (\n                                  \"Digite para buscar uma profissão...\"\n                                )}\n                                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-[400px] p-0\">\n                            <Command>\n                              <CommandInput \n                                placeholder=\"Buscar profissão...\" \n                                data-testid=\"input-search-profession\"\n                              />\n                              <CommandList>\n                                <CommandEmpty>Nenhuma profissão encontrada.</CommandEmpty>\n                                <CommandGroup>\n                                  {activeProfessions.map((profession) => (\n                                    <CommandItem\n                                      key={profession.id}\n                                      value={`${profession.category} ${profession.name}`}\n                                      onSelect={() => {\n                                        form.setValue(\"professionId\", profession.id);\n                                        setProfessionPopoverOpen(false);\n                                      }}\n                                      data-testid={`profession-option-${profession.id}`}\n                                    >\n                                      <Check\n                                        className={cn(\n                                          \"mr-2 h-4 w-4\",\n                                          profession.id === field.value\n                                            ? \"opacity-100\"\n                                            : \"opacity-0\"\n                                        )}\n                                      />\n                                      <span className=\"text-xs text-muted-foreground mr-2\">\n                                        {profession.category}\n                                      </span>\n                                      {profession.name}\n                                    </CommandItem>\n                                  ))}\n                                </CommandGroup>\n                              </CommandList>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                        <FormMessage />\n                      </FormItem>\n                    );\n                  }}\n                />\n\n                {selectedProfession?.union && (\n                  <FormItem>\n                    <FormLabel>Sindicato</FormLabel>\n                    <FormControl>\n                      <Input value={selectedProfession.union} disabled className=\"bg-muted\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n\n                <FormField\n                  control={form.control}\n                  name=\"companyId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Empresa</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-company\">\n                            <SelectValue placeholder=\"Selecione uma empresa\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Array.isArray(companies) && companies.map((company: any) => (\n                            <SelectItem key={company.id} value={company.id}>\n                              {company.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"clientId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cliente</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-client\">\n                            <SelectValue placeholder=\"Selecione o cliente\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {clients?.map((client) => (\n                            <SelectItem key={client.id} value={client.id}>\n                              {client.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"recruiterId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Recrutador</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-recruiter\">\n                            <SelectValue placeholder=\"Selecione um recrutador\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Array.isArray(recruiters) && recruiters.map((recruiter: any) => (\n                            <SelectItem key={recruiter.id} value={recruiter.id}>\n                              {recruiter.firstName} {recruiter.lastName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Seção 2: Detalhes da Vaga */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Detalhes da Vaga</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"openingDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data de Abertura</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-opening-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data de Início</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-start-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"openingReason\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Motivo da Abertura</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-opening-reason\">\n                            <SelectValue placeholder=\"Selecione o motivo\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"substituicao\">Substituição</SelectItem>\n                          <SelectItem value=\"aumento_quadro\">Aumento de Quadro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {openingReason === \"substituicao\" && (\n                  <FormField\n                    control={form.control}\n                    name=\"replacementEmployeeName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nome do Colaborador a Substituir</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Digite o nome do colaborador\" \n                            {...field} \n                            data-testid=\"input-replacement-employee\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n                <FormField\n                  control={form.control}\n                  name=\"vacancyQuantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantidade de Vagas</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"1\" placeholder=\"1\" {...field} data-testid=\"input-vacancy-quantity\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"ageRangeMin\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Idade Mínima</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"18\" {...field} data-testid=\"input-age-min\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"ageRangeMax\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Idade Máxima</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"65\" {...field} data-testid=\"input-age-max\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"gender\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sexo</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-gender\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"masculino\">Masculino</SelectItem>\n                          <SelectItem value=\"feminino\">Feminino</SelectItem>\n                          <SelectItem value=\"indiferente\">Indiferente</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Departamento</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-department\">\n                            <SelectValue placeholder=\"Selecione um departamento\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Tecnologia\">Tecnologia</SelectItem>\n                          <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                          <SelectItem value=\"Design\">Design</SelectItem>\n                          <SelectItem value=\"Vendas\">Vendas</SelectItem>\n                          <SelectItem value=\"Recursos Humanos\">Recursos Humanos</SelectItem>\n                          <SelectItem value=\"Financeiro\">Financeiro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cidade</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-location\">\n                            <SelectValue placeholder=\"Selecione a cidade\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {cities.map((city) => (\n                            <SelectItem key={city} value={city}>\n                              {city}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"contractType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tipo de Contrato</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-contract-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"clt\">CLT</SelectItem>\n                          <SelectItem value=\"pj\">PJ</SelectItem>\n                          <SelectItem value=\"freelancer\">Freelancer</SelectItem>\n                          <SelectItem value=\"estagio\">Estágio</SelectItem>\n                          <SelectItem value=\"temporario\">Temporário</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"jobType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tipo de Vaga</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-job-type\">\n                            <SelectValue placeholder=\"Selecione o tipo\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"produtiva\">PRODUTIVA - Faturar</SelectItem>\n                          <SelectItem value=\"improdutiva\">IMPRODUTIVA - Sem faturar</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {Array.isArray(costCenters) && costCenters.length > 0 && (\n                <div className=\"mt-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"costCenterId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Centro de Custo</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-cost-center\">\n                              <SelectValue placeholder=\"Selecione um centro de custo\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {costCenters.map((center: any) => (\n                              <SelectItem key={center.id} value={center.id}>\n                                {center.name} ({center.code})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n\n              <div className=\"mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"specifications\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Especificações da Vaga</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Descreva as especificações detalhadas da vaga...\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                          data-testid=\"input-specifications\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Descreva as responsabilidades e requisitos da vaga...\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                          data-testid=\"input-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Seção 3: Condições de Trabalho */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Condições de Trabalho</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"workScaleId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Escala de Trabalho</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-work-scale\">\n                            <SelectValue placeholder=\"Selecione a escala\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {workScales?.map((scale: any) => (\n                            <SelectItem key={scale.id} value={scale.id}>\n                              {scale.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"workHours\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Horário de Trabalho</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Ex: 08:00 às 17:00\" {...field} data-testid=\"input-work-hours\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Seção 4: Remuneração e Benefícios */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Remuneração e Benefícios</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"salaryMin\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Valor Salário (R$)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"5000\"\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-salary-min\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"bonus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Gratificação (R$)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"1000\"\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-bonus\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"mt-4 space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"hasHazardPay\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-hazard-pay\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>Periculosidade</FormLabel>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"unhealthinessLevel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Insalubridade</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-unhealthiness\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"nao\">Não</SelectItem>\n                            <SelectItem value=\"10\">10%</SelectItem>\n                            <SelectItem value=\"20\">20%</SelectItem>\n                            <SelectItem value=\"40\">40%</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <p className=\"text-sm font-medium\">Benefícios</p>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"hasMealVoucher\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-meal-voucher\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel>Vale Alimentação</FormLabel>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"hasFoodVoucher\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-food-voucher\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel>Vale Refeição</FormLabel>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"hasTransportVoucher\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-transport-voucher\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel>Vale Transporte</FormLabel>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"hasHealthInsurance\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-health-insurance\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel>Plano de Saúde</FormLabel>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"hasChartered\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-chartered\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel>Fretado</FormLabel>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Status - Apenas visível ao editar vaga */}\n            {isEditing && (\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-status\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"aberto\">Aberto</SelectItem>\n                        <SelectItem value=\"active\">Ativa</SelectItem>\n                        <SelectItem value=\"aprovada\">Aprovada</SelectItem>\n                        <SelectItem value=\"em_recrutamento\">Em Recrutamento</SelectItem>\n                        <SelectItem value=\"em_documentacao\">Em Documentação</SelectItem>\n                        <SelectItem value=\"dp\">DP</SelectItem>\n                        <SelectItem value=\"em_mobilizacao\">Em Mobilização</SelectItem>\n                        <SelectItem value=\"cancelada\">Cancelada</SelectItem>\n                        <SelectItem value=\"closed\">Fechada</SelectItem>\n                        <SelectItem value=\"expired\">Expirada</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Mensagem informativa quando criar nova vaga */}\n            {!isEditing && (\n              <div className=\"text-sm text-muted-foreground bg-blue-50 dark:bg-blue-950 p-3 rounded-md border border-blue-200 dark:border-blue-800\">\n                ℹ️ Ao criar uma vaga, o status será automaticamente definido como <strong>ABERTO</strong>\n              </div>\n            )}\n\n            <div className=\"flex items-center justify-end space-x-4 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel\">\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createJobMutation.isPending || updateJobMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                {(createJobMutation.isPending || updateJobMutation.isPending) && (\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                )}\n                {isEditing ? \"Atualizar Vaga\" : \"Criar Vaga\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":47127},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/pages/Companies.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { CompaniesListResponse } from \"@shared/schema\";\nimport Layout from \"@/components/Layout\";\nimport TopBar from \"@/components/TopBar\";\nimport CompanyModal from \"@/components/CompanyModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Companies() {\n  const [showCompanyModal, setShowCompanyModal] = useState(false);\n  const [editingCompanyId, setEditingCompanyId] = useState<string | undefined>();\n  const [deletingCompanyId, setDeletingCompanyId] = useState<string | undefined>();\n  const [search, setSearch] = useState(\"\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: companies, isLoading } = useQuery<CompaniesListResponse>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const deleteCompanyMutation = useMutation({\n    mutationFn: async (companyId: string) => {\n      await apiRequest(\"DELETE\", `/api/companies/${companyId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Empresa excluída com sucesso!\",\n      });\n      setDeletingCompanyId(undefined);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir empresa. Verifique se não há vagas vinculadas.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditCompany = (companyId: string) => {\n    setEditingCompanyId(companyId);\n    setShowCompanyModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowCompanyModal(false);\n    setEditingCompanyId(undefined);\n  };\n\n  const handleDeleteCompany = (companyId: string) => {\n    deleteCompanyMutation.mutate(companyId);\n  };\n\n  const filteredCompanies = companies?.filter((company) =>\n    company.name.toLowerCase().includes(search.toLowerCase())\n  ) || [];\n\n  return (\n    <>\n      <TopBar\n        title=\"Empresas\"\n        showCreateButton\n        onCreateClick={() => setShowCompanyModal(true)}\n        createButtonText=\"Nova Empresa\"\n      />\n\n      <div className=\"space-y-6\">\n        {/* Search and Filters */}\n        <div className=\"bg-card p-6 rounded-lg border border-border\">\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Input\n                placeholder=\"Buscar empresas...\"\n                className=\"pl-10\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                data-testid=\"input-search-companies\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Exportar\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Companies Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-64 w-full\" />\n            ))}\n          </div>\n        ) : (\n          <>\n            {filteredCompanies.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredCompanies.map((company: any) => (\n                  <Card key={company.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-company-${company.id}`}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                            <i className=\"fas fa-building text-primary\"></i>\n                          </div>\n                          <div>\n                            <CardTitle className=\"text-lg\" data-testid={`text-company-name-${company.id}`}>\n                              {company.name}\n                            </CardTitle>\n                            {company.website && (\n                              <a\n                                href={company.website}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"text-sm text-primary hover:underline\"\n                              >\n                                <i className=\"fas fa-external-link-alt mr-1\"></i>\n                                Website\n                              </a>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditCompany(company.id)}\n                            data-testid={`button-edit-company-${company.id}`}\n                          >\n                            <i className=\"fas fa-edit text-primary\"></i>\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setDeletingCompanyId(company.id)}\n                            data-testid={`button-delete-company-${company.id}`}\n                          >\n                            <i className=\"fas fa-trash text-destructive\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {company.description && (\n                        <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                          {company.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">Vagas Ativas</span>\n                          <Badge variant=\"secondary\" data-testid={`text-jobs-count-${company.id}`}>\n                            {company.jobsCount || 0}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">Centros de Custo</span>\n                          <Badge variant=\"outline\">\n                            {company.costCenters?.length || 0}\n                          </Badge>\n                        </div>\n                      </div>\n\n                      {company.costCenters && company.costCenters.length > 0 && (\n                        <div className=\"mt-4\">\n                          <p className=\"text-sm font-medium mb-2\">Centros de Custo:</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {company.costCenters.slice(0, 3).map((center: any) => (\n                              <Badge key={center.id} variant=\"outline\" className=\"text-xs\">\n                                {center.name}\n                              </Badge>\n                            ))}\n                            {company.costCenters.length > 3 && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                +{company.costCenters.length - 3} mais\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"mt-4 pt-4 border-t border-border\">\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span>Criado em</span>\n                          <span>{new Date(company.createdAt).toLocaleDateString(\"pt-BR\")}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"text-muted-foreground\">\n                  <i className=\"fas fa-building text-4xl mb-4\"></i>\n                  <p className=\"text-lg font-medium mb-2\">\n                    {search ? \"Nenhuma empresa encontrada\" : \"Nenhuma empresa cadastrada\"}\n                  </p>\n                  <p className=\"text-sm mb-4\">\n                    {search\n                      ? \"Tente ajustar sua busca\"\n                      : \"Comece cadastrando a primeira empresa\"}\n                  </p>\n                  {!search && (\n                    <Button onClick={() => setShowCompanyModal(true)}>\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Cadastrar Primeira Empresa\n                    </Button>\n                  )}\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Company Modal */}\n      <CompanyModal\n        isOpen={showCompanyModal}\n        onClose={handleCloseModal}\n        companyId={editingCompanyId}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingCompanyId} onOpenChange={() => setDeletingCompanyId(undefined)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir esta empresa? Esta ação não pode ser desfeita.\n              Certifique-se de que não há vagas vinculadas a esta empresa.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancelar</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingCompanyId && handleDeleteCompany(deletingCompanyId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Excluir Empresa\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":11181},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80}},"version":2}